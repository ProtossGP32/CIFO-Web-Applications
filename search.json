[
  {
    "objectID": "java-exercises/frameworks/spring-boot/03-spring-security.html#password-encoding",
    "href": "java-exercises/frameworks/spring-boot/03-spring-security.html#password-encoding",
    "title": "03 - Spring Security",
    "section": "Password encoding",
    "text": "Password encoding\nSee this Baeldung article on how to encode passwords."
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/00-what-is-spring-boot.html",
    "href": "java-exercises/frameworks/spring-boot/00-what-is-spring-boot.html",
    "title": "00 - What is Spring Boot?",
    "section": "",
    "text": "From spring.io:\n\nSpring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.\n\n\n\n\nCreate stand-alone Spring applications\nEmbed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)\nProvide opinionated ‘starter’ dependencies to simplify your build configuration\nAutomatically configure Spring and 3rd party libraries whenever possible\nProvide production-ready features such as metrics, health checks, and externalized configuration\nAbsolutely no code generation and no requirements for XML configuration\n\nIBM has an article about why Spring Framework is so popular and how Spring Boot eases the creation of Spring projects: From ibm.com:\n\nSpring Framework offers a dependency injection feature that lets objects define their own dependencies that the Spring container later injects into them. This enables developers to create modular applications consisting of loosely coupled components that are ideal for microservices and distributed network applications.\n\n\nAs capable as comprehensive as Spring Framework is, it still requires significant time and knowledge to configure, set up, and deploy Spring applications. Spring Boot mitigates this effort with three important capabilities.\n\n\n\n\n\n\nAutoconfiguration means that applications are initialized with pre-set dependencies that you don’t have to configure manually.\n\nAs Java Spring Boot comes with built-in autoconfiguration capabilities, it automatically configures both the underlying Spring Framework and third-party packages based on your settings (and based on best practices, which helps avoid errors)\nEven though you can override these defaults once the initialization is complete, Java Spring Boot’s autoconfiguration feature enables you to start developing your Spring-based applications fast and reduces the possibility of human errors.\n\n\n\n\nSpring Boot uses an opinionated approach to adding and configuring starter dependencies, based on the needs of your project.\n\nFollowing its own judgement, Spring Boot chooses which packages to install and which default values to use, rather than requiring you to make all those decisions yourself and set up everything manually.\nYou can define the needs of your projects during the initialization process, during which you choose among multiple starter dependencies –called _Spring Starters– that cover typical use cases. You run Spring Boot Initializr by filling out a simple web form, without any codingYou can define the needs of\n\n\n\n\nSpring Boot helps developers create applications that just run.\n\nIt lets you create standalone applications that run on their own, without relying on an external web server, by embedding a web server such as Tomcat or Netty into your app during the initialization process\nAs a result, you can launch your application on any platform by simply hitting th Run command\n\n\n\n\n\nSome of the key concepts of Spring Boot and how it works include:\n\nBeans: a Java object managed by the Spring container\n\nBeans are typically defined in configuration files, and the Spring container is responsible for instantiating, configuring, and managing the lifecycle of these beans\n\nDependency Injection: Spring uses dependency injection to manage the dependencies between beans\n\nThis means that instead of instantiating and configureing dependencies manually, you can use annotations or configuration files to tell the Spring container which dependencies a bean has and how they should be instantiated\n\nObject-Oriented Programming: it uses interfaces and inheritance to create a modular and reusable codebase\nAspect-Oriented Programming: this allows to separate cross-cutting concerns such as logging, security, and transaction management from the core business logic of your application\nData Access: Spring Boot provides a set of starters and libraries for connecting to databases and performing data access operations.\n\nIt also provides support for Object-Relational-Mapping (ORM) frameworks such as Hibernate and JPA\n\nWeb Development: Spring Boot provides a set of starters and libraries for building web applications and RESTful web services.\n\nIt also provides support for web technoligies such as Spring MVC and Thymeleaf\n\nAnnotations: Spring Boot uses annotations extensively to configure beans and manage dependencies\n\nUnderstanding the different annotations available in Spring, such as @Bean, @Autowired, @Component, can help you effectively use the framework\n\nMVC (Model-View-Controller): Spring Boot provides support for the MVC architectural pattern, which separates the application into three layers:\n\nThe model (data)\nThe view (presentation)\nThe controller (logic)\n\nUnderstanding how MVC works in Spring boot can help you structure your appliication effectively. See model entry for more details regarding MVC.\nREST (Representational State Transfer): Spring Boot provides support for building RESTful web services.\n\nUnderstanding the principles of REST and how to create RESTful web services using Spring Boot can help you effectively use the framework\n\n\n\n\n\n\n\n\nTo sum up\n\n\n\nOverall, Spring Boot works by providing a set of pre-configured options and defaults, as well as a set of tools for quickly creating and running an application using the Spring Framework.\nIt uses concepts such as beans, dependency injection and OOP to make it easy to build and run a Spring-based application, with minimal configuration and setup required."
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/00-what-is-spring-boot.html#features",
    "href": "java-exercises/frameworks/spring-boot/00-what-is-spring-boot.html#features",
    "title": "00 - What is Spring Boot?",
    "section": "",
    "text": "Create stand-alone Spring applications\nEmbed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)\nProvide opinionated ‘starter’ dependencies to simplify your build configuration\nAutomatically configure Spring and 3rd party libraries whenever possible\nProvide production-ready features such as metrics, health checks, and externalized configuration\nAbsolutely no code generation and no requirements for XML configuration\n\nIBM has an article about why Spring Framework is so popular and how Spring Boot eases the creation of Spring projects: From ibm.com:\n\nSpring Framework offers a dependency injection feature that lets objects define their own dependencies that the Spring container later injects into them. This enables developers to create modular applications consisting of loosely coupled components that are ideal for microservices and distributed network applications.\n\n\nAs capable as comprehensive as Spring Framework is, it still requires significant time and knowledge to configure, set up, and deploy Spring applications. Spring Boot mitigates this effort with three important capabilities."
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/00-what-is-spring-boot.html#capabilities",
    "href": "java-exercises/frameworks/spring-boot/00-what-is-spring-boot.html#capabilities",
    "title": "00 - What is Spring Boot?",
    "section": "",
    "text": "Autoconfiguration means that applications are initialized with pre-set dependencies that you don’t have to configure manually.\n\nAs Java Spring Boot comes with built-in autoconfiguration capabilities, it automatically configures both the underlying Spring Framework and third-party packages based on your settings (and based on best practices, which helps avoid errors)\nEven though you can override these defaults once the initialization is complete, Java Spring Boot’s autoconfiguration feature enables you to start developing your Spring-based applications fast and reduces the possibility of human errors.\n\n\n\n\nSpring Boot uses an opinionated approach to adding and configuring starter dependencies, based on the needs of your project.\n\nFollowing its own judgement, Spring Boot chooses which packages to install and which default values to use, rather than requiring you to make all those decisions yourself and set up everything manually.\nYou can define the needs of your projects during the initialization process, during which you choose among multiple starter dependencies –called _Spring Starters– that cover typical use cases. You run Spring Boot Initializr by filling out a simple web form, without any codingYou can define the needs of\n\n\n\n\nSpring Boot helps developers create applications that just run.\n\nIt lets you create standalone applications that run on their own, without relying on an external web server, by embedding a web server such as Tomcat or Netty into your app during the initialization process\nAs a result, you can launch your application on any platform by simply hitting th Run command"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/00-what-is-spring-boot.html#fundamentals",
    "href": "java-exercises/frameworks/spring-boot/00-what-is-spring-boot.html#fundamentals",
    "title": "00 - What is Spring Boot?",
    "section": "",
    "text": "Some of the key concepts of Spring Boot and how it works include:\n\nBeans: a Java object managed by the Spring container\n\nBeans are typically defined in configuration files, and the Spring container is responsible for instantiating, configuring, and managing the lifecycle of these beans\n\nDependency Injection: Spring uses dependency injection to manage the dependencies between beans\n\nThis means that instead of instantiating and configureing dependencies manually, you can use annotations or configuration files to tell the Spring container which dependencies a bean has and how they should be instantiated\n\nObject-Oriented Programming: it uses interfaces and inheritance to create a modular and reusable codebase\nAspect-Oriented Programming: this allows to separate cross-cutting concerns such as logging, security, and transaction management from the core business logic of your application\nData Access: Spring Boot provides a set of starters and libraries for connecting to databases and performing data access operations.\n\nIt also provides support for Object-Relational-Mapping (ORM) frameworks such as Hibernate and JPA\n\nWeb Development: Spring Boot provides a set of starters and libraries for building web applications and RESTful web services.\n\nIt also provides support for web technoligies such as Spring MVC and Thymeleaf\n\nAnnotations: Spring Boot uses annotations extensively to configure beans and manage dependencies\n\nUnderstanding the different annotations available in Spring, such as @Bean, @Autowired, @Component, can help you effectively use the framework\n\nMVC (Model-View-Controller): Spring Boot provides support for the MVC architectural pattern, which separates the application into three layers:\n\nThe model (data)\nThe view (presentation)\nThe controller (logic)\n\nUnderstanding how MVC works in Spring boot can help you structure your appliication effectively. See model entry for more details regarding MVC.\nREST (Representational State Transfer): Spring Boot provides support for building RESTful web services.\n\nUnderstanding the principles of REST and how to create RESTful web services using Spring Boot can help you effectively use the framework\n\n\n\n\n\n\n\n\nTo sum up\n\n\n\nOverall, Spring Boot works by providing a set of pre-configured options and defaults, as well as a set of tools for quickly creating and running an application using the Spring Framework.\nIt uses concepts such as beans, dependency injection and OOP to make it easy to build and run a Spring-based application, with minimal configuration and setup required."
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/09-http-session.html",
    "href": "java-exercises/frameworks/spring-boot/09-http-session.html",
    "title": "09 - HTTP sessions",
    "section": "",
    "text": "From Baeldung article: HTTP session (or Spring Session in Spring) has the simple goal of free up session management from the limitations of the HTTP session stored in the server.\nThe solution makes it easy to share data between services in the cloud without being tied to a single container (i.e. Tomcat). Additionally, it supports multiple sessions in the same browser and sending sessions in a header."
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/09-http-session.html#httpsession-class",
    "href": "java-exercises/frameworks/spring-boot/09-http-session.html#httpsession-class",
    "title": "09 - HTTP sessions",
    "section": "HttpSession class",
    "text": "HttpSession class\nSpring Boot automatically generates the HttpSession object when defined as a @RequestMapping method parameter. The HttpSession should be created on user log in time, and then it is available to all the app services. It basically contains the session ID and any other relevant information that are common and requried to serveral domains or services of our app."
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/09-http-session.html#httpservletrequest-class",
    "href": "java-exercises/frameworks/spring-boot/09-http-session.html#httpservletrequest-class",
    "title": "09 - HTTP sessions",
    "section": "HttpServletRequest class",
    "text": "HttpServletRequest class\nHttpServletRequest class contains all the information of the given HTTP request. Its lifetime is between a request and a response.\nSpring provides an annotation to process this information, @RequestBody."
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/08-spring-boot-controller.html#requestmapping",
    "href": "java-exercises/frameworks/spring-boot/08-spring-boot-controller.html#requestmapping",
    "title": "08 - Configure Spring Boot Controllers",
    "section": "@RequestMapping",
    "text": "@RequestMapping"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/08-spring-boot-controller.html#requestparam",
    "href": "java-exercises/frameworks/spring-boot/08-spring-boot-controller.html#requestparam",
    "title": "08 - Configure Spring Boot Controllers",
    "section": "@RequestParam",
    "text": "@RequestParam"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/08-spring-boot-controller.html#pathvariable",
    "href": "java-exercises/frameworks/spring-boot/08-spring-boot-controller.html#pathvariable",
    "title": "08 - Configure Spring Boot Controllers",
    "section": "@PathVariable",
    "text": "@PathVariable\n\n\n\n\n\n\nDifferences between @RequestParam and @PathVariable\n\n\n\nThis article explains when it is useful to use one or the other and how they are sent along with the URI path."
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/08-spring-boot-controller.html#model-and-modelmap",
    "href": "java-exercises/frameworks/spring-boot/08-spring-boot-controller.html#model-and-modelmap",
    "title": "08 - Configure Spring Boot Controllers",
    "section": "Model and ModelMap",
    "text": "Model and ModelMap"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/08-spring-boot-controller.html#redirectattributes",
    "href": "java-exercises/frameworks/spring-boot/08-spring-boot-controller.html#redirectattributes",
    "title": "08 - Configure Spring Boot Controllers",
    "section": "RedirectAttributes",
    "text": "RedirectAttributes"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/05-spring-boot-jpa-composition.html",
    "href": "java-exercises/frameworks/spring-boot/05-spring-boot-jpa-composition.html",
    "title": "05 - Spring Boot and JPA composition",
    "section": "",
    "text": "Introduction\n\n\nComposition types"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/04-spring-boot-jpa-H2.html",
    "href": "java-exercises/frameworks/spring-boot/04-spring-boot-jpa-H2.html",
    "title": "04 - Spring Boot with JPA and H2",
    "section": "",
    "text": "This entry extends the material explained in the previous post about persisting entities in H2 using JPA and Spring Boot. Here we’ll talk about persisting classes with inheritance as well as coupling with other classes."
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/04-spring-boot-jpa-H2.html#table-per-class-strategy",
    "href": "java-exercises/frameworks/spring-boot/04-spring-boot-jpa-H2.html#table-per-class-strategy",
    "title": "04 - Spring Boot with JPA and H2",
    "section": "Table per Class strategy",
    "text": "Table per Class strategy\nCheck the following video for a quick example:"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/04-spring-boot-jpa-H2.html#single-table-strategy",
    "href": "java-exercises/frameworks/spring-boot/04-spring-boot-jpa-H2.html#single-table-strategy",
    "title": "04 - Spring Boot with JPA and H2",
    "section": "Single Table strategy",
    "text": "Single Table strategy\nCheck the following video for a quick example:"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/02-create-full-spring-boot-with-H2-and-thymeleaf.html",
    "href": "java-exercises/frameworks/spring-boot/02-create-full-spring-boot-with-H2-and-thymeleaf.html",
    "title": "02 - Creating a Spring Boot project with H2 and ThyMeLeaf",
    "section": "",
    "text": "Follow this guide and try to implement this project with its documentation.\nBe sure to select at least these dependencies for H2, JPA and JDBC compatibility:\n\nSpring Web\nSpring Boot DevTools\nSpring Data JPA\nH2 Database\nSpring JDBC"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/02-create-full-spring-boot-with-H2-and-thymeleaf.html#download-and-initialize-h2-in-console-mode",
    "href": "java-exercises/frameworks/spring-boot/02-create-full-spring-boot-with-H2-and-thymeleaf.html#download-and-initialize-h2-in-console-mode",
    "title": "02 - Creating a Spring Boot project with H2 and ThyMeLeaf",
    "section": "Download and initialize H2 in Console mode",
    "text": "Download and initialize H2 in Console mode\nQuick start guide\nYou can also download the latest version from the GitHub repository, in the release branch, by executing the following command:\ngh release download --repo h2database/h2database -p 'h2-*.zip'\nUnzip the file and execute the script in the bin folder:\n# Unzip the downloaded file\nunzip h2-YYYY-mm-dd.zip\n# Change directory\ncd bin\n# Execute the script\n./h2.sh\nNow a H2 Database Engine icon shall appear in the task bar of your desktop and a new browser window will appear pointing to http://127.0.1.1:8082, the H2 web console:\n\n\n\nH2 Database Engine\n\n\n\n\n\nH2 console\n\n\nWith this, you can initialize a local DB file and interact with it through the H2 console. When the H2 Console is stopped, the H2 database file can then be accessed through any IDE, like IntelliJ IDEA"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/02-create-full-spring-boot-with-H2-and-thymeleaf.html#create-a-new-database",
    "href": "java-exercises/frameworks/spring-boot/02-create-full-spring-boot-with-H2-and-thymeleaf.html#create-a-new-database",
    "title": "02 - Creating a Spring Boot project with H2 and ThyMeLeaf",
    "section": "Create a new database",
    "text": "Create a new database\nThe DB will be locally created. This will provide us with a new URL to access from the web console manager.\nThe JDBC URL should be something like jdbc:h2:./&lt;db-name&gt;, being it a relative route to the h2 jar file.\n\n\n\n\n\n\nH2 is now running in console mode\n\n\n\nThe shell script launches the H2 jar in Console mode, thus it isn’t accessible as a H2 server. If you want to use it as server, you must launch the H2 application like this:\n$ java -cp h2*.jar org.h2.tools.Server\nTCP server running at tcp://127.0.1.1:9092 (only local connections)\nPG server running at pg://127.0.1.1:5435 (only local connections)\nWeb Console server running at http://127.0.1.1:8082 (only local connections)\nS'està obrint a la sessió actual del navegador\nYou can’t connect with a web browser to the jdbc:h2:tcp://localhost/~/&lt;db-name&gt; URL, this is only achievable using a H2 client (over JDBC).\n\n\nLogin:\n\nSaved settings: Generic H2 (Server)\nSetting Name: Generic H2 (Server)\nDriver Class: org.h2.Driver\nJDBC URL: jdbc:h2:./&lt;db-name&gt;\nUser Name: &lt;db-username&gt;\nPassword: &lt;db-password&gt;"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/02-create-full-spring-boot-with-H2-and-thymeleaf.html#configuring-spring-boot-project",
    "href": "java-exercises/frameworks/spring-boot/02-create-full-spring-boot-with-H2-and-thymeleaf.html#configuring-spring-boot-project",
    "title": "02 - Creating a Spring Boot project with H2 and ThyMeLeaf",
    "section": "Configuring Spring Boot project",
    "text": "Configuring Spring Boot project\nModify the application.yml to include the H2 Datasources parameters (and also the JPA ones):\n\n\n\n\n\n\nOnly one connection at a time is allowed in Console mode\n\n\n\nMake sure you stop the H2 Console before trying to connect via IDE, or launch the H2 jar as Server and access the DB through a jdbc:h2:tcp://localhost:port/&lt;db-path&gt; URL to allow multiple connections at the same time.\n\n\n\n\napplication.yml\n\nspring:\n  main:\n    banner-mode: off\n  application:\n    name: spring-lab-0-approach-1\n  h2:\n    console:\n      enabled: 'true'\n  datasource:\n    #url: jdbc:h2:mem:mydb # Creates the DB in memory\n    #url: jdbc:h2:file:~/demodb # Creates the DB file in \"/home/$USER/demodb.mv.db\"\n    # In order to access local DB, we must enter the absolute or relative path to the file\n    # Ex: if the DB file is allocated in the root of the project --&gt; jdbc:h2:./&lt;db-name&gt;\n    # Ex: if the DB file is in the home directory --&gt; jdbc:h2:~/&lt;db-name&gt;\n    #url: jdbc:h2:/media/protoss/Dades/github/CIFO/CIFO-Web-Applications/java-exercises/spring-boot-projects/h2/library;DB_CLOSE_ON_EXIT=TRUE;FILE_LOCK=NO\n    # Accessing remote H2 servers:\n    # DB files are stored in the same path as the h2 .jar file\n    url: jdbc:h2:tcp://localhost:9092/library;DB_CLOSE_ON_EXIT=TRUE;FILE_LOCK=NO\n    username: cifoweb\n    password: cifotest\n    driverClassName: org.h2.Driver\n  jpa:\n    database-platform: org.hibernate.dialect.H2Dialect\n    hibernate:\n      dialect: org.hibernate.dialect.H2Dialect\n      ddl-auto: create\n  mvc:\n    pathmatch:\n      matching-strategy: ant-path-matcher"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/02-create-full-spring-boot-with-H2-and-thymeleaf.html#adapting-project-to-springboot",
    "href": "java-exercises/frameworks/spring-boot/02-create-full-spring-boot-with-H2-and-thymeleaf.html#adapting-project-to-springboot",
    "title": "02 - Creating a Spring Boot project with H2 and ThyMeLeaf",
    "section": "Adapting project to SpringBoot",
    "text": "Adapting project to SpringBoot\nTake as an example the Book class from the Lab SE03-2. Now we’ll include annotations to define what @Entity it represents and in what @Table it must persist. Also, for each attribute we’ll define its DB field name using @Column or in case of other entities, @ManyToMany, @OneToMany, @OneToOne or @ManyToOne."
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/02-create-full-spring-boot-with-H2-and-thymeleaf.html#dependency-injection-autowired",
    "href": "java-exercises/frameworks/spring-boot/02-create-full-spring-boot-with-H2-and-thymeleaf.html#dependency-injection-autowired",
    "title": "02 - Creating a Spring Boot project with H2 and ThyMeLeaf",
    "section": "Dependency injection (@Autowired)",
    "text": "Dependency injection (@Autowired)\nWhat is a dependency injection? It’s a SpringBoot feature that automatically wires a bean from the Spring application context into a class field or method.\n\n\n\n\n\n\nTODO\n\n\n\nExplain what a dependency injection is"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/02-create-full-spring-boot-with-H2-and-thymeleaf.html#preparing-the-frontend",
    "href": "java-exercises/frameworks/spring-boot/02-create-full-spring-boot-with-H2-and-thymeleaf.html#preparing-the-frontend",
    "title": "02 - Creating a Spring Boot project with H2 and ThyMeLeaf",
    "section": "Preparing the frontend",
    "text": "Preparing the frontend\nThe frontend is rendered using Thymeleaf engine to easily allow requests to the Spring Boot controller.\n\n\n\n\n\n\n\n\n\n\n\nTODO\n\n\n\nExplain Thymeleaf"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/02-create-full-spring-boot-with-H2-and-thymeleaf.html#launching-the-server",
    "href": "java-exercises/frameworks/spring-boot/02-create-full-spring-boot-with-H2-and-thymeleaf.html#launching-the-server",
    "title": "02 - Creating a Spring Boot project with H2 and ThyMeLeaf",
    "section": "Launching the server",
    "text": "Launching the server\nRun the application from IntelliJ for now. Later on we’ll explain how to build and package it for deployment."
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/02-create-full-spring-boot-with-H2-and-thymeleaf.html#accessing-the-server",
    "href": "java-exercises/frameworks/spring-boot/02-create-full-spring-boot-with-H2-and-thymeleaf.html#accessing-the-server",
    "title": "02 - Creating a Spring Boot project with H2 and ThyMeLeaf",
    "section": "Accessing the server",
    "text": "Accessing the server\nServer will be available through the declared server port in the application.properties or application.yml file. If not defined, as springboot is using Tomcat, the default port will be 8080."
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/11-spring-boot-test.html",
    "href": "java-exercises/frameworks/spring-boot/11-spring-boot-test.html",
    "title": "11 - Tests - Spring Boot and JPA",
    "section": "",
    "text": "When dealing with databases, we must ensure that the repositories, services and controllers that we create for manipulating its data do what it’s expected. To do so, SpringBoot introduces a @SpringBootTest annotation that eases all the process of creating Integratin tests"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/11-spring-boot-test.html#project-dependencies",
    "href": "java-exercises/frameworks/spring-boot/11-spring-boot-test.html#project-dependencies",
    "title": "11 - Tests - Spring Boot and JPA",
    "section": "Project dependencies",
    "text": "Project dependencies\nIn order to use the @SpringBootTest annotation, we need to add the following dependency to our pom.xml:\n\n\npom.xml\n\n        &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;version&gt;3.0.4&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n\nAs the scope of the dependency states, this will only be included and applied on test, not on runtime."
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/11-spring-boot-test.html#define-your-tests",
    "href": "java-exercises/frameworks/spring-boot/11-spring-boot-test.html#define-your-tests",
    "title": "11 - Tests - Spring Boot and JPA",
    "section": "Define your tests",
    "text": "Define your tests\nNow we can define our tests as if we were coding any other test, and we can make use of the same Spring annotations in our code:\n\n\n\n\n\n\nTODO: replace this snippet with a reference to an actual test file from the java examples\n\n\n\n\n\n\n\n\nUserServiceTest.java\n\npackage org.teamcifo.tindergames.userEntity;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@SpringBootTest\nclass UserServiceTest {\n\n    @Autowired\n    UserService userService;\n    @Autowired\n    UserRepository userRepository;\n    @Test\n    void addUserToDB() {\n        User newUser = new User();\n        // Add the new user to the database\n        userService.addUserToDB(newUser);\n        // Check that the user has been saved in the DB\n        assertTrue(userRepository.existsById(newUser.getUserId()));\n    }\n}"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/11-spring-boot-test.html#defining-the-scope-of-the-tests",
    "href": "java-exercises/frameworks/spring-boot/11-spring-boot-test.html#defining-the-scope-of-the-tests",
    "title": "11 - Tests - Spring Boot and JPA",
    "section": "Defining the scope of the tests",
    "text": "Defining the scope of the tests\nIf you need to set up some objects before each or all tests execution, you can use the @BeforeEach or @BeforeAll annotations. Be aware that these annotations expect the objects to be static so they can be accessed by each test by default. If you don’t want to make them static and you know that the results of this test class won’t be reused outside it, you can keep them as local by adding the annotation @TestInstance(TestInstance.LifeCycle.PER_CLASS) to the class.\nHere’s an example:\n\n\nTests with @BeforeAll annotation\n\npackage org.teamcifo.tindergames.userEntity;\n\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.teamcifo.utils.FakeDataGenerator;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@SpringBootTest\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\nclass UserServiceTest {\n\n    @Autowired\n    UserService userService;\n    @Autowired\n    UserRepository userRepository;\n\n    private User fakeUser;\n\n    @BeforeAll\n    void setUp(){\n        this.fakeUser = FakeDataGenerator.createFakeUser();\n    }\n\n    @Test\n    void addUserToDB() {\n        // Add the new user to the database\n        userService.addUserToDB(this.fakeUser);\n        // Check that the user has been saved in the DB\n        assertTrue(userRepository.existsById(this.fakeUser.getUserId()));\n    }\n}"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/11-spring-boot-test.html#defining-integration-tests-with-jpa",
    "href": "java-exercises/frameworks/spring-boot/11-spring-boot-test.html#defining-integration-tests-with-jpa",
    "title": "11 - Tests - Spring Boot and JPA",
    "section": "Defining integration tests with JPA",
    "text": "Defining integration tests with JPA\nWhen retrieving data from a database, Hibernate creates a Session to execute the required commands, and then closes it. This prevents further queries on nested objects within the retrieved one (we’re talking here about multiplicity relationships - @OneToOne, @OneToMany or @ManyToMany, etc…) because by default the fetch configuration for these types of related objects is set to FetchType.LAZY, and that’s what we want (other types such as FetchType.EAGER are unadvised). This config makes the test fail and it will throw a org.hibernate.LazyInitializationException exception\nA lot of options seem to exist to fix this exception, but either are too old or don’t seem to be aligned with the way we’ve learned to use SpringBoot annotations and JPA up to this moment. This StackOverflow entry enumerates just 3 ways to overcome this, being the third one the one with success results.\n@Transactional annotation creates a Session that is kept alive during all of the method/service execution. As its drawbacks applied to a more global scope might be too complicated to handle, its usage is limited to the test methods that really need it.\nFollowing the previous example, here is a test that retrieves data from the DB and then tries to see if it is equal to a fake one. The equals method of the entity requires the system to have all of its attributes references already solved, so we implement the @Transactional annotation to make sure that GamesCollection, Gameplay and Users are correctly retrieved prior to the assertEquals. The same goes for the second example, where we go even further and compare BoardGames from the User’s GamesCollection:\n\n\n@Transactional examples\n\n    @Test\n    @Transactional\n    void getUserByID() {\n        // Retrieve the fakeUser from the DB\n        User userFromDB = userService.getUserByID(this.fakeUser.getUserId());\n        // Check that both users are the same\n        assertEquals(this.fakeUser, userFromDB);\n    }\n\n    @Test\n    @Transactional\n    void addGamesToCollection() {\n        // Add a random number of games to the collection\n        Integer numGames = this.random.nextInt(1, this.fakeBoardGames.size());\n        List&lt;String&gt; storedGames = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; numGames; i++) {\n            Integer randomGame = this.random.nextInt(0, this.fakeBoardGames.size());\n            String gameId = this.fakeBoardGames.get(randomGame).getGameID();\n            while (storedGames.contains(gameId)) {\n                // Repeat until a non-already selected game is found\n                randomGame = random.nextInt(0, this.fakeBoardGames.size());\n                gameId = this.fakeBoardGames.get(randomGame).getGameID();\n            }\n            storedGames.add(gameId);\n        }\n        // Add the list of gameIDs into the user's collection\n        userService.addGamesToCollection(this.fakeUser.getUserId(), storedGames);\n        // Check that the collection has been updated\n        User userFromDB = userService.getUserByID(this.fakeUser.getUserId());\n        for (String gameID: storedGames\n             ) {\n            // Retrieve the game from the BoardGame DB and assert that the user has it\n            assertTrue(userFromDB.getUserGamesCollection().hasGame(boardGameService.getGameByID(gameID)));\n        }\n    }"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/01-create-spring-boot-project.html",
    "href": "java-exercises/frameworks/spring-boot/01-create-spring-boot-project.html",
    "title": "01 - Creating a Spring Boot project",
    "section": "",
    "text": "Springboot is a Java framework that uses annotations to add functionalities to the SE packages"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/01-create-spring-boot-project.html#creating-a-new-project",
    "href": "java-exercises/frameworks/spring-boot/01-create-spring-boot-project.html#creating-a-new-project",
    "title": "01 - Creating a Spring Boot project",
    "section": "Creating a new project",
    "text": "Creating a new project\nGo to the Spring initializr page to prepare a simple Maven project with the required dependencies:\n\nSpring Web\nSpring Boot DevTools\nLombok\nThymeleaf\nH2 Database\nSpring JDBC\netc…\n\nAfter that, click the Generate button to download a Zip file with the project structure."
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/01-create-spring-boot-project.html#creating-controllers",
    "href": "java-exercises/frameworks/spring-boot/01-create-spring-boot-project.html#creating-controllers",
    "title": "01 - Creating a Spring Boot project",
    "section": "Creating controllers",
    "text": "Creating controllers\n\nREST controller\nUse the following annotations to create a REST controller:\n\n\nHelloRestController.java\n\npackage com.protoss.myfirstspring.controllers;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloRestController {\n\n    @GetMapping(\"/hellorest\")\n    public String HelloWorld() {\n        return \"Hello World from the REST Controller!\";\n    }\n}\n\nwhere:\n\n@RestController: this marks the class as the root of the REST controller\n@GetMapping(\"/${action}\"): maps the method to the given REST action\n\n\n\nWeb controller\nUse the following annotations to create a Web controller:\n\n\nHelloWebController.java\n\npackage com.protoss.myfirstspring.controllers;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class HelloWebController {\n\n    // define handled path\n    @RequestMapping(\"/helloweb\")\n    public String helloHandler() {\n        return \"hello.html\";\n    }\n}\n\nwhere:\n\n@Controller: this marks the class as the root of the Web controller\n@RequestMapping(\"/${page.html}\"): maps the method to the given page.html located in the src/main/resources/templates path"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/01-create-spring-boot-project.html#testing-controllers",
    "href": "java-exercises/frameworks/spring-boot/01-create-spring-boot-project.html#testing-controllers",
    "title": "01 - Creating a Spring Boot project",
    "section": "Testing controllers",
    "text": "Testing controllers\n\nAutomating endpoints testing"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/06-spring-boot-rest-api.html#restcontroller",
    "href": "java-exercises/frameworks/spring-boot/06-spring-boot-rest-api.html#restcontroller",
    "title": "05 - Spring Boot and Rest API",
    "section": "@RestController",
    "text": "@RestController\nThe Spring Boot annotation for the REST API controller. This annotation is responsible of converting the returned output to the expected plain-text format defined in the API documentation.\nAs with the @Controller, an endpoint is defined for this REST controller:\n@RequestMapping(\"/path/to/api/endpoint\")\nExample:\n@RequestMapping(\"/api/book\")"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/06-spring-boot-rest-api.html#rest-api-services",
    "href": "java-exercises/frameworks/spring-boot/06-spring-boot-rest-api.html#rest-api-services",
    "title": "05 - Spring Boot and Rest API",
    "section": "REST API services",
    "text": "REST API services\nTypes of data that the REST methods will return:\n\nResponseEntity&lt;T Entity&gt;: It’s a container that includes the following data:\n\nHttpHeaders: info regarding the API (i.e. version) as well as the operation confirmation\nBody content: it stores the Entity or the collection of Entity that we want to return"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/06-spring-boot-rest-api.html#additional-tools",
    "href": "java-exercises/frameworks/spring-boot/06-spring-boot-rest-api.html#additional-tools",
    "title": "05 - Spring Boot and Rest API",
    "section": "Additional tools",
    "text": "Additional tools\n\nSwagger\nFrom official page:\nSwagger is a tool that tries to simplify API development. Swagger isn’t available as a Spring initializer dependency, so we have to install it via Maven Repository. Follow this article for Swagger integration in your Java project. This article is related to Swagger 2, if you want to user v3 (also known as OpenAPI 3.0), follow this other article.\n\n\nMockito\nFrom official page:\n\nMockito is a mocking framework that tastes really good. It lets you write beautiful tests with a clean & simple API. […] the tests are very readable and they produce clean verification errors."
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/06-spring-boot-rest-api.html#things-to-consider",
    "href": "java-exercises/frameworks/spring-boot/06-spring-boot-rest-api.html#things-to-consider",
    "title": "05 - Spring Boot and Rest API",
    "section": "Things to consider",
    "text": "Things to consider\n\nController\n\nIt will deal with ResponseEntity&lt;T&gt; objects in the API methods to manipulate the HTTP response.\nHttpHeaders object includes information related to the response:\n\noperation: the API operation executed\nversion: the API version\noperationStatus: whether the operation is successful or not\n\n\n\n\n\n\n\n\nWhere should we send the response information?\n\n\n\nTaking into account the separation of concerns, it’s a good approach to include in the headers all the information regarding the outcome of the operation, while leaving the body for pure data objects.\n\n\n\n\nService\nIt will deal with Optional&lt;T&gt; types coming from the Repository interface. Optional types include either an object of the referenced type or a null, so they must be checked prior to its usage."
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/07-configure-spring-boot-test-profiles.html",
    "href": "java-exercises/frameworks/spring-boot/07-configure-spring-boot-test-profiles.html",
    "title": "07 - Configure Spring Boot Test Profiles",
    "section": "",
    "text": "Introduction\nWhen developing an application, tests should have their own environment. To achieve this, we can define a specific application.yml within the test domain:\nFollow the explanation in this StackOverflow answer to configure it.\n\n\nGetting started\nFirst we need to define the application.yml file for the main applications in its src/main/resources path. This file will contain all the global parameters shared with any profile.\nAfter that, create the path src/test/resources/config. Inside this path, create another application.yml file with the test properties that will override the default ones.\nThe finishing results should look like this:\n\n\n\nSpring Boot - Test properties\n\n\nWhere:\n\nThe tests logs show that we are indeed executing tests against an embedded in-memory database instead of the one defined for production"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/10-spring-data-and-databases.html",
    "href": "java-exercises/frameworks/spring-boot/10-spring-data-and-databases.html",
    "title": "10 - Data and Databases - Spring Data",
    "section": "",
    "text": "From Spring official page:\n\nSpring Data’s mission is to provide a familiar and consistent, Spring-based programming model for data access while still retaining the special traits of the underlying data store.\nIt makes it easy to use data access technologies, relational and non-relational databases, map-reduce frameworks, and cloud-based data services. This is an umbrella project which contains many subprojects that are specific to a given database. The projects are developed by working together with many of the companies and developers that are behind these exciting technologies.\n\n\n\n\nPowerful repository and custom object-mapping abstractions\nDynamic query derivation from repository method names\nImplementation domain base classes providing basic properties\nSupport for transparent auditing (created, last changed)\nPossibility to integrate custom repository code\nEasy Spring integration via JavaConfig and custom XML namespaces\nAdvanced integration with Spring MVC controllers\nExperimental support for cross-store persistence\n\n\n\n\n\n\n\nNormalized: typed database\nVery Structured: Less error-prone when dealing with its data as it is all very defined\nLow scalability: relational databases introduce high coupling between tables\nRelational database: tables linked by ID fields\nExample: each Java entity has its own table and they can be joined using ID fields\n\n\n\n\n\nNot normalized: database isn’t typed (JSON-style entries, documents)\nHigh scalability\nFast query responses\nExamples:\n\nDynamoDB\nMongoDB\n\n\n\n\n\n\nAdd the appropriate Spring Data dependency to the project and configure the data source properties in the application.properties or application.yml file."
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/10-spring-data-and-databases.html#features",
    "href": "java-exercises/frameworks/spring-boot/10-spring-data-and-databases.html#features",
    "title": "10 - Data and Databases - Spring Data",
    "section": "",
    "text": "Powerful repository and custom object-mapping abstractions\nDynamic query derivation from repository method names\nImplementation domain base classes providing basic properties\nSupport for transparent auditing (created, last changed)\nPossibility to integrate custom repository code\nEasy Spring integration via JavaConfig and custom XML namespaces\nAdvanced integration with Spring MVC controllers\nExperimental support for cross-store persistence"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/10-spring-data-and-databases.html#examples-of-database-types",
    "href": "java-exercises/frameworks/spring-boot/10-spring-data-and-databases.html#examples-of-database-types",
    "title": "10 - Data and Databases - Spring Data",
    "section": "",
    "text": "Normalized: typed database\nVery Structured: Less error-prone when dealing with its data as it is all very defined\nLow scalability: relational databases introduce high coupling between tables\nRelational database: tables linked by ID fields\nExample: each Java entity has its own table and they can be joined using ID fields\n\n\n\n\n\nNot normalized: database isn’t typed (JSON-style entries, documents)\nHigh scalability\nFast query responses\nExamples:\n\nDynamoDB\nMongoDB"
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/10-spring-data-and-databases.html#accessing-data-sources-from-spring-boot",
    "href": "java-exercises/frameworks/spring-boot/10-spring-data-and-databases.html#accessing-data-sources-from-spring-boot",
    "title": "10 - Data and Databases - Spring Data",
    "section": "",
    "text": "Add the appropriate Spring Data dependency to the project and configure the data source properties in the application.properties or application.yml file."
  },
  {
    "objectID": "java-exercises/frameworks/spring-boot/10-spring-data-and-databases.html#comparative-table",
    "href": "java-exercises/frameworks/spring-boot/10-spring-data-and-databases.html#comparative-table",
    "title": "10 - Data and Databases - Spring Data",
    "section": "Comparative table",
    "text": "Comparative table\n\n\n\n\n\n\n\n\nConcept\nSQL\nNoSQL\n\n\n\n\nData Model\nRelational\nDocument, key-value, column-family, graph\n\n\nQuery language\nStructured Query Language (SQL)\nQuery APIs, sometimes proprietary\n\n\nScalability\nVertical\nHorizontal\n\n\nData consistency\nStrong\nEventual\n\n\nTransactional support\nACID compliance\nLimited\n\n\nSchema definition\nRequired\nOptional\n\n\nQuery flexibility\nLimited\nFlexible\n\n\nJoin operations\nComplex\nNot supported\n\n\nData modeling\nFixed schema\nDynamic schema\n\n\nAvailability and Fault tolerance\nLow\nHigh"
  },
  {
    "objectID": "java-exercises/frameworks/quarkus/00-what-is-quarkus.html",
    "href": "java-exercises/frameworks/quarkus/00-what-is-quarkus.html",
    "title": "00 - What is Quarkus?",
    "section": "",
    "text": "From Quarkus official page:\n\nQuarkus is a Kubernetes-native Java framework tailored for GraaalVM and HotSpot, craftet from best-of-breed Java libraries and standards. The goal is to make Java the leading platform in Kubernetes and serverless environments while offering developers a framework to address a wider range of distributed application architecture."
  },
  {
    "objectID": "java-exercises/frameworks/quarkus/00-what-is-quarkus.html#creating-a-new-project",
    "href": "java-exercises/frameworks/quarkus/00-what-is-quarkus.html#creating-a-new-project",
    "title": "00 - What is Quarkus?",
    "section": "Creating a new project",
    "text": "Creating a new project\n\nQuarkus application initializator: Quarkus uses extensions, similar to project dependencies."
  },
  {
    "objectID": "java-exercises/Concepts/pojo-bean-entity.html",
    "href": "java-exercises/Concepts/pojo-bean-entity.html",
    "title": "Differences between a POJO, a JavaBean and an Entity",
    "section": "",
    "text": "From Baeldung article:"
  },
  {
    "objectID": "java-exercises/Concepts/pojo-bean-entity.html#description",
    "href": "java-exercises/Concepts/pojo-bean-entity.html#description",
    "title": "Differences between a POJO, a JavaBean and an Entity",
    "section": "Description",
    "text": "Description"
  },
  {
    "objectID": "java-exercises/Concepts/pojo-bean-entity.html#reflection-with-pojo",
    "href": "java-exercises/Concepts/pojo-bean-entity.html#reflection-with-pojo",
    "title": "Differences between a POJO, a JavaBean and an Entity",
    "section": "Reflection with POJO",
    "text": "Reflection with POJO"
  },
  {
    "objectID": "java-exercises/Concepts/pojo-bean-entity.html#description-1",
    "href": "java-exercises/Concepts/pojo-bean-entity.html#description-1",
    "title": "Differences between a POJO, a JavaBean and an Entity",
    "section": "Description",
    "text": "Description"
  },
  {
    "objectID": "java-exercises/Concepts/pojo-bean-entity.html#reflection",
    "href": "java-exercises/Concepts/pojo-bean-entity.html#reflection",
    "title": "Differences between a POJO, a JavaBean and an Entity",
    "section": "Reflection",
    "text": "Reflection"
  },
  {
    "objectID": "java-exercises/Concepts/pojo-bean-entity.html#description-2",
    "href": "java-exercises/Concepts/pojo-bean-entity.html#description-2",
    "title": "Differences between a POJO, a JavaBean and an Entity",
    "section": "Description",
    "text": "Description"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-a-class.html",
    "href": "java-exercises/Concepts/what-is-a-class.html",
    "title": "What is a class?",
    "section": "",
    "text": "A class is a set of parameters and methods that define the abstraction of an object. A class has the following elements:\n\nFields: these are the parameters\nConstructor: method that creates a new class object. A constructor can accept input parameters to initialize\nMethods: functions that can use the fields values to compute required outputs or update its own fields\n\n\n\n\nAn object is an instance of a class\nEach object is independent of any other object of the same class\n\n\n\n\nThere are several ways to create an object:\n\nUsing the new operator: the most common way to create an object in Java.\nUsing the clone() method: if you want to create a copy of an existing object.\n\nTo use it, implement the Cloneable interface in your class and override the clone() method\n\nUsing factory methods: it is a static method that returns an instance of a class\n\nFactory methods are often used to create objects when you need more flexibility or control over the object creation process\n\nUsing reflection: feature of the Java language that allows you to inspect and manipulate the structure of a class at runtime.\n\nTo use it, invoke the newInstance() method on the Constructor object for a particular class\n\nUsing deserialization: create an object from its serialized form, which is a stream of bytes that represents the object’s state\n\nThis method allows to persist the state of the execution and retrieve it when requested\nTo use it, the class must implement the Serializable interface and use ObjectInputStream and ObjectOutputStream classes to serialize and deserialize the object"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-a-class.html#difference-between-class-and-object",
    "href": "java-exercises/Concepts/what-is-a-class.html#difference-between-class-and-object",
    "title": "What is a class?",
    "section": "",
    "text": "An object is an instance of a class\nEach object is independent of any other object of the same class"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-a-class.html#ways-to-create-an-object",
    "href": "java-exercises/Concepts/what-is-a-class.html#ways-to-create-an-object",
    "title": "What is a class?",
    "section": "",
    "text": "There are several ways to create an object:\n\nUsing the new operator: the most common way to create an object in Java.\nUsing the clone() method: if you want to create a copy of an existing object.\n\nTo use it, implement the Cloneable interface in your class and override the clone() method\n\nUsing factory methods: it is a static method that returns an instance of a class\n\nFactory methods are often used to create objects when you need more flexibility or control over the object creation process\n\nUsing reflection: feature of the Java language that allows you to inspect and manipulate the structure of a class at runtime.\n\nTo use it, invoke the newInstance() method on the Constructor object for a particular class\n\nUsing deserialization: create an object from its serialized form, which is a stream of bytes that represents the object’s state\n\nThis method allows to persist the state of the execution and retrieve it when requested\nTo use it, the class must implement the Serializable interface and use ObjectInputStream and ObjectOutputStream classes to serialize and deserialize the object"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-a-model.html",
    "href": "java-exercises/Concepts/what-is-a-model.html",
    "title": "What is a model?",
    "section": "",
    "text": "A model is…"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-a-model.html#mvc",
    "href": "java-exercises/Concepts/what-is-a-model.html#mvc",
    "title": "What is a model?",
    "section": "MVC",
    "text": "MVC\nFrom Mozilla.org:\n\nMVC (Model-View-Controller) is a pattern in software design commonly used to implement user interfaces, data, and controlling logic. It emphasizes a separation between the software’s business logic and display. This “separation of concerns” provides for a better division of labor and improved maintenance. Some other design patterns are based on MVC, such as MVVM (Model-View-Viewmodel), MVP (Model-View-Presenter), and MVW (Model-View-Whatever).\n\n\nModel parts\nAn MVC software-design pattern is composed by three parts:\n\nModel: manages data and business logic\nThe model defines what data the app should contain. If the state of thsi data changes, then the model will usually notify the view (so the display can change as needed) and sometimes the controller (if different logic is needed to control the updated view).\n\n\nView: handles layout and display\nThe view defines how the app’s data should be displayed.\n\n\nController: routes commands to the model and view parts\nThe controller contains logic that updates the model and/or view in response to input from the users of the app.\n\n\n\n\n\n\nYou might however also want to just update the view to display the data in a different format, e.g., change the item order to alphabetical, or lowest to highest price. In this case the controller could handle this directly without needing to update the model.\n\n\n\n\n\n\nModel View controller example\nFrom Mozilla.org:\nLet’s define a simple shopping list app. What do we want to show? For each item in our shopping list, we want:\n\nThe name of the item\nThe quantity of the item to buy\nThe price of the item\n\nThe following diagram describes required functionalities and how they are implemented using MVC:\n\n\n\nMVC - Shopping app example\n\n\n\nThe model\nThe model would specify what data the list items should contain – item, price, etc. – and what list items are already present.\nThe following UML diagram is an example of the required data structure\n\n\n\n\nclassDiagram\n    %% Define an Item class that contains the info of each item\n    class Item {\n        -String name\n        -double price\n\n        +getName() String\n        +setName() void\n        +getPrice() double\n        +setPrice() void\n        +equals() boolean\n        +toString() String\n    }\n\n    %% Define a ShoppingList class to keep track of the items to buy\n    class ShoppingList {\n        +printList() void\n        +getItemAmount(Item newItem) int\n        +getItemPrice(Item newItem) double\n        +getTotalPrice() double\n        +addItem(Item newItem, int initialAmount) void\n        +increaseAmountOfItem(Item item, int amount) void\n    }\n\n    %% Classes relationships\n    Item \"*\" o-- \"1\" ShoppingList : contains\n\n\n\n\n\n\n\n\nThe View\nIn our shopping list app, the view would define how the list is presented to the user, and receive the data to display from the model.\nThe following UML diagram is an example of the expected user interface:\n\n\n\n\nclassDiagram\n    class UserInterface {\n    }\n\n    %% Define a ShoppingView class that has the View design, its layout, its UI elements, etc...\n    class ShoppingView {\n        +getView() Scene\n    }\n\n    %% Classes relationships\n    ShoppingView \"1\" o-- \"1\" UserInterface : uses\n\n\n\n\n\n\n\nThe Controller\nOur shopping list could have input forms and buttons that allow us to add or delete items. These actions require the model to be updated, so the input is sent to the controller, which then manipulates the model as appropriate, which then sends updated data to the view.\nThe following UML diagram is an example of the expected controller\n\n\n\n\n\n\nTODO\n\n\n\nAdd the UML diagram of the shopping list controller\n\n\n\n\n\nMVC on the web\n\nThe Model\nThe data model is probably contained in some kind of database\n\n\nThe View\nThe User Interface is probably written using HTML/CSS/whatever else you like, but Java can also do frontend.\n\n\nThe Controller\nThe app’s controlling code is probably written in HTML/JavaScript, but Java can also implement it in the frontend."
  },
  {
    "objectID": "java-exercises/Concepts/what-is-tdd.html",
    "href": "java-exercises/Concepts/what-is-tdd.html",
    "title": "What is TDD?",
    "section": "",
    "text": "Introduction\nTest-driven Domain (TDD) is a software development process in which tests are written for a piece of code before the code itself is written.\n\nThis approach is designed to ensure that the code meets the requirements and works as intended\nTDD involves the following steps:\n\nWriting a test for a feature\nRunning the test to see if it fails\nWriting the code to implement the feature\nRunning the test again to ensure that it passes\n\nTDD is often used in agile software development as it allows for the rapid development of high-quality code.\n\n\n\nWhat should and shouldn’t be tested?"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-maven.html",
    "href": "java-exercises/Concepts/what-is-maven.html",
    "title": "What is Maven?",
    "section": "",
    "text": "Maven is a Java dependency manager"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-maven.html#description",
    "href": "java-exercises/Concepts/what-is-maven.html#description",
    "title": "What is Maven?",
    "section": "Description",
    "text": "Description\nA dependency is a set of classes that provide functionalities to a Java project."
  },
  {
    "objectID": "java-exercises/Concepts/what-is-maven.html#scope",
    "href": "java-exercises/Concepts/what-is-maven.html#scope",
    "title": "What is Maven?",
    "section": "Scope",
    "text": "Scope\nMaven documentation\nEach dependency can define its scope, used to limit the transitivity of a dependency and to determine when a dependency is included in a classpath.\nThere are 6 different scopes:\n\ncompile: default scope, if none is defined. The dependency is available in all classpaths of a project\nprovided: similar to compile, but JDK or a container is expected to provide the dependency at runtime\nruntime: the dependency is not required for compilation, but is for execution\ntest: the dependency is only available for test compilation and execution phases; not transitive\nsystem: similar to provided, except that a JAR that contains it is explicitly provided; the artifact is always available and is not looked up in a repository\nimport: only support on a dependency of type pom in the &lt;dependencyManager&gt; section. The dependency is to be replaced with the effective list of dependencies in the specified POM’s &lt;dependencyManagement&gt; section. Since they are replaced, dependencies with a scope of import do not actually participate in limiting the transitivity of a dependency"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-maven.html#annotations",
    "href": "java-exercises/Concepts/what-is-maven.html#annotations",
    "title": "What is Maven?",
    "section": "Annotations",
    "text": "Annotations\n\n@Data: Lombok dependency annotation that bundles the features of @ToString, @EqualsAndHashCode, @Getter / @Setter and @RequiredArgsConstructor together"
  },
  {
    "objectID": "java-exercises/Concepts/object-creation.html",
    "href": "java-exercises/Concepts/object-creation.html",
    "title": "Object creation",
    "section": "",
    "text": "Where do we create them?\n\nProject structure\nData types\nNested classes\n\nHow do we create them?\n\nnew\nFactory classes\n\nHow do we manage them?\n\nMethods creation\nManager classes\n\nHow do we send data?\n\nSend Object references to other classes\n\n\n\n\n\n\nflowchart LR\n    A[Object Creation] --&gt; B{Where do we\\ncreate them?}\n    B --&gt; C[Project structure]\n    A --&gt; D{How do we\\ncreate them?}\n    D --&gt; E['new']\n    D --&gt; F['Factory' classes]\n    A --&gt; G{How do we\\nmanage them?}\n    G --&gt; H[Methods creation]\n    G --&gt; H2[Manager classes]\n    A --&gt; I{How do we\\nsend data?}\n    I --&gt; J[Send Object references\\n to other classes]\n\n\nObject creation scope\n\n\n\n\n\n\n\n\n\nBe aware of the scope of each Object!\n\n\n\nEncapsulation is critical, keep variables within its required scope. Don’t try to make them available to everyone if not critical."
  },
  {
    "objectID": "java-exercises/Concepts/object-creation.html#what-to-take-into-account-when-creating-objects",
    "href": "java-exercises/Concepts/object-creation.html#what-to-take-into-account-when-creating-objects",
    "title": "Object creation",
    "section": "",
    "text": "Where do we create them?\n\nProject structure\nData types\nNested classes\n\nHow do we create them?\n\nnew\nFactory classes\n\nHow do we manage them?\n\nMethods creation\nManager classes\n\nHow do we send data?\n\nSend Object references to other classes\n\n\n\n\n\n\nflowchart LR\n    A[Object Creation] --&gt; B{Where do we\\ncreate them?}\n    B --&gt; C[Project structure]\n    A --&gt; D{How do we\\ncreate them?}\n    D --&gt; E['new']\n    D --&gt; F['Factory' classes]\n    A --&gt; G{How do we\\nmanage them?}\n    G --&gt; H[Methods creation]\n    G --&gt; H2[Manager classes]\n    A --&gt; I{How do we\\nsend data?}\n    I --&gt; J[Send Object references\\n to other classes]\n\n\nObject creation scope\n\n\n\n\n\n\n\n\n\nBe aware of the scope of each Object!\n\n\n\nEncapsulation is critical, keep variables within its required scope. Don’t try to make them available to everyone if not critical."
  },
  {
    "objectID": "java-exercises/Concepts/what-is-the-static-modifier.html",
    "href": "java-exercises/Concepts/what-is-the-static-modifier.html",
    "title": "What is the static modifier?",
    "section": "",
    "text": "The static modifier defines the access scope of any element of the object-oriented domain (?)"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-ddd.html",
    "href": "java-exercises/Concepts/what-is-ddd.html",
    "title": "What is DDD?",
    "section": "",
    "text": "From Airbrake:\n\n\n\n\n\n\nTL:DR\n\n\n\nDomain-driven Design (DDD) is a software development approach that uses and builds upon Object-Oriented Analysis and Design (OOAD) principles and ideas.\n\n\n\n\nThe standard dictionary dictionary definition of domain is: “A sphere of knowledge or activity”. In software engineering, the domain commonly refers to the subject area on which the application is intended to apply.\nIn other words, during appliaction development, the domain is the sphere of knowledge and activity around which the application logic resolves.\nThe domain layer or domain logic is better known as the business logic. The business logic of an application refers to the higher-level rules for how buisness objects interact with one another to create and modify modeled data.\n\n\n\nDDD aims to ease the creation of complex applications by connecting the related pieces of software into an ever-evolving model.\nDDD focueses on three core principles:\n\nFocus on the core domain and domain logic\nBase complex designs on models of the domain\nCollaboration with domain experts to improve the application model and resolve any emerging domain-related issues"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-ddd.html#what-is-the-domain",
    "href": "java-exercises/Concepts/what-is-ddd.html#what-is-the-domain",
    "title": "What is DDD?",
    "section": "",
    "text": "The standard dictionary dictionary definition of domain is: “A sphere of knowledge or activity”. In software engineering, the domain commonly refers to the subject area on which the application is intended to apply.\nIn other words, during appliaction development, the domain is the sphere of knowledge and activity around which the application logic resolves.\nThe domain layer or domain logic is better known as the business logic. The business logic of an application refers to the higher-level rules for how buisness objects interact with one another to create and modify modeled data."
  },
  {
    "objectID": "java-exercises/Concepts/what-is-ddd.html#what-is-domain-driven-design",
    "href": "java-exercises/Concepts/what-is-ddd.html#what-is-domain-driven-design",
    "title": "What is DDD?",
    "section": "",
    "text": "DDD aims to ease the creation of complex applications by connecting the related pieces of software into an ever-evolving model.\nDDD focueses on three core principles:\n\nFocus on the core domain and domain logic\nBase complex designs on models of the domain\nCollaboration with domain experts to improve the application model and resolve any emerging domain-related issues"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-ddd.html#building-blocks",
    "href": "java-exercises/Concepts/what-is-ddd.html#building-blocks",
    "title": "What is DDD?",
    "section": "Building Blocks",
    "text": "Building Blocks\nDomain-driven design also defines several high-level concepts that can be used in conjunction with one another to create and modify domain models:\n\nEntity: An object identified by its consistent thread of continuity, as opposed to traditional objects, which are defined by their attributes\n\nCustom interpretation:\n\nValue Object: An immutable (unchangeable) object that has attributes but no distinct identity\n\nCustom interpretation:\n\nDomain event: An object that records a discrete event related to model activity within the system. While all events within the system could be tracked, a domain event is only created for event types that the domain experts care about.\n\nCustom interpretation:\n\nAggregate: A cluster of entities and value objects with defined boundaries around the group. Rather than allowing every single entity or value object to perform all actions on its own, the collective aggregate of items is assigned a singular aggregate root item. Now, external objects no longer have direct access to every individual entity or value object within the aggragate but instead only have access to the single aggregate root item and use that to pass along instructions to the group as a whole.\n\nCustom interpretation:\n\nService: Essentially, a service is an operation or form of business logic that doesn’t naturally fit within the realm of objects. In other words, if some functionality must exist, but it cannot be related to an entity or value object, it’s probably a service.\n\nCustom interpretation:\n\nRepositories: Not to be confused with common version control repositories, the DDD meaning of a repository is a service that uses a global interface to provide access to all entities and value objects within a particular aggregate collection. Methods should be defined to allow for the creation, modification, and deletion of objects within the aggregate. However, by using this repository service to make data queries, the goal is to remove such data query capabilities from within the business logic of object models.\n\nCustom interpretation:\n\nFactories: DDD suggests using a factory, which encapsulates the logic of creating complex objects and aggregates, ensuring that the client does not know the inner-workings of object manipulation.\n\nDDD heavily emphasizes the ever-more-popular practice of continuous integration (CI), which asks the entire development team to use one shared code repository and push commits to it daily (if not multiple times a day).\nAn automatic process executes at the end of the work day, which checks the integrity of the entire code base, running automated unit tests, regression tests, and the like to quickly detect any potential problems that may have been introduced in the latest commits."
  },
  {
    "objectID": "java-exercises/Concepts/what-is-ddd.html#advantages-of-domain-driven-design",
    "href": "java-exercises/Concepts/what-is-ddd.html#advantages-of-domain-driven-design",
    "title": "What is DDD?",
    "section": "Advantages of Domain-Driven Design",
    "text": "Advantages of Domain-Driven Design\n\nEases Communication: With an early emphasis on establishing a common and ubiuitous language related to the domain model of the project, teams will often find communitacion throughout the entire development life cycle to be much easier. Typically, DDD will require less technical jargon when discussing aspects of the application since the ubiquitous language established early on will likely define simpler terms to refer to those more technical aspects.\nImproves Flexibility: Since DDD is so heavily based on the concepts of object-oriented analysis and design, nearly everything within the domain model will be based on an object and will, therefore, be modular and encapsulated. This allows for various components, or even the entire system, to be altered and improved on a regular, continuous basis.\nEmphasizes Domain Over Interface: Since DDD is the practice of building around the concepts of domain and what the domain experts within the project advise, DDD will often produce applications that are accurately suited for and representative of the domain at hand, as opposed to those applications which emphasize the UI/UX first and foremost. While balance is required, focusing on the domain means that a DDD approach can produce a product that resonates well with the audience associated with that domain."
  },
  {
    "objectID": "java-exercises/Concepts/what-is-ddd.html#disadvantages-of-domain-driven-design",
    "href": "java-exercises/Concepts/what-is-ddd.html#disadvantages-of-domain-driven-design",
    "title": "What is DDD?",
    "section": "Disadvantages of Domain-Driven Design",
    "text": "Disadvantages of Domain-Driven Design\n\nRequires Robust Domain Expertise: Even with the most technically proficient minds working on development, it’s all for naught if there isn’t at least one domain expert on the team that knows the exact ins and outs of the subject area. In some cases, domain-driven design may require integrating one or more outside team members who can act as domain experts throughout the development life cycle.\nEncourages Iterative Practices: While many consider this an advantage, it cannot be denied that DDD practices strongly rely on constant iteration and continuous integration to build a malleable project that can adjust itself when necessary. Some organizations may have trouble with these practices, particularly if their past experience is primarily tied to less-flexible development models, such as the waterfall model.\nIll-Suited for Highly Technical Projects: DDD is not very well-suited for applications with marginal domain complexity but has a great deal of technical complexity. Since DDD so heavily emphasizes the need for (and importance of) domain experts to generate the proper ubiquitous language and then domain model on which the project is based, a project that is incredibly technically complex may be challenging for domain experts to grasp, causing problems down the line, perhaps when all members of the team did not fully understand technical requirements or limitations."
  },
  {
    "objectID": "java-exercises/Concepts/what-is-coupling-and-cohesion.html",
    "href": "java-exercises/Concepts/what-is-coupling-and-cohesion.html",
    "title": "What is coupling and cohesion?",
    "section": "",
    "text": "Coupling and cohesion are important concepts when proposing software solutions during design time.\n\n\n\n\n\n\n\n\nCustom definition\n\n\n\nCoupling is the degree of dependency between classes.\n\n\nWhen designing the model of a project, the level of dependency or coupling between classes shall be the lesser possible. High coupling between classes is bad because if a class must be modified, then all the other classes that are tightly coupled to it will be affected."
  },
  {
    "objectID": "java-exercises/Concepts/what-is-coupling-and-cohesion.html#coupling",
    "href": "java-exercises/Concepts/what-is-coupling-and-cohesion.html#coupling",
    "title": "What is coupling and cohesion?",
    "section": "",
    "text": "Custom definition\n\n\n\nCoupling is the degree of dependency between classes.\n\n\nWhen designing the model of a project, the level of dependency or coupling between classes shall be the lesser possible. High coupling between classes is bad because if a class must be modified, then all the other classes that are tightly coupled to it will be affected."
  },
  {
    "objectID": "java-exercises/frontend/00-Introduction.html",
    "href": "java-exercises/frontend/00-Introduction.html",
    "title": "00 - Frontend - Introduction",
    "section": "",
    "text": "TODO"
  },
  {
    "objectID": "java-exercises/frontend/00-Introduction.html#javaserver-faces-jsf",
    "href": "java-exercises/frontend/00-Introduction.html#javaserver-faces-jsf",
    "title": "00 - Frontend - Introduction",
    "section": "JavaServer Faces (JSF)",
    "text": "JavaServer Faces (JSF)\nLibraries:\n\nPrimeFaces"
  },
  {
    "objectID": "java-exercises/frontend/00-Introduction.html#react",
    "href": "java-exercises/frontend/00-Introduction.html#react",
    "title": "00 - Frontend - Introduction",
    "section": "React",
    "text": "React"
  },
  {
    "objectID": "java-exercises/frontend/00-Introduction.html#vue",
    "href": "java-exercises/frontend/00-Introduction.html#vue",
    "title": "00 - Frontend - Introduction",
    "section": "Vue",
    "text": "Vue"
  },
  {
    "objectID": "java-exercises/frontend/00-Introduction.html#vaadin",
    "href": "java-exercises/frontend/00-Introduction.html#vaadin",
    "title": "00 - Frontend - Introduction",
    "section": "Vaadin",
    "text": "Vaadin\nVaadin is an open-source web application development platform for Java. It includes a set of Web Components, a Java web framework, and a set of tools that enable developers to implement modern web graphical user interfaces (GUI) using the Java programming language only (instead of HTML and JavaScript), TypeScript only, or a combination of both.\n\nVaadin Flow (Java API)\nVaadin Flow (formerly Vaadin Framework) is a Java web framework for building web applications and websites. Vaadin Flow’s programming model allows developers to user Java as the programming language for implementing User Interfaces (UIs) without having to directly use HTML or JavaScript."
  },
  {
    "objectID": "java-exercises/frontend/engines/00-thymeleaf.html",
    "href": "java-exercises/frontend/engines/00-thymeleaf.html",
    "title": "01 - Java template engine - Thymeleaf",
    "section": "",
    "text": "Introduction\n\n\nGetting started:\nFollow this article to know the basics of configuring and using Thymeleaf inside a Spring Boot project"
  },
  {
    "objectID": "java-exercises/databases/00-mongodb.html",
    "href": "java-exercises/databases/00-mongodb.html",
    "title": "00 - MongoDB",
    "section": "",
    "text": "MongoDB works with BSON (Binary JSON).\nInstead of working with tables, we work with Collections. Each Collection has Documents. Each document is stored with JSON structure."
  },
  {
    "objectID": "java-exercises/databases/00-mongodb.html#on-cloud",
    "href": "java-exercises/databases/00-mongodb.html#on-cloud",
    "title": "00 - MongoDB",
    "section": "On cloud:",
    "text": "On cloud:\n\nGo to MongoDB webpage –&gt; Done\nCreate an account –&gt; Done\nCreate a cluster –&gt; Done\nSecurity Quickstart: 2 options\n\nCreate a user with read-write access to the databases –&gt; DONE\nAuthenticate via a certificate –&gt; TODO\n\nNetwork access: defined via IPs\n\nAdd each of the public IPs from where you’ll connect to the MongoDB cloud cluster\n\nDatabase deployments:\n\nDatabase access: provides the URL syntax to connect to the database\n\n\nReplace the username and password with the user credentials created in the previous steps\n\nExtra: LDAP authentication –&gt; TODO\nCreate a Collection\n\nEither load a sample dataset or add your own data. When loading the provided sample test, you can browse 9 databases with their own collections:"
  },
  {
    "objectID": "java-exercises/databases/00-mongodb.html#on-premises",
    "href": "java-exercises/databases/00-mongodb.html#on-premises",
    "title": "00 - MongoDB",
    "section": "On premises:",
    "text": "On premises:\n\nDocker deployment –&gt; TODO"
  },
  {
    "objectID": "java-exercises/databases/00-mongodb.html#spring-boot-project",
    "href": "java-exercises/databases/00-mongodb.html#spring-boot-project",
    "title": "00 - MongoDB",
    "section": "Spring Boot project:",
    "text": "Spring Boot project:\n\nSpring connection:\n\n\napplication.yml\n\nspring:\n    data:\n        mongodb:\n            url: mongodb+srv://&lt;mongodb-url&gt;\n\nJPA annotations to access Collections and Documents\n\n@Document: defined with a collection value that represents the MongoDB collection\n\nMongoRepository"
  },
  {
    "objectID": "java-exercises/databases/00-mongodb.html#unit-1-connecting-to-mongodb-in-java",
    "href": "java-exercises/databases/00-mongodb.html#unit-1-connecting-to-mongodb-in-java",
    "title": "00 - MongoDB",
    "section": "Unit 1: Connecting to MongoDB in Java",
    "text": "Unit 1: Connecting to MongoDB in Java\n\nLesson 1: Using MongoDB Java Client Libraries\nWhat do we need to connect to MongoDB?\n\nSet of libraries –&gt; Drivers\nMongoDB official drivers for synchronous or asynchronous application code\nBenefits of MongoDB official drivers:\n\nSimplify connecting to and interacting with their database from your application\nEstablish secure connections to a MongoDB cluster\nExecute database operations on behalf of client applications\nSpecify connection options (security, writing ability, isolation, etc..)\nAdhere to language best practices\nUse the full functionality of MongoDB deployment\nMake upgrading easier\n\nOfficial docs:\n\nUsage examples\nFundamental concepts\nReference documentation\nAPI documentation\n\n\nRecap:\n\nMongoDB Java applications must use the official drivers to ensure optimal performance, compatibility and an easy update path\nDrivers simplify connecting to and interacting with a MongoDB deployment\nOfficial driver documentation is available on the MongoDB website\n\nQuiz:\n\nQ: What is the principal responsibility of a MongoDB driver?\nA: To establish secure connections to a MongoDB cluster and execute database operations on behalf of client applications.\nQ: The official MongoDB drivers adhere to each programming language’s best practices.\nA: True\n\n\n\nLesson 2: Connecting to an Atlas Cluster in Java Applications"
  },
  {
    "objectID": "java-exercises/databases/00-mongodb.html#unit-2-mongodb-crud-operations-in-java",
    "href": "java-exercises/databases/00-mongodb.html#unit-2-mongodb-crud-operations-in-java",
    "title": "00 - MongoDB",
    "section": "Unit 2: MongoDB CRUD Operations in Java",
    "text": "Unit 2: MongoDB CRUD Operations in Java"
  },
  {
    "objectID": "java-exercises/databases/00-mongodb.html#unit-3-mongodb-aggregation-with-java",
    "href": "java-exercises/databases/00-mongodb.html#unit-3-mongodb-aggregation-with-java",
    "title": "00 - MongoDB",
    "section": "Unit 3: MongoDB Aggregation with Java",
    "text": "Unit 3: MongoDB Aggregation with Java"
  },
  {
    "objectID": "java-exercises/Labs/java-sb00-6.html#prepare-a-mongodb-project",
    "href": "java-exercises/Labs/java-sb00-6.html#prepare-a-mongodb-project",
    "title": "LAB#SB00-6: Rest & MongoDB",
    "section": "Prepare a MongoDB project",
    "text": "Prepare a MongoDB project\n\nOn cloud\nIn your cluster,"
  },
  {
    "objectID": "java-exercises/Labs/java-sb00-6.html#initialize-a-spring-boot-project",
    "href": "java-exercises/Labs/java-sb00-6.html#initialize-a-spring-boot-project",
    "title": "LAB#SB00-6: Rest & MongoDB",
    "section": "Initialize a Spring Boot project",
    "text": "Initialize a Spring Boot project\n\nDependencies\n\nSpring Boot DevTools\nLombok\nSpring Web\nRest Repositories\nSpring Session\nSpring Data JPA\nSpring Data MongoDB\n\n\n\npom.xml\nAdd the official MongoDB driver dependency.\n\n\napplication.yml\nDefine the MongoDB connection parameters."
  },
  {
    "objectID": "java-exercises/Labs/java-sb00-6.html#domain-classes",
    "href": "java-exercises/Labs/java-sb00-6.html#domain-classes",
    "title": "LAB#SB00-6: Rest & MongoDB",
    "section": "Domain classes",
    "text": "Domain classes\n\nBookImage\n\n\nBookImage.java\n\n\n\n\n\n\n\n\n\nWhat happens with the document’s id?\n\n\n\nHere are some insights on how the id value is handled in the Mapping Layer –&gt; LINK\nFor more control over the actual id mapping, try to use the @MongoId annotation."
  },
  {
    "objectID": "java-exercises/Labs/java-sb00-6.html#repository",
    "href": "java-exercises/Labs/java-sb00-6.html#repository",
    "title": "LAB#SB00-6: Rest & MongoDB",
    "section": "Repository",
    "text": "Repository\n\nBookImageRepository\n\n\nBookImageRepository.java"
  },
  {
    "objectID": "java-exercises/Labs/java-sb00-6.html#service",
    "href": "java-exercises/Labs/java-sb00-6.html#service",
    "title": "LAB#SB00-6: Rest & MongoDB",
    "section": "Service",
    "text": "Service\n\nBookImageService\n\n\nBookImageService.java"
  },
  {
    "objectID": "java-exercises/Labs/java-sb00-6.html#controller",
    "href": "java-exercises/Labs/java-sb00-6.html#controller",
    "title": "LAB#SB00-6: Rest & MongoDB",
    "section": "Controller",
    "text": "Controller\n\nBookImageRestController\n\n\nBookImageRestController.java"
  },
  {
    "objectID": "java-exercises/Labs/java-se03-2.html#interfaces",
    "href": "java-exercises/Labs/java-se03-2.html#interfaces",
    "title": "LAB#SE03-2: Library/Book, Expand Model",
    "section": "Interfaces",
    "text": "Interfaces\nThe three interfaces GeneralOperations, UserOperations and StaffOperations provide a clear separation of concerns and responsibilities within the library management system.\n\nGeneralOperations interface provides methods that are commonly used by both users and staff, such as searching for books and creating an account.\n\n\nUserOperations interface includes methods that are specific to users, such as updating personal information, borrowing and returning books, and checking their borrowed books.\n\n\nStaffOperations interface includes methods that are specific to staff members, such as adding, removing, and updating book details, as well as registering and updating user details and generationg reports.\n\nBy separating these different functionailities into interfaces, it becomes easier to implement and maintain the system.\nInterfaces allow the developers to implement their features knowing beforehand the expected available methods of future classes."
  },
  {
    "objectID": "java-exercises/Labs/java-se03-2.html#abstract-class",
    "href": "java-exercises/Labs/java-se03-2.html#abstract-class",
    "title": "LAB#SE03-2: Library/Book, Expand Model",
    "section": "Abstract class",
    "text": "Abstract class\nFinally, the LibraryMember abstract class is a parent class for users and staff members, which includes common fields such as id, address, and phoneNumber.\nBy defining these fields in an abstract class, it allows for different types of users and staff members to inherit them and avoid duplication of code."
  },
  {
    "objectID": "java-exercises/Labs/java-se03-2.html#uml",
    "href": "java-exercises/Labs/java-se03-2.html#uml",
    "title": "LAB#SE03-2: Library/Book, Expand Model",
    "section": "UML",
    "text": "UML\n\nPrevious drafts\nThe two UML diagrams describe the core features of a libraryProject, specifically the use cases for borrowing and issuing books, as well as the roles and responsibilities of users and librarians/staff members.\n\nThe first diagram, Core features: borrow and issue, depicts the interaction between the user and the system, as well as the system and the librarian:\n\n\n\n\n\n\n\nTODO\n\n\n\nCreate link to the previous UML\n\n\n\nThe second diagram, Core features: user and librarian (staff), expands on the roles and responsibilities of users and librarians/staff members.\n\n\n\n\n\n\n\nTODO\n\n\n\nCreate link to the previous UML\n\n\n\n\nCurrent UML\n\n\n\n\n\n\nTODO\n\n\n\nCreate new UML\n\n\n\nPublications\n\n\n\n\nclassDiagram\n    direction BT\n    %% Interface\n    class PublicationOperations {\n        &lt;&lt;interface&gt;&gt;\n        + publish() void\n    }\n    %% Abstract class\n    class Publication {\n        &lt;&lt;abstract&gt;&gt;\n        - String id\n        - String title\n        - Author author\n        - LocalDate publicationDate\n        - String format\n        + getId() String\n        + getTitle() String\n        + getAuthor() Author\n        + getPublicationDate() LocalDate\n        + getFormat() String\n    }\n\n    Publication ..&gt; PublicationOperations\n\n    %% Publication Entity classes\n    class Book {\n        - String ISBN\n        - int pages\n        - int genre\n        + getISBN() String\n        + getPages() int\n        + getGenre() String\n\n    }\n    class CD {\n        - int duration\n        - int numberOfTracks\n        + getDuration() int\n        + getNumberOfTracks() int\n    }\n    class DVD {\n        - int duration\n        + getDuration() int\n    }\n\n    Book ..&gt; Publication\n    CD ..&gt; Publication\n    DVD ..&gt; Publication\n\n\n\n\n\n\n\n\nLibrary Members\n\n\n\n\nclassDiagram\n    direction BT\n\n    %% Relationships\n    LibraryMember ..&gt; GeneralOperations\n    LibraryMember ..&gt; Person\n\n    Staff ..o StaffMember\n    StaffMember ..&gt; StaffOperations\n    StaffMember ..&gt; LibraryMember\n\n    User ..o LibraryMember\n    User ..&gt; BorrowOperations\n    \n    Librarian ..o StaffMember\n    Librarian ..&gt; BorrowOperations\n\n\n\n    %% Interfaces\n    class GeneralOperations {\n        &lt;&lt;interface&gt;&gt;\n        + createAccount(): void\n        + searchPublications(query: String): void\n    }\n\n    class BorrowOperations {\n        &lt;&lt;interface&gt;&gt;\n        + createBorrow(item: Publication) void\n        + returnBorrow(item: Publication) void\n        + updateBorrow(item: Publication) void\n\n    }\n\n    class StaffOperations {\n        &lt;&lt;interface&gt;&gt;\n        + addPublication(item: Publication) void\n        + removePublication(item: Publication) void\n        + updatePublication(item: Publication) void\n        + registerMember(member: LibraryMember) void\n        + removeMember(member: LibraryMember) void\n        + updateMember(member: LibraryMember) void\n        + generateReports() void\n    }\n\n    %% Abstract class\n    class Person {\n        &lt;&lt;abstract&gt;&gt;\n        - firstName: String\n        - lastName: String\n        - nationality: String\n        - birthdate: LocalDate\n    }\n\n    class LibraryMember {\n        &lt;&lt;abstract&gt;&gt;\n        - id: String\n        - address: String\n        - phoneNumber: String\n    }\n\n    class StaffMember {\n        &lt;&lt;abstract&gt;&gt;\n        - double: salary\n    }\n\n    %% Entities\n    class User {\n        - String: mail\n        - String: password\n    }\n\n    class Staff {\n    }\n\n    class Librarian {\n    }"
  },
  {
    "objectID": "java-exercises/Labs/java-se03-2.html#user-interface",
    "href": "java-exercises/Labs/java-se03-2.html#user-interface",
    "title": "LAB#SE03-2: Library/Book, Expand Model",
    "section": "User interface",
    "text": "User interface\nLet’s define the different domains that are accessible through a user interface.\n\nIn a web interface, domains could be:\n\n/user with a private access, only available to Library Users\n/librarian with a private access, only available to Librarians\n/web with a public access, available to any person that access the webpage"
  },
  {
    "objectID": "java-exercises/Labs/java-se03-2.html#controllers",
    "href": "java-exercises/Labs/java-se03-2.html#controllers",
    "title": "LAB#SE03-2: Library/Book, Expand Model",
    "section": "Controllers",
    "text": "Controllers\nIn the backend, we need controllers for user and librarian, with access to the Library db.\nRequests can be of multiple forms, such as API Rest, HTML, websockets…\nRequired methods to resolve the requests coming from the frontend must be implemented into each actor (user and library). These methods invoke other classes like @Service and @Repository, that have the utils required to resolve the requests.\n\n\n\n\n\n\n@Service and @Repository here are like the Manager classes\n\n\n\nWe treat them as the source of all utilities that execute the response logic"
  },
  {
    "objectID": "java-exercises/Labs/java-se03-2.html#databases",
    "href": "java-exercises/Labs/java-se03-2.html#databases",
    "title": "LAB#SE03-2: Library/Book, Expand Model",
    "section": "Databases",
    "text": "Databases\nFor this project, we’ll be using H2. H2 is a Java SQL database with the following main features:\n\nVery fast, open source, JDBC API\nEmbedded and serer modes; in-memory databases\nBrowser based Console application\nSmall footprint: around 2.5 MB jar file size\n\n\nCreating entities\nWe need to define entities that will persist inside DB: - Any Publication subclass object - Any LibraryMember subclass object: - This includes User, Librarian and Staff - Borrows objects\nEach entity must define its primary key with the @Id annotation. When inheritance is present, then the parent class should define it as well as the @Inheritance type.\n\nIf the parent class isn’t going to be instantiated, only define the @MappedSuperClass annotation to allow subclasses to inherit its JPA attibutes\nEach first class that defines a new DB table where to store this’ or their subclasses’ instances must define the following annotations:\n\n@Entity, even though this class doesn’t create instances (mandatori for its subclasses)\n@Table name where to store all instances\n@Inheritance strategy, such as SINGLE_TABLE to store all subclass entities into this single table\n\nIf SINGLE_TABLE is selected, then the parent class must define @DiscriminatorColumn with a name and its value type. Child classes must then define the proper @DiscriminatorValue that will be inserted in the previous column when inserted into the table\nIf TABLE_PER_CLASS is selected, then each subclass will create its own @Table inside the DB. If no @Table annotation is defined in subclasses, then the subclass name is used as its table name\n\n\n\nWhen there’s a composition relationship between classes, then we have to define its multiplicity using the @ManyToMany, @OneToOne, @ManyToOne or @OneToMany annotations.\n\n\n\n\n\n\nERROR when defining @ManyToOne relation\n\n\n\nj.LocalContainerEntityManagerFactoryBean : Failed to initialize JPA EntityManagerFactory: Association 'com.springbootlab0.approach_1.domain.Publication.author' targets an unknown entity named 'com.springbootlab0.approach_1.domain.Author'\nThis error is due to bad annotations between inherited classes, not a @ManyToOne issue. Publication class couldn’t find the Author entity because Person superclass and its subclass Author were conflicting with the @Inheritance and @MappedSuperClass annotations.\nOnce fixed, an AUTHOR_TABLE is created in the H2 DB and Publication instance can correctly map the Author attribute to the AUTHOR_ID field in the previous table.\n\n\nThe final JPA entity and inheritance diagram is as follows:\n\n\n\n\n\nclassDiagram\n    direction BT\n    %% Abstract class\n    class Publication {\n        \\@Entity(name = \"Publication\")\n        \\@Table(name = \"PUBLICATION_TABLE\")\n        \\@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n        \\@DiscriminatorColumn(name = \"PUBLICATION_TYPE\", discriminatorType = DiscriminatorType.STRING)\n    }\n\n    %% Publication Entity classes\n    class Book {\n        \\@Entity(name = \"Book\")\n        \\@DiscriminatorValue(value = \"BOOK\")\n    }\n    class CD {\n        \\@Entity(name = \"CD\")\n        \\@DiscriminatorValue(value = \"CD\")\n    }\n    class DVD {\n        \\@Entity(name = \"DVD\")\n        \\@DiscriminatorValue(value = \"DVD\")\n    }\n\n    Book ..&gt; Publication\n    CD ..&gt; Publication\n    DVD ..&gt; Publication\n\n\n\nPublication JPA annotations\n\n\n\n\n\n\n\n\nclassDiagram\n    direction BT\n\n    %% Relationships\n    LibraryMember ..&gt; Person\n    Author ..&gt; Person\n\n    Staff ..o StaffMember\n    StaffMember ..&gt; LibraryMember\n\n    User ..o LibraryMember\n    \n    Librarian ..o StaffMember\n\n    class Person {\n        @MappedSuperClass\n    }\n\n    class Author {\n        \\@Entity(name = \"Author\")\n        \\@Table(name = \"AUTHOR_TABLE\")\n    }\n\n    class LibraryMember {\n        \\@Entity(name = \"LibraryMember\")\n        \\@Table(name = \"LIBRARYMEMBER_TABLE\")\n        \\@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n        \\@DiscriminatorColumn(name = \"MEMBER_TYPE\", discriminatorType = discriminatorType.STRING)\n    }\n\n    class StaffMember {\n        @MappedSuperClass\n    }\n\n    class User {\n        \\@Entity(name = \"User\")\n        \\@DiscriminatorValue(value = \"USER\")\n    }\n\n    class Staff {\n        \\@Entity(name = \"Staff\")\n        \\@DiscriminatorValue(value = \"STAFF\")\n    }\n\n    class Librarian {\n        \\@Entity(name = \"Librarian\")\n        \\@DiscriminatorValue(value = \"LIBRARIAN\")\n    }\n\n\nLibraryMember JPA annotations\n\n\n\nThe resulting tables in the DB are as follow:\n\n\n\n\n\n\nLibrary DB tables\n\n\n\n\n\nAUTHOR_TABLE: Inherits Person fields and adds its own Id and penName\nLIBRARY_MEMBER: Here it inherits:\n\nPerson fields\nAdds its own Id, address and phoneNumber fields\nAdds the StaffMember’s salary field\nAnd also adds the User’s mail and password fields\n\nPUBLICATION_TABLE: Here the inheritance is as follows:\n\nAdds its own Publication fields, including the Id field\nAdds the Book’s fields\nAdds the CD’s fields\nAdds the DVD fields, even though they overlap with the CD ones\nAnd also adds the Author ID of that publication, coming from the Author entity. The @ManyToOne annotation can be verified in the Indexes of PUBLICATION_TABLE, where AUTHOR_ID appears as Not unique"
  },
  {
    "objectID": "java-exercises/Labs/java-se03-2.html#defining-the-use-cases",
    "href": "java-exercises/Labs/java-se03-2.html#defining-the-use-cases",
    "title": "LAB#SE03-2: Library/Book, Expand Model",
    "section": "Defining the use cases",
    "text": "Defining the use cases\n\nCreating a publication\nIt seems that we’ll have to work with particular publications instead of creating a one-size-fits-all solution, but the inheritance is well solved in the Thymeleaf form and the object is correctly composed when the request reaches the PublicationController.\n\n\n\n\n\n\nAttention when creating new entities!\n\n\n\nThe Spring boot controller sends a new empty Publication object to the thymeleaf engine with its already generated ID, but if the ID isn’t assigned again in the creation form, then the Controller recreates the object with a new ID!\nMake sure to add a th:field=*{id} entry in the form to make sure that later @Setter methods will re-assign that value to the object\n\n\n\n\nCreating a Libary Member\nInheritance is causing issues when trying to save the attributes of child classes:\n\nOnly Person attributes and the id created in the abstract LibraryMember are considered when Thymeleaf sends the form values to the @Controller, still don’t know why\nThis doesn’t happen with the current Publication implementation, where all fields, including @Many-to-one and enum types when creating a new Book from the Publication Form View\n\n\n\n\n\n\n\nError found!! Missing @Setter annotations in all @Entity classes!!\n\n\n\nI forgot to add the @Setter annotation in all @Entity classes except the parent one! 😥\nOnce added the @Setter annotation, tables are correctly populated!\n\n\n\n\n\n\n\n\nExtra: Avoid JPA inheritance of non-entity classes!!\n\n\n\nAs discussed in this StackOverflow thread,the only way to do this is by removing the inheritance from these classes and mark the previously parent class as @Embeddable, while defining new parent class attribute to each of the previously called child classes and annotating them as @Embedded.\nThis doesn’t make it easier to maintain as shown in this Baeldung example, and in the OOP realm we would have to access a new Person object for each derivated class.\nAlso, this Baeldung article explains that when using @MappedSuperclass, ancestors cannot contain associations with other entities. This might be the reason why it doesn’t work well with Librarian and User?"
  },
  {
    "objectID": "java-exercises/Labs/java-se03-2.html#updating-publications-or-library-members",
    "href": "java-exercises/Labs/java-se03-2.html#updating-publications-or-library-members",
    "title": "LAB#SE03-2: Library/Book, Expand Model",
    "section": "Updating publications or library members",
    "text": "Updating publications or library members\n\n\n\n\n\n\nID is correctly transfered to the Optional&lt;Subclass&gt; when dealing with Publication updates\n\n\n\nThis requires further investigation because, while using a very similar form, it looks like the Parent class ID is safely transfered when recreating the object on the @Controller side. This doesn’t happen when the recreated class doesn’t inherit the ID from another class.\nAlso, this ID problem also appears on subclasses creation forms. Does it have something to do with the GET/POST or RequestMapping annotations?"
  },
  {
    "objectID": "java-exercises/Labs/java-se03-2.html#creating-borrows",
    "href": "java-exercises/Labs/java-se03-2.html#creating-borrows",
    "title": "LAB#SE03-2: Library/Book, Expand Model",
    "section": "Creating Borrows",
    "text": "Creating Borrows\nThe Borrow class contains the information related to a Publication that has been borrowed by a LibraryMember. The instantiated object contains the following fields:\n\nid: the unique ID of that Borrow\nborrowUser: the user of this Borrow\nborrowedPublication: the publication borrowed\nstartBorrowDate: the date where the Borrow was created. It is automatically initialized on Borrow creation\ndueBorrowDate: the date where the Borrow should already be returned. It is automatically initialized on Borrow creation, 15 days from the startBorrowDate\nreturnedBorrowDate: the real date where the Borrow has been returned. Initialized as null on Borrow creation.\nborrowStatus: The current Borrow status, either IN_PROGRESS, LATE or CLOSED. The borrowStatus should be automatically updated depending on the dueBorrowDate and the current date (IN_PROGRESS or LATE), as well as the returnedBorrowDate (CLOSED)\n\n\n\n\n\n\nclassDiagram\n    direction LR\n    Borrow --&gt; Publication\n    Borrow --&gt; LibraryMember\n    Borrow --&gt; BorrowStatus\n    %% Abstract class\n    class Publication {\n        \\@Entity(name = \"Publication\")\n        \\@Table(name = \"PUBLICATION_TABLE\")\n    }\n    class LibraryMember {\n        \\@Entity(name = \"LibraryMember\")\n        \\@Table(name = \"LIBRARYMEMBER_TABLE\")\n    }\n    class Borrow {\n        @Id\n        - id: String\n        @Column\n        - borrowUser: LibraryMember\n        @Column\n        - borrowedPublication: Publication\n        @DateTimeFormat\n        - startBorrowDate: LocalDate\n        @DateTimeFormat\n        - dueBorrowDate: LocalDate\n        @DateTimeFormat\n        - returnedBorrowDate: LocalDate\n        @Enumerate\n        - borrowStatus: BorrowStatus\n    }\n    class BorrowStatus {GameStats\n        IN_PROGRESS\n        LATE\n        CLOSED\n    }\n\n\n\n\n\n\n\nCreate Borrow Entity and Repository\nBorrow entities are named Borrow and stored in a @Table named BORROW_TABLE. The repository interface is a CrudRepository that will be extended with additional methods whenever required.\n\n\nCreate Borrow Service and Controller\nThe BorrowController has the following methods:\n\nindex: renders the Borrows main page\ncreateBorrow (GET): a GetMapping that prepares Model object with the required attributes for Thymeleaf to render the Borrow creation form.\n\nIf the request doesn’t send a LibraryMember ID, then the response includes a list of LibraryMember objects so Thymeleaf renders a selection list\nIf the request sends a LibraryMember ID, then the response sends again that ID and Thymeleaf doesn’t render a list of LibraryMember objects\n\ncreateBorrow (POST): a PostMapping that takes an ID, either as a PathVariable or a RequestParam, and a list of Publication IDs, and creates a Borrow for each one\n\nIf the request doesn’t send a PathVariable, then the received request is from a Borrow form with selectable LibraryMember, and thus the method will redirect to the same selectable LibraryMember form\nElse, the method will redirect to the Borrow form with the same PathVariable ID\n\nupdateBorrow (GET): a GetMapping that retrieves the Borrow object that matches the retrieved id by PathVariable and inserts it into the Model object for Thymeleaf to render.\nupdateBorrow (POST): a PostMapping that takes an ID as a PathVariable and an Optional&lt;Borrow&gt; object and proceeds to update it in the DataBase, if it exists.\ndeleteBorrow (GET): a GetMapping that takes an ID as a PathVariable and deletes its corresponding Borrow from the database if it exists.\n\nThe BorrowService has the following methods:\n\ngetBorrowById: return a Borrow if the provided ID exists in the database\ncreateBorrow: insert a Borrow in the database if its ID doesn’t exist in the database\ncreateMultipleBorrows: given a User ID and a list of Publication IDs, create and save into the database a Borrow for each Publication assigned to that User and return the list of created Borrows\ndeleteBorrowById: delete a Borrow from the database if the provided ID exists. When deleting the Borrow, its Publication status is set to AVAILABLE\nupdateBorrow: update a Borrow in the database with the updated information from the client request.\n\nOnly borrowStatus should be available for update."
  },
  {
    "objectID": "java-exercises/Labs/java-se03-2.html#updating-a-borrow",
    "href": "java-exercises/Labs/java-se03-2.html#updating-a-borrow",
    "title": "LAB#SE03-2: Library/Book, Expand Model",
    "section": "Updating a Borrow",
    "text": "Updating a Borrow\nWhen updating a Borrow, a similar form as when creating one shall appear, but only Borrow status should be updatable at the moment (there’s no reason to change neither the borrow user nor the borrowed publication, as well as the borrow dates, which should be automatically updated based on the Borrow status). - If Borrow.borrowStatus is set to IN_PROGRESS and previous value was different, then the dueBorrowDate is set to 15 days from the current time - If Borrow.borrowStatus is set to CLOSED and previous value was different, then the returnedBorrowDate is set to the current time"
  },
  {
    "objectID": "java-exercises/Labs/java-se03-2.html#using-http-session-to-store-user-information",
    "href": "java-exercises/Labs/java-se03-2.html#using-http-session-to-store-user-information",
    "title": "LAB#SE03-2: Library/Book, Expand Model",
    "section": "Using HTTP session to store User information",
    "text": "Using HTTP session to store User information\nWe’ll use an HTTP session to show all borrows of a specific user. The user information will be stored in the HTTP session instead of transferred on each request-response cycle as @PathVariable or @RequestParam\nOn login stage, we’ll store the following session attributes:\n\nisLoggedIn: whether the user has already logged in or not\nmemberId: the ID of the Library Member logged in\nmemberClass: the class of the Library Member (User, LibraryMember, Staff…)\nmemberName: the full name of the Library Member for rendering purposes"
  },
  {
    "objectID": "java-exercises/Labs/java-se03-2.html#log-in-log-out-process",
    "href": "java-exercises/Labs/java-se03-2.html#log-in-log-out-process",
    "title": "LAB#SE03-2: Library/Book, Expand Model",
    "section": "Log in / Log out process",
    "text": "Log in / Log out process\n\n\n\n\n\n\nTODO: implement and document"
  },
  {
    "objectID": "java-exercises/Labs/java-se03-2.html#dependencies",
    "href": "java-exercises/Labs/java-se03-2.html#dependencies",
    "title": "LAB#SE03-2: Library/Book, Expand Model",
    "section": "Dependencies",
    "text": "Dependencies"
  },
  {
    "objectID": "java-exercises/Labs/java-se03-2.html#changes-in-current-classes",
    "href": "java-exercises/Labs/java-se03-2.html#changes-in-current-classes",
    "title": "LAB#SE03-2: Library/Book, Expand Model",
    "section": "Changes in current classes",
    "text": "Changes in current classes"
  },
  {
    "objectID": "java-exercises/Labs/java-se03-2.html#repositories-for-mongodb",
    "href": "java-exercises/Labs/java-se03-2.html#repositories-for-mongodb",
    "title": "LAB#SE03-2: Library/Book, Expand Model",
    "section": "Repositories for MongoDB",
    "text": "Repositories for MongoDB"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html",
    "href": "java-exercises/Labs/java-se00-3.html",
    "title": "LAB#SE00-3: Maven Library model",
    "section": "",
    "text": "ContextGoalTasksOptional\n\n\nBasic understanding of Java programming language is required, as well as some familiarity with Maven or Gradle for managing dependencies and building the project. ssl encryption and is intended to run behind a Knowledge of algotighms and data structures to implement the required classes.\n\n\nDescribe the required models that might define the solution to a Library implementation. Create multiple classes in Java using the most convenient entity relationship between them to im.\nTest these classes using JUnit.\n\n\n\nCreate a new Maven or Gradle project and setting up the project structure\nModify the project’s pom.xml or build.gradle file to import necessary dependencies, including JUnit for testing\nImplement the required classes in Java\nImplement two basic patter-designs: singleton and think about factory\nWrite JUnit tests to verify that classes work as expected\n\n\n\n\nAllow the user to input data via the console, rather than using hard-coded test data in JUnit tests"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#user-interface",
    "href": "java-exercises/Labs/java-se00-3.html#user-interface",
    "title": "LAB#SE00-3: Maven Library model",
    "section": "User interface",
    "text": "User interface\nA terminal menu will show the available options of the Library application\n# The interface asks if the user wants to create a borrow\nborrow? YES\n# If answered YES, then proceed with the borrow\n# The interface asks for the user identifier\nUser? user@mail.com\n# If the user doesn't exist, then ask again for the user\nUnknown user, try again. User? john.smith@goodmail.com\n# If the user exists, then show info regarding that user\nUser exists\n- Name: John Smith\n- User id: XXX\n# The interface asks for the title of the book to borrow\nBook to borrow? \"Fake book\"\n# If the book doesn't exist, then ask again for another book\nUnknown book, try again. Book? \"Title of the book\"\n# If the book exists, then show the available issues\nBook exists, there are X available issues\n- Book ID: 001\n- Book ID: 002\n{...}\n- Book ID: 054\nProceed to borrow? YES\n# Use the first available issue of that book and show the Borrow information\nNew borrow created:\n- Borrow ID: 001\n- Book: \"Title of the book\" (Book ID: 001)\n- Initial Borrow: 2023-01-31\n- Due Date: 2023-02-14\n# Ask again if the user wants to borrow something new\nborrow? NO\n# If answered NO, then exit the program\nBYE!\n\n\n\n\nflowchart\n    direction TB\n    id1{Borrow?} -- \"YES\" --&gt; id2[User?]\n    id2 -- \"user@fakemail.com\" --&gt;id3[Unknown user, try again]\n    id3 -- \"Ask the user again\" --&gt; id2\n    id2 -- \"john.smith@goodmail.com\" --&gt; id4[User exists:\\n- Username: John Smith\\n- User ID: XXX]\n    id4 -- \"Ask for a Book name\" --&gt; id5[Book?]\n    id5 -- \"Fake book\" --&gt; id6[Unknown book, try again] --&gt; id5\n    id5 -- \"Title of the book\" --&gt; id7[Title of the book exists, there are X available issues:\\n- Book ID: 001\\n- Book ID: 002\\n...\\n- Book ID: XXX]\n    id7 --&gt; id8{Proceed to\\nborrow?}\n    id8 -- \"YES\" --&gt; id9[New borrow created:\\n- Borrow ID: 001\\n- Book: Title of the book Book ID: 001]"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#core-domain",
    "href": "java-exercises/Labs/java-se00-3.html#core-domain",
    "title": "LAB#SE00-3: Maven Library model",
    "section": "Core domain",
    "text": "Core domain"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#logic-domain",
    "href": "java-exercises/Labs/java-se00-3.html#logic-domain",
    "title": "LAB#SE00-3: Maven Library model",
    "section": "Logic domain",
    "text": "Logic domain"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#user-interface-domain",
    "href": "java-exercises/Labs/java-se00-3.html#user-interface-domain",
    "title": "LAB#SE00-3: Maven Library model",
    "section": "User interface domain",
    "text": "User interface domain"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#core-classes",
    "href": "java-exercises/Labs/java-se00-3.html#core-classes",
    "title": "LAB#SE00-3: Maven Library model",
    "section": "Core classes",
    "text": "Core classes\n\nBook\n\n\nPerson\n\n\nUser\n\n\nAuthor\n\n\nBorrow\n\n\n\n\nclassDiagram\n    class Book {\n    }\n\n    class User {\n    &lt;&lt;Person&gt;&gt;\n        -String userId\n    }\n\n    class Borrow {\n        -Date initialBorrow\n        -Date dueDate\n        -Date returnDate\n        -Book borrowedBook\n    }\n\n    Borrow \"1..*\" o-- \"1\" Book : lends\n    Book \"1\" -- \"1..*\" Borrow : can be lent\n    User \"1\" o-- \"*\" Borrow : can make"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#management-classes",
    "href": "java-exercises/Labs/java-se00-3.html#management-classes",
    "title": "LAB#SE00-3: Maven Library model",
    "section": "Management classes",
    "text": "Management classes\n\nBookManager\n\n\nBookManager.java\n\npackage org.labse03part1.logic;\n\nimport com.github.javafaker.Faker;\nimport org.labse03part1.domain.Author;\nimport org.labse03part1.domain.Book;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.Scanner;\nimport java.util.stream.Stream;\n\nimport static org.labse03part1.utils.InterfaceUtils.askInt;\nimport static org.labse03part1.utils.InterfaceUtils.askString;\n\npublic class BookManager {\n    private static final HashMap&lt;String, Book&gt; books = new HashMap&lt;&gt;();\n\n    private enum bookOptionsEnum {\n        ADD_BOOK(\"Add book\") {\n            @Override\n            void action(Scanner reader) {\n                addBook(reader);\n            }\n\n            void addBook(Scanner reader) {\n                // Create a book\n                String bookTitle = askString(reader, \"[\" + bookOptionsEnum.ADD_BOOK.getDescription() + \"] Enter name of the new book ('Quit' to exit): \");\n                if (bookTitle.equals(\"Quit\")) {\n                    System.out.println(\"[\" + bookOptionsEnum.ADD_BOOK.getDescription() + \"] Add book cancelled\");\n                    return;\n                }\n\n                int bookYear = askInt(reader, \"[\" + bookOptionsEnum.ADD_BOOK.getDescription() + \"] Enter year of the new book: \");\n                int bookPages = askInt(reader, \"[\" + bookOptionsEnum.ADD_BOOK.getDescription() + \"] Enter number of pages of the book: \");\n                String bookISBN = askString(reader, \"[\" + bookOptionsEnum.ADD_BOOK.getDescription() + \"] Enter book ISBN: \");\n\n                // The user selects one of the available authors\n                Author bookAuthor = AuthorManager.getAuthor(reader);\n                // Add the book into the system\n                Book newBook = new Book(bookTitle, bookPages, bookYear, bookISBN, bookAuthor, true);\n                books.put(newBook.getBookID(), newBook);\n\n                System.out.println(\"[\" + bookOptionsEnum.ADD_BOOK.getDescription() + \"] Book \" + bookTitle + \" added! ID: \" + newBook.getBookID());\n            }\n        },\n        DELETE_BOOK(\"Delete book\") {\n            @Override\n            void action(Scanner reader) {\n                deleteBook(reader);\n            }\n\n            void deleteBook(Scanner reader) {\n                // List the available books\n                bookOptionsEnum.LIST_BOOKS.action(reader);\n                String bookID = askString(reader, \"[\" + bookOptionsEnum.DELETE_BOOK.getDescription() + \"] Enter ID of the book to delete ('Quit' to exit): \");\n                while (!books.containsKey(bookID)) {\n                    if (bookID.equals(\"Quit\")) {\n                        System.out.println(\"[\" + bookOptionsEnum.DELETE_BOOK.getDescription() + \"] Delete book cancelled\");\n                        return;\n                    }\n                    System.out.println(\"[\" + bookOptionsEnum.DELETE_BOOK.getDescription() + \"] Book \" + bookID + \"doesn't exist in the system!\");\n                    bookID = askString(reader, \"[\" + bookOptionsEnum.DELETE_BOOK.getDescription() + \"] Enter name of the book to delete ('Quit' to exit): \");\n                }\n                books.remove(bookID);\n                System.out.println(\"[\" + bookOptionsEnum.DELETE_BOOK.getDescription() + \"] Book \" + bookID + \" deleted!\");\n            }\n        },\n        CHECK_BOOK(\"Check book\") {\n            @Override\n            void action(Scanner reader) {\n                checkBook(reader);\n            }\n\n            void checkBook(Scanner reader) {\n                // List the available books\n                bookOptionsEnum.LIST_BOOKS.action(reader);\n                String bookID = askString(reader, \"[\" + bookOptionsEnum.CHECK_BOOK.getDescription() + \"] Enter book ID ('Quit' to exit): \");\n                while (!books.containsKey(bookID)) {\n                    if (bookID.equals(\"Quit\")) {\n                        System.out.println(\"[\" + bookOptionsEnum.CHECK_BOOK.getDescription() + \"] Check book cancelled\");\n                        return;\n                    }\n                    System.out.println(\"[\" + bookOptionsEnum.CHECK_BOOK.getDescription() + \"] Book \" + bookID + \"doesn't exist in the system!\");\n                    bookID = askString(reader, \"[\" + bookOptionsEnum.CHECK_BOOK.getDescription() + \"] Enter book ID ('Quit' to exit): \");\n                }\n                // Print the book information\n                System.out.println(books.get(bookID));\n            }\n        },\n        LIST_BOOKS(\"List books\") {\n            @Override\n            void action(Scanner reader) {\n                listBooks();\n            }\n\n            void listBooks() {\n                System.out.println(\"[\" + bookOptionsEnum.LIST_BOOKS.getDescription() + \"] Available books:\");\n                books.forEach((bookID, book) -&gt; System.out.println(bookID + \": \" + book.getTitle()));\n            }\n        },\n        UPDATE_BOOK(\"Update book\") {\n            @Override\n            void action(Scanner reader) {\n                updateBook(reader);\n            }\n\n            void updateBook(Scanner reader) {\n                // List the available books\n                bookOptionsEnum.LIST_BOOKS.action(reader);\n                String bookID = askString(reader, \"[\" + bookOptionsEnum.UPDATE_BOOK.getDescription() + \"] Enter book ID to update ('Quit' to exit): \");\n                while (!books.containsKey(bookID)) {\n                    if (bookID.equals(\"Quit\")) {\n                        System.out.println(\"[\" + bookOptionsEnum.UPDATE_BOOK.getDescription() + \"] Update book cancelled\");\n                        return;\n                    }\n                    System.out.println(\"[\" + bookOptionsEnum.UPDATE_BOOK.getDescription() + \"] Book \" + bookID + \" doesn't exist in the system!\");\n                    bookID = askString(reader, \"[\" + bookOptionsEnum.UPDATE_BOOK.getDescription() + \"] Enter book ID to update ('Quit' to exit): \");\n                }\n                Book bookToUpdate = books.get(bookID);\n                System.out.println(bookToUpdate);\n\n                // Once book is found, ask for the parameter to change\n                String parameter = askString(reader, \"[\" + bookOptionsEnum.UPDATE_BOOK.getDescription() + \"] Enter the parameter to modify ('Quit' to exit): \");\n                Object value;\n                while (!parameter.equals(\"Quit\")) {\n                    switch (parameter) {\n                        case \"title\" -&gt; {\n                            value = askString(reader, \"[\" + bookOptionsEnum.UPDATE_BOOK.getDescription() + \"] Enter the new title of the book: \");\n                            bookToUpdate.setTitle(value.toString());\n                            System.out.println(\"[\" + bookOptionsEnum.UPDATE_BOOK.getDescription() + \"] Title set to \" + value);\n                        }\n                        case \"pages\" -&gt; {\n                            value = askInt(reader, \"[\" + bookOptionsEnum.UPDATE_BOOK.getDescription() + \"] Enter the new pages of the book: \");\n                            bookToUpdate.setPages((int) value);\n                            System.out.println(\"[\" + bookOptionsEnum.UPDATE_BOOK.getDescription() + \"] Pages set to \" + value);\n                        }\n                        case \"year\" -&gt; {\n                            value = askInt(reader, \"[\" + bookOptionsEnum.UPDATE_BOOK.getDescription() + \"] Enter the new year of the book: \");\n                            bookToUpdate.setYear((int) value);\n                            System.out.println(\"[\" + bookOptionsEnum.UPDATE_BOOK.getDescription() + \"] Year set to \" + value);\n                        }\n                        case \"author\" -&gt; {\n                            // Ask the user for a new author\n                            Author newAuthor = AuthorManager.getAuthor(reader);\n                            // Set the new author\n                            bookToUpdate.setAuthor(newAuthor);\n                            System.out.println(\"[\" + bookOptionsEnum.UPDATE_BOOK.getDescription() + \"] Author set to \" + bookToUpdate.getAuthor().getFirstName() + \" \" + bookToUpdate.getAuthor().getLastName());\n                        }\n                        case \"available\" -&gt; {\n                            String newAvailable = askString(reader, \"[\" + bookOptionsEnum.UPDATE_BOOK.getDescription() + \"] Enter new availability of the book (true or false)\");\n                            // Check that the input is a boolean\n                            while (!Boolean.getBoolean(newAvailable)) {\n                                newAvailable = askString(reader, \"[\" + bookOptionsEnum.UPDATE_BOOK.getDescription() + \"] Invalid value. Enter new availability of the book (true or false)\");\n                            }\n                            // Set the new boolean value\n                            bookToUpdate.setAvailable(Boolean.getBoolean(newAvailable));\n                        }\n                        default -&gt; System.out.println(\"[Manage books] \" + parameter + \" is a read-only parameter, choose another one\");\n                    }\n                    parameter = askString(reader, \"[\" + bookOptionsEnum.UPDATE_BOOK.getDescription() + \"] Insert the parameter to modify ('Quit' to exit): \");\n                }\n            }\n        };\n\n        abstract void action(Scanner reader);\n        private final String description;\n\n        bookOptionsEnum(String description) {\n            this.description = description;\n        }\n        private String getDescription() {\n            return this.description;\n        }\n\n        static void printOptions() {\n            // Print all the available Borrow options\n            System.out.println(\"[Manage books] Available options:\");\n            bookOptionsEnum.stream()\n                    .map(bookOptionsEnum::getDescription)\n                    .forEach(System.out::println);\n        }\n\n        static bookOptionsEnum getOption(String action) {\n            for (bookOptionsEnum option : bookOptionsEnum.values()) {\n                if (option.getDescription().equals(action)) {\n                    return option;\n                }\n            }\n            return null;\n        }\n\n        private static void executeOption(Scanner reader, String action) {\n            // compare the action with the available enum and see if it is a valid option\n            bookOptionsEnum option = getOption(action);\n            // execute the desired option\n            if (option != null) {\n                option.action(reader);\n            }\n            else {\n                System.out.println(\"[Manage books] Invalid option, try again\");\n            }\n        }\n        public static Stream&lt;bookOptionsEnum&gt; stream() {\n            return Stream.of(bookOptionsEnum.values());\n        }\n    }\n\n    public static void initializeRandomBooks() {\n        if (books.isEmpty()) {\n            Random randomNum = new Random();\n            createFakeBooks(randomNum.nextInt(1, 10));\n        }\n    }\n\n    public static void start(Scanner reader) {\n        // Print the available options\n        bookOptionsEnum.printOptions();\n        String description = askString(reader, \"[Manage books] - Select option: \");\n        while (!description.equals(\"Quit\")) {\n            bookOptionsEnum.executeOption(reader, description);\n            System.out.println();\n            bookOptionsEnum.printOptions();\n            description = askString(reader, \"[Manage books] - Select option: \");\n        }\n    }\n\n    // Private methods\n\n    private static void createFakeBooks(int number) {\n        Faker faker = new Faker();\n        // Initialize Random authors if the list is empty\n        AuthorManager.initializeRandomActors();\n        Book newBook;\n        // Create as many new Books as requested\n        for (int i = 0; i &lt; number; i++) {\n            com.github.javafaker.Book fakeBook = faker.book();\n            newBook = new Book();\n            newBook.setTitle(fakeBook.title());\n            newBook.setPages(faker.number().numberBetween(10, 2000));\n            newBook.setYear(faker.number().numberBetween(0, 2023));\n            newBook.setISBN(faker.code().isbn13());\n            // Get a fake author\n            // Mandatory initialization of AuthorManager prior to this\n            newBook.setAuthor(AuthorManager.getRandomAuthor());\n            // Set a random availability status\n            newBook.setAvailable(faker.bool().bool());\n            // Put the fake book to the storage\n            books.put(newBook.getBookID(), newBook);\n        }\n    }\n\n    // Public methods\n    public static String getAvailableBookID(Scanner reader) {\n        //bookOptionsEnum.LIST_BOOKS.action(reader);\n        // List only the available books\n        System.out.println(\"[Book Manager] Available books:\");\n        for (Map.Entry&lt;String, Book&gt; entry : books.entrySet()) {\n            Book book = entry.getValue();\n            if (book.isAvailable()) {\n                System.out.println(book.getBookID() + \" - \" + book.getTitle());\n            }\n        }\n        String bookID = askString(reader, \"[Manage books] Enter book ID: \");\n        while (!books.containsKey(bookID)) {\n            bookID = askString(reader, \"[Manage books] Invalid book ID. Enter book ID: \");\n        }\n        return bookID;\n    }\n\n    // TODO: Analyse if this method is correct compared to the enum approach\n    public static String getBookTitle(String bookID) {\n        return books.getOrDefault(bookID, null).getTitle();\n    }\n\n    public static void setBookAvailability(String bookID, boolean newAvailability) {\n        books.get(bookID).setAvailable(newAvailability);\n    }\n\n}\n\n\n\nAuthorManager\n\n\nBookManager.java\n\npackage org.labse03part1.logic;\n\nimport com.github.javafaker.Faker;\nimport org.labse03part1.domain.Author;\nimport org.labse03part1.utils.InterfaceUtils;\n\nimport java.util.*;\nimport java.util.stream.Stream;\n\nimport static org.labse03part1.utils.InterfaceUtils.*;\nimport static org.labse03part1.utils.InterfaceUtils.askString;\n\npublic class AuthorManager {\n    private static final Map&lt;String, Author&gt; authors = new HashMap&lt;&gt;();\n\n    private enum authorOptionsEnum {\n        ADD_AUTHOR(\"Add author\") {\n            @Override\n            void action(Scanner reader) {\n                addAuthor(reader);\n            }\n        },\n        DELETE_AUTHOR(\"Delete author\") {\n            @Override\n            void action(Scanner reader) {\n                deleteAuthor(reader);\n            }\n        },\n        CHECK_AUTHOR(\"Check author\") {\n            @Override\n            void action(Scanner reader) {\n                checkAuthor(reader);\n            }\n        },\n        LIST_AUTHORS(\"List authors\") {\n            @Override\n            void action(Scanner reader) {\n                listAuthors();\n            }\n        },\n        UPDATE_AUTHOR(\"Update author\") {\n            @Override\n            void action(Scanner reader) {\n                updateAuthor(reader);\n            }\n        };\n\n        abstract void action(Scanner reader);\n        private final String description;\n        authorOptionsEnum(String description) {\n            this.description = description;\n        }\n\n        private String getDescription() {\n            return this.description;\n        }\n\n        public static Stream&lt;authorOptionsEnum&gt; stream() {\n            return Stream.of(authorOptionsEnum.values());\n        }\n    }\n\n    // Entrypoint of the manager\n    public static void start(Scanner reader) {\n        printOptions();\n        String action = askString(reader, \"[Manage authors] Select option ('Quit' to exit): \");\n        while (!action.equals(\"Quit\")) {\n            executeOption(reader, action);\n            System.out.println();\n            printOptions();\n            action = InterfaceUtils.askString(reader, \"[Manage authors] Select option ('Quit' to exit): \");\n        }\n    }\n\n    // Required public methods for external managers\n    public static Author getAuthor(Scanner reader) {\n        listAuthors();\n        String authorFullName = askString(reader, \"Enter author's full name: \");\n        while(!authors.containsKey(authorFullName)) {\n            System.out.println(\"Invalid author name!\");\n            authorFullName = askString(reader, \"Enter author's full name: \");\n        }\n\n        return authors.get(authorFullName);\n    }\n\n    public static void initializeRandomActors() {\n        if (authors.isEmpty()) {\n            Random randomNum = new Random();\n            createFakeAuthors(randomNum.nextInt(0, 10));\n        }\n    }\n\n    public static Author getRandomAuthor() {\n        Random randomNum = new Random();\n        List&lt;String&gt; authorNames = authors.keySet().stream().toList();\n        String randomAuthor = authorNames.get(randomNum.nextInt(0, authorNames.size()));\n        return authors.get(randomAuthor);\n    }\n\n    public static void clear(Scanner reader) {\n        String response = askString(reader, \"Are you sure you want to clear all authors? This action can't be undone [YES/NO]\");\n        if (response.equals(\"YES\")) {\n            clear();\n            System.out.println(\"All authors removed\");\n        } else {\n            System.out.println(\"Aborting clear\");\n        }\n    }\n\n    // Private methods\n    private static authorOptionsEnum getOption(String action) {\n        for (authorOptionsEnum option : authorOptionsEnum.values()) {\n            if (option.getDescription().equals(action)) {\n                return option;\n            }\n        }\n        return null;\n    }\n\n    private static void executeOption(Scanner reader, String action) {\n        authorOptionsEnum option = getOption(action);\n        if (option != null) {\n            option.action(reader);\n        }\n        else {\n            System.out.println(\"[Manage authors] Invalid option! Try again.\");\n        }\n    }\n\n    private static void printOptions() {\n        // Print all the available Borrow options\n        System.out.println(\"[Manage authors] Available options:\");\n        authorOptionsEnum.stream()\n                .map(authorOptionsEnum::getDescription)\n                .forEach(System.out::println);\n    }\n\n    private static void createFakeAuthors(int number) {\n        Faker faker = new Faker();\n        Author newAuthor;\n        // Create as many new Authors as requested\n        for (int i = 0; i &lt; number; i++) {\n            newAuthor = new Author();\n            newAuthor.setFirstName(faker.name().firstName());\n            newAuthor.setLastName(faker.name().lastName());\n            newAuthor.setAge(faker.number().numberBetween(0, 100));\n            newAuthor.setGenre(faker.book().genre());\n            String authorFullName = newAuthor.getFirstName() + \" \" + newAuthor.getLastName();\n            // Store the new fake author\n            authors.put(authorFullName, newAuthor);\n        }\n    }\n\n    private static void addAuthor(Scanner reader) {\n        while (true) {\n            // Ask for the author's details\n            String authorFirstName = askString(reader, \"[\" + authorOptionsEnum.ADD_AUTHOR.getDescription() + \"] Enter author's first name ('Quit' to exit): \");\n            if (authorFirstName.equals(\"Quit\")) {\n                break;\n            }\n            String authorLastName = askString(reader, \"[\" + authorOptionsEnum.ADD_AUTHOR.getDescription() + \"] Enter author's last name: \");\n            String authorFullName = authorFirstName + \" \" + authorLastName;\n            // Check if the author already exists in the system\n            if (!authors.containsKey(authorFullName)) {\n                int authorAge = askInt(reader, \"[\" + authorOptionsEnum.ADD_AUTHOR.getDescription() + \"] Enter author's age: \");\n                String authorGenre = askString(reader, \"[\" + authorOptionsEnum.ADD_AUTHOR.getDescription() + \"] Enter author's main genre: \");\n                authors.put(authorFirstName + \" \" + authorLastName, new Author(authorFirstName, authorLastName, authorAge, authorGenre));\n                System.out.println(\"[\" + authorOptionsEnum.ADD_AUTHOR.getDescription() + \"] Author \" + authorFullName + \" added!\");\n                break;\n            }\n            System.out.println(\"[\" + authorOptionsEnum.ADD_AUTHOR.getDescription() + \"] Author\" + authorFullName + \" already exists! Enter a new one\");\n        }\n    }\n    private static void checkAuthor(Scanner reader) {\n        listAuthors();\n        String authorFullName = askString(reader, \"[\" + authorOptionsEnum.CHECK_AUTHOR.getDescription() + \"] Enter author's full name: \");\n        while(!authors.containsKey(authorFullName)) {\n            System.out.println(\"[\" + authorOptionsEnum.CHECK_AUTHOR.getDescription() + \"] Invalid author name!\");\n            authorFullName = askString(reader, \"[\" + authorOptionsEnum.CHECK_AUTHOR.getDescription() + \"] Enter author's full name: \");\n        }\n\n        System.out.println(authors.get(authorFullName));\n    }\n\n    private static void listAuthors() {\n        System.out.println(\"[\" + authorOptionsEnum.LIST_AUTHORS.getDescription() + \"] Available authors:\");\n        authors.keySet()\n                .forEach(System.out::println);\n    }\n\n    private static void updateAuthor(Scanner reader) {\n        // Ask for the author name\n        String authorFullName = getAuthorFullName(reader);\n        while (!authors.containsKey(authorFullName)) {\n            if (authorFullName.equals(\"Quit\")) {\n                System.out.println(\"[\" + authorOptionsEnum.UPDATE_AUTHOR.getDescription() + \"] Update author cancelled\");\n                break;\n            }\n            System.out.println(\"[\" + authorOptionsEnum.UPDATE_AUTHOR.getDescription() + \"] Author \" + authorFullName + \" doesn't exist in the system. Try again\");\n            authorFullName = getAuthorFullName(reader);\n\n        }\n\n        // Retrieve the Author object to update\n        Author authorToUpdate = authors.get(authorFullName);\n        System.out.println(authorToUpdate);\n\n        // Once book is found, ask for the parameter to change\n        String parameter = askString(reader, \"[\" + authorOptionsEnum.UPDATE_AUTHOR.getDescription() + \"] Enter the parameter to modify ('Quit' to exit): \");\n        Object value;\n\n        while(!parameter.equals(\"Quit\")) {\n            switch (parameter) {\n                case \"firstName\" -&gt; {\n                    value = askString(reader, \"[\" + authorOptionsEnum.UPDATE_AUTHOR.getDescription() + \"] Enter the author's new first name: \");\n                    authorToUpdate.setFirstName(value.toString());\n                    System.out.println(\"[\" + authorOptionsEnum.UPDATE_AUTHOR.getDescription() + \"] First name set to \" + value);\n                }\n                case \"lastName\" -&gt; {\n                    value = askString(reader, \"[\" + authorOptionsEnum.UPDATE_AUTHOR.getDescription() + \"] Enter the author's new last name: \");\n                    authorToUpdate.setLastName(value.toString());\n                    System.out.println(\"[\" + authorOptionsEnum.UPDATE_AUTHOR.getDescription() + \"] Last name set to \" + value);\n                }\n                case \"age\" -&gt; {\n                    value = askInt(reader, \"[\" + authorOptionsEnum.UPDATE_AUTHOR.getDescription() + \"] Enter the author's new age: \");\n                    authorToUpdate.setAge((int) value);\n                    System.out.println(\"[\" + authorOptionsEnum.UPDATE_AUTHOR.getDescription() + \"] Age set to \" + value);\n                }\n                case \"genre\" -&gt; {\n                    value = askString(reader, \"[\" + authorOptionsEnum.UPDATE_AUTHOR.getDescription() + \"] Enter the author's new main genre: \");\n                    authorToUpdate.setGenre(value.toString());\n                    System.out.println(\"[\" + authorOptionsEnum.UPDATE_AUTHOR.getDescription() + \"] Genre set to \" + value);\n                }\n                default -&gt; System.out.println(\"[Manage authors] \" + parameter + \" is a read-only parameter, choose another one\");\n            }\n            // Ask for another parameter to update\n            parameter = askString(reader, \"[Manage authors] Insert the parameter to modify ('Quit' to exit): \");\n        }\n    }\n\n    private static String getAuthorFullName(Scanner reader) {\n        String authorFirstName = askString(reader, \"Enter author's first name ('Quit' to exit): \");\n        if (authorFirstName.equals(\"Quit\")) {\n            return \"Quit\";\n        }\n        String authorLastName = askString(reader, \"Enter author's last name: \");\n        return authorFirstName + \" \" + authorLastName;\n    }\n\n    private static void deleteAuthor(Scanner reader) {\n        String authorFullName = getAuthorFullName(reader);\n        while(!authors.containsKey(authorFullName)) {\n            if (authorFullName.equals(\"Quit\")) {\n                System.out.println(\"[\" + authorOptionsEnum.DELETE_AUTHOR.getDescription() + \"] Delete author cancelled\");\n                break;\n            }\n            System.out.println(\"[\" + authorOptionsEnum.DELETE_AUTHOR.getDescription() + \"] Author \" + authorFullName + \" doesn't exist in the system!\");\n            authorFullName = getAuthorFullName(reader);\n        }\n        // Remove the author from the database\n        authors.remove(authorFullName);\n        System.out.println(\"[\" + authorOptionsEnum.DELETE_AUTHOR.getDescription() + \"] Author \" + authorFullName + \" deleted!\");\n    }\n\n    protected static void clear() {\n        authors.clear();\n    }\n}\n\n\n\nStudentManager\n\n\nBookManager.java\n\npackage org.labse03part1.logic;\n\nimport com.github.javafaker.Faker;\nimport org.labse03part1.domain.Book;\nimport org.labse03part1.domain.Student;\n\nimport java.util.*;\nimport java.util.stream.Stream;\n\nimport static org.labse03part1.utils.InterfaceUtils.askInt;\nimport static org.labse03part1.utils.InterfaceUtils.askString;\n\npublic class StudentManager {\n    private static final Map&lt;String, Student&gt; students = new HashMap&lt;&gt;();\n\n    public static void initializeRandomStudents() {\n        if (students.isEmpty()) {\n            Random randomNum = new Random();\n            createFakeStudents(randomNum.nextInt(1, 10));\n        }\n    }\n\n    private static void createFakeStudents(int number) {\n        Faker faker = new Faker();\n        Student newStudent;\n        // Create as many new Students as requested\n        for (int i = 0; i &lt; number; i++) {\n            newStudent = new Student();\n            newStudent.setFirstName(faker.name().firstName());\n            newStudent.setLastName(faker.name().lastName());\n            newStudent.setAge(faker.number().numberBetween(10, 99));\n            newStudent.setUniversity(faker.university().name());\n            newStudent.setBooks(new ArrayList&lt;&gt;());\n\n            // Put the fake student into the storage\n            students.put(newStudent.getStudentID(), newStudent);\n        }\n    }\n\n    private enum studentOptionsEnum {\n        ADD_STUDENT(\"Add student\") {\n            @Override\n            void action(Scanner reader) {\n                addStudent(reader);\n            }\n\n            private void addStudent(Scanner reader) {\n                while (true) {\n                    // Ask for the student's details\n                    String studentFirstName = askString(reader, \"[\" + studentOptionsEnum.ADD_STUDENT.getDescription() + \"] Enter student's first name ('Quit' to exit): \");\n                    if (studentFirstName.equals(\"Quit\")) {\n                        break;\n                    }\n                    // Ask for the rest of the student's information\n                    String studentLastName = askString(reader, \"[\" + studentOptionsEnum.ADD_STUDENT.getDescription() + \"] Enter student's last name ('Quit' to exit): \");\n                    String studentFullName = studentFirstName + \" \" + studentLastName;\n                    int studentAge = askInt(reader, \"[\" + studentOptionsEnum.ADD_STUDENT.getDescription() + \"] Enter student's age ('Quit' to exit): \");\n                    String studentUniversity = askString(reader, \"[\" + studentOptionsEnum.ADD_STUDENT.getDescription() + \"] Enter student's university ('Quit' to exit): \");\n                    List&lt;Book&gt; studentBooks = new ArrayList&lt;&gt;();\n                    // Create the new student object\n                    Student newStudent = new Student(studentFirstName, studentLastName, studentAge, studentUniversity, studentBooks);\n                    // Check if the student already exists inside the students hashmap\n                    if (!students.containsValue(newStudent)) {\n                        // Insert the student into the storage - Key: studentID\n                        students.put(newStudent.getStudentID(), newStudent);\n                        System.out.println(\"[\" + studentOptionsEnum.ADD_STUDENT.getDescription() + \"] Student \" + studentFullName + \" added!\");\n                        break;\n                    }\n                    System.out.println(\"[\" + studentOptionsEnum.ADD_STUDENT.getDescription() + \"] Student \" + studentFullName + \" already exists! Enter a new one\");\n                }\n            }\n        },\n        DELETE_STUDENT(\"Delete student\") {\n            @Override\n            void action(Scanner reader) {\n                deleteStudent(reader);\n            }\n\n            private void deleteStudent(Scanner reader) {\n                studentOptionsEnum.LIST_STUDENTS.action(reader);\n                // Ask for the student ID\n                String studentID = askString(reader, \"Enter the student ID: \");\n                while (!students.containsKey(studentID)) {\n                    if (studentID.equals(\"Quit\")) {\n                        System.out.println(\"Delete student cancelled\");\n                        return;\n                    }\n                    studentID = askString(reader, \"Incorrect ID. Enter the student ID: \");\n                }\n                Student deletedStudent = students.remove(studentID);\n                System.out.println(\"[\" + studentOptionsEnum.DELETE_STUDENT.getDescription() + \"] Student \" + deletedStudent.getFirstName() + \" \" + deletedStudent.getLastName() + \" deleted!\");\n            }\n\n        },\n        CHECK_STUDENT(\"Check student\") {\n            @Override\n            void action(Scanner reader) {\n                checkStudent(reader);\n            }\n\n            private void checkStudent(Scanner reader) {\n                studentOptionsEnum.LIST_STUDENTS.action(reader);\n                // Ask for the student ID\n                String studentID = askString(reader, \"Enter the student ID: \");\n\n                System.out.println(students.get(studentID));\n            }\n        },\n        LIST_STUDENTS(\"List students\") {\n            @Override\n            void action(Scanner reader) {\n                listStudents(reader);\n            }\n\n            private void listStudents(Scanner reader) {\n                System.out.println(\"[\" + studentOptionsEnum.CHECK_STUDENT.getDescription() + \"] Available students:\");\n                students.forEach((studentID, student) -&gt; System.out.println(studentID + \": \" + student.getFirstName() + \" \" + student.getLastName()));\n            }\n        },\n        UPDATE_STUDENT(\"Update student\") {\n            @Override\n            void action(Scanner reader) {\n                updateStudent(reader);\n            }\n\n            private void updateStudent(Scanner reader) {\n                // TODO: Ask for the student ID instead of the full name\n                // Ask for the student name\n                studentOptionsEnum.LIST_STUDENTS.action(reader);\n                //String studentFullName = getStudentFullName(reader);\n                String studentID = askString(reader, \"Enter the student ID: \");\n\n                // Retrieve the student to update\n                Student studentToUpdate = students.get(studentID);\n                System.out.println(studentToUpdate);\n\n                // Once the student is found, ask for the parameter to change\n                String parameter = askString(reader, \"[\" + studentOptionsEnum.UPDATE_STUDENT.getDescription() + \"] Enter the parameter to modify ('Quit' to exit): \");\n\n                // Define an Object variable to store the different types of answers\n                Object value;\n\n                while (!parameter.equals(\"Quit\")) {\n                    switch (parameter) {\n                        case \"firstName\" -&gt; {\n                            value = askString(reader, \"[\" + studentOptionsEnum.UPDATE_STUDENT.getDescription() + \"] Enter the student's new first name: \");\n                            studentToUpdate.setFirstName(value.toString());\n                            System.out.println(\"[\" + studentOptionsEnum.UPDATE_STUDENT.getDescription() + \"] First name set to \" + value);\n                        }\n                        case \"lastName\" -&gt; {\n                            value = askString(reader, \"[\" + studentOptionsEnum.UPDATE_STUDENT.getDescription() + \"] Enter the student's new last name: \");\n                            studentToUpdate.setLastName(value.toString());\n                            System.out.println(\"[\" + studentOptionsEnum.UPDATE_STUDENT.getDescription() + \"] Last name set to \" + value);\n                        }\n                        case \"age\" -&gt; {\n                            value = askInt(reader, \"[\" + studentOptionsEnum.UPDATE_STUDENT.getDescription() + \"] Enter the student's new age: \");\n                            studentToUpdate.setAge((int) value);\n                            System.out.println(\"[\" + studentOptionsEnum.UPDATE_STUDENT.getDescription() + \"] Age set to \" + value);\n                        }\n                        case \"university\" -&gt; {\n                            value = askString(reader, \"[\" + studentOptionsEnum.UPDATE_STUDENT.getDescription() + \"] Enter the student's new university: \");\n                            studentToUpdate.setUniversity(value.toString());\n                            System.out.println(\"[\" + studentOptionsEnum.UPDATE_STUDENT.getDescription() + \"] University set to \" + value);\n                        }\n                        case \"books\" -&gt; {\n                            // TODO: Call a book manager for the student's list of books. Maybe a public static method in BookManager that accepts an ArrayList of Books?\n                            System.out.println(\"Books Management coming soon!\");\n                            //value = askString(reader, \"[\" + studentOptionsEnum.UPDATE_STUDENT.getDescription() + \"] Enter the student's new car: \");\n                            // Some BookManager logic\n                            //System.out.println(\"[\" + studentOptionsEnum.UPDATE_STUDENT.getDescription() + \"] Car set to \" + value);\n                        }\n                        default -&gt; System.out.println(\"[Manage students] \" + parameter + \" is a read-only parameter, choose another one\");\n                    }\n                }\n            }\n        };\n        \n        abstract void action(Scanner reader);\n\n        private final String description;\n\n        studentOptionsEnum(String description) {\n            this.description = description;\n        }\n\n        private String getDescription() {\n            return this.description;\n        }\n\n        private static void printOptions() {\n            // Print all the available Student options\n            System.out.println(\"[Manage students] Available options:\");\n            studentOptionsEnum.stream()\n                    .map(studentOptionsEnum::getDescription)\n                    .forEach(System.out::println);\n        }\n\n        private static studentOptionsEnum getOption(String action) {\n            for (studentOptionsEnum option : studentOptionsEnum.values()) {\n                if (option.getDescription().equals(action)) {\n                    return option;\n                }\n            }\n            return null;\n        }\n\n        private static void executeOption(Scanner reader, String description) {\n            studentOptionsEnum option = getOption(description);\n            if (option != null) {\n                option.action(reader);\n            }\n            else {\n                System.out.println(\"[Manage students] Invalid option! Try again.\");\n            }\n        }\n\n        private static Stream&lt;studentOptionsEnum&gt; stream() {\n            return Stream.of(studentOptionsEnum.values());\n        }\n    }\n\n    // Entrypoint of Student Manager\n    public static void start(Scanner reader) {\n        // Print available options\n        studentOptionsEnum.printOptions();\n        String description = askString(reader, \"[Manage students] Select option ('Quit' to exit): \");\n        while (!description.equals(\"Quit\")) {\n            studentOptionsEnum.executeOption(reader, description);\n            System.out.println();\n            studentOptionsEnum.printOptions();\n            description = askString(reader, \"[Manage students] Select option ('Quit' to exit): \");\n        }\n    }\n\n    // StudentManager utilities\n    public static String getStudentID(Scanner reader) {\n        studentOptionsEnum.LIST_STUDENTS.action(reader);\n        String studentID = askString(reader, \"- Enter student ID: \");\n        while (!students.containsKey(studentID)) {;\n            studentID = askString(reader, \"- Invalid student ID! Enter student ID: \");\n        }\n        return studentID;\n    }\n\n\n}\n\n\n\nBorrowManager\n\n\nBookManager.java\n\npackage org.labse03part1.logic;\n\nimport lombok.Data;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.labse03part1.domain.Borrow;\nimport org.labse03part1.utils.InterfaceUtils;\n\nimport java.util.*;\nimport java.util.stream.Stream;\n\nimport static org.labse03part1.utils.InterfaceUtils.askString;\n\n@Data\n@Getter\n@Setter\npublic class BorrowManager {\n\n    private static Map&lt;String, Borrow&gt; borrows = new HashMap&lt;&gt;();\n\n    private enum borrowOptionsEnum {\n        CREATE_BORROW(\"Create borrow\") {\n            @Override\n            void action(Scanner reader) {\n                createBorrow(reader);\n            }\n\n            void createBorrow(Scanner reader) {\n                System.out.println(\"[\" + borrowOptionsEnum.CREATE_BORROW.getDescription() + \"] Creating new borrow...\");\n                // Ask for the Student name through the StudentManager?\n                String studentID = StudentManager.getStudentID(reader);\n                // Ask for the Book name through the BookManager\n                // - Only show the available books\n                String bookID = BookManager.getAvailableBookID(reader);\n                // Create a borrow\n                Borrow newBorrow = new Borrow(studentID, bookID);\n                // Store the borrow\n                borrows.put(newBorrow.getBorrowID(), newBorrow);\n                System.out.println(\"[\" + borrowOptionsEnum.CREATE_BORROW.getDescription() + \"] New borrow created:\");\n                System.out.println(\"- Borrow ID: \" + newBorrow.getBorrowID());\n                System.out.println(\"- Borrow details: \" + newBorrow);\n                // Set the book availability to false through the BookManager\n                BookManager.setBookAvailability(bookID, false);\n\n            }\n        },\n        DELETE_BORROW(\"Delete borrow\") {\n            @Override\n            void action(Scanner reader) {\n                deleteBorrow(reader);\n            }\n\n            void deleteBorrow(Scanner reader) {\n                borrowOptionsEnum.LIST_BORROWS.action(reader);\n                // Option 1.- Ask for the borrow ID\n                String borrowID = InterfaceUtils.askString(reader, \"[\" + borrowOptionsEnum.DELETE_BORROW.getDescription() + \"] Enter borrow ID ('Quit' to exit): \");\n                while (!borrows.containsKey(borrowID)) {\n                    if (borrowID.equals(\"Quit\")) {\n                        System.out.println(\"[\" + borrowOptionsEnum.DELETE_BORROW.getDescription() + \"] Delete borrow cancelled.\");\n                        return;\n                    }\n                    borrowID = InterfaceUtils.askString(reader, \"[\" + borrowOptionsEnum.DELETE_BORROW.getDescription() + \"] Unknown ID. Enter borrow ID ('Quit' to exit): \");\n                }\n\n                Borrow deletedBorrow = borrows.remove(borrowID);\n                // TODO: Set the book availability to true\n                BookManager.setBookAvailability(deletedBorrow.getBookID(), false);\n                System.out.println(\"[\" + borrowOptionsEnum.DELETE_BORROW.getDescription() + \"] Borrow \" + deletedBorrow.getBorrowID() + \" deleted!\");\n            }\n        },\n        CHECK_BORROW(\"Check borrow\") {\n            @Override\n            void action(Scanner reader) {\n                checkBorrow(reader);\n            }\n\n            void checkBorrow(Scanner reader) {\n                borrowOptionsEnum.LIST_BORROWS.action(reader);\n                // Option 1.- Ask for the borrow ID\n                String borrowID = InterfaceUtils.askString(reader, \"[\" + borrowOptionsEnum.CHECK_BORROW.getDescription() + \"] Enter borrow ID ('Quit' to exit): \");\n                while (!borrows.containsKey(borrowID)) {\n                    if (borrowID.equals(\"Quit\")) {\n                        System.out.println(\"[\" + borrowOptionsEnum.CHECK_BORROW.getDescription() + \"] Check borrow cancelled.\");\n                        return;\n                    }\n                    borrowID = InterfaceUtils.askString(reader, \"[\" + borrowOptionsEnum.CHECK_BORROW.getDescription() + \"] Unknown ID. Enter borrow ID ('Quit' to exit): \");\n                }\n                // Print the borrow information\n                System.out.println(borrows.get(borrowID));\n\n            }\n        },\n        LIST_BORROWS(\"List borrows\") {\n            @Override\n            void action(Scanner reader) {\n                listBorrows();\n            }\n\n            void listBorrows() {\n                System.out.println(\"[\" + borrowOptionsEnum.LIST_BORROWS.getDescription() + \"] Available 'In progress' borrows:\");\n                // Print all the borrows in a defined format\n                borrows.entrySet().stream()\n                        .filter(entry -&gt; entry.getValue().getStatusDescription().equals(\"In progress\"))\n                        .map(x -&gt; x.getKey() + \": \" + x.getValue())\n                        .forEach(x -&gt; System.out.println(x));\n            }\n        },\n        UPDATE_BORROW(\"Update borrow\") {\n            @Override\n            void action(Scanner reader) {\n                updateBorrow(reader);\n            }\n\n            void updateBorrow(Scanner reader) {\n\n                // Ask for the borrow id\n                borrowOptionsEnum.LIST_BORROWS.action(reader);\n                // Option 1. Ask for the borrow ID\n                /*\n                String borrowID = InterfaceUtils.askString(reader, \"[\" + borrowOptionsEnum.CHECK_BORROW.getDescription() + \"] Enter borrow ID ('Quit' to exit): \");\n                while (!borrows.containsKey(borrowID)) {\n                    if (borrowID.equals(\"Quit\")) {\n                        System.out.println(\"[\" + borrowOptionsEnum.CHECK_BORROW.getDescription() + \"] Check borrow cancelled.\");\n                        return;\n                    }\n                    borrowID = InterfaceUtils.askString(reader, \"[\" + borrowOptionsEnum.CHECK_BORROW.getDescription() + \"] Unknown ID. Enter borrow ID ('Quit' to exit): \");\n                }\n                Borrow borrowToUpdate = borrows.get(borrowID);\n                */\n                // Option 2. Invoke a borrow finding method\n                Borrow borrowToUpdate = findBorrow(reader);\n                if (borrowToUpdate == null) {\n                    System.out.println(\"Error finding the borrow. Exiting...\");\n                }\n\n                System.out.println(borrowToUpdate);\n                // Ask what field to change\n                // - Allowed fields to update: status, due date, return date, etc...\n                System.out.println(\"[\" + borrowOptionsEnum.UPDATE_BORROW.getDescription() + \"] Coming soon!\");\n                String parameter = askString(reader, \"[\" + borrowOptionsEnum.UPDATE_BORROW.getDescription() + \"] Enter the parameter to modify ('Quit' to exit): \");\n                Object value;\n                while (!parameter.equals(\"Quit\")) {\n                    switch(parameter) {\n                        case \"status\" -&gt; {\n                            value = askString(reader, \"[\" + borrowOptionsEnum.UPDATE_BORROW.getDescription() + \"] Change the status to 'In Progress', 'Late' or 'Closed': \");\n                            borrowToUpdate.setStatus(String.valueOf(value));\n                            // TODO: If status is set to \"Closed\", then book availability must be set to true\n                            if (borrowToUpdate.getStatusDescription().equals(\"Closed\")) {\n                                BookManager.setBookAvailability(borrowToUpdate.getBookID(), true);\n                            }\n                        }\n                        case \"dueBorrowDate\" -&gt; {\n                            // The due borrow date is updated to a later date\n                            value = askString(reader, \"[\" + borrowOptionsEnum.UPDATE_BORROW.getDescription() + \"] Enter the new due date in a YYYY/mm/dd format: \");\n                            borrowToUpdate.setDueBorrowDate(String.valueOf(value));\n                            //\n                        }\n                        default -&gt; System.out.println(\"[\" + borrowOptionsEnum.UPDATE_BORROW.getDescription() + \"] \" + parameter + \"is a read-only parameter, choose another one\");\n                    }\n                    parameter = askString(reader, \"[\" + borrowOptionsEnum.UPDATE_BORROW.getDescription() + \"] Insert the parameter to modify ('Quit' to exit): \");\n                }\n            }\n        },\n        RETURN_BOOK(\"Return book\") {\n            @Override\n            void action(Scanner reader) {\n                returnBook(reader);\n            }\n\n            private void returnBook(Scanner reader) {\n                // Find the borrow of the book\n                Borrow borrowToUpdate = findBorrow(reader);\n                if (borrowToUpdate == null) {\n                    System.out.println(\"Error finding the borrow. Exiting...\");\n                    return;\n                }\n                // Set the borrow status to \"Close\"\n                borrowToUpdate.setStatus(\"Closed\");\n                // Set the book availability to True\n                BookManager.setBookAvailability(borrowToUpdate.getBookID(), true);\n                System.out.println(\"[\" + borrowOptionsEnum.RETURN_BOOK.getDescription() + \"] Book \" + BookManager.getBookTitle(borrowToUpdate.getBookID()));\n            }\n        };\n\n        abstract void action(Scanner reader);\n        private final String description;\n        borrowOptionsEnum(String action) {\n            this.description = action;\n        }\n\n        private String getDescription() {\n            return this.description;\n        }\n\n        private static void printOptions() {\n            // Print all the available Borrow options\n            System.out.println(\"[Manage borrows] Available options:\");\n            borrowOptionsEnum.stream()\n                    .map(borrowOptionsEnum::getDescription)\n                    .forEach(System.out::println);\n        }\n\n        // Use private methods to manipulate borrows as they have sensitive data\n        private static borrowOptionsEnum getOption(String action) {\n            for (borrowOptionsEnum option : borrowOptionsEnum.values()) {\n                if (option.getDescription().equals(action)) {\n                    return option;\n                }\n            }\n            return null;\n        }\n\n        private static void executeOption(Scanner reader, String action) {\n            // compare the action with the available enum and see if it is a valid option\n            borrowOptionsEnum option = getOption(action);\n            // execute the desired option\n            if (option != null) {\n                option.action(reader);\n            }\n            else {\n                System.out.println(\"[Manage borrows] Unknown option, try again\");\n            }\n        }\n\n        public static Stream&lt;borrowOptionsEnum&gt; stream() {\n            return Stream.of(borrowOptionsEnum.values());\n        }\n    }\n\n    public static void start(Scanner reader) {\n        // Print the available options\n        borrowOptionsEnum.printOptions();\n        String action = InterfaceUtils.askString(reader, \"[Manage borrows] Select option ('Quit' to exit): \");\n        while (!action.equals(\"Quit\")) {\n            borrowOptionsEnum.executeOption(reader, action);\n            System.out.println();\n            borrowOptionsEnum.printOptions();\n            action = InterfaceUtils.askString(reader, \"[Manage borrows] Select option ('Quit' to exit): \");\n        }\n    }\n\n    public static Borrow findBorrow(Scanner reader) {\n        String knownObject = askString(reader, \"[Borrow Manager] Enter known object name ('Quit' to exit): \");\n        while (!knownObject.equals(\"book\") && !knownObject.equals(\"user\") && !knownObject.equals(\"borrow\")) {\n            if (knownObject.equals(\"Quit\")) {\n                System.out.println(\"Find Borrow cancelled\");\n                return null;\n            }\n            knownObject = askString(reader, \"[Borrow Manager] Unknown object. Enter known object name ('Quit' to exit): \");\n        }\n\n        String objectID = askString(reader, \"[Book Manager] Enter \" + knownObject + \" ID: \");\n        switch(knownObject) {\n            case \"book\" -&gt; {\n                return findBorrowByBookID(objectID);\n            }\n            case \"user\" -&gt; {\n                return findBorrowByUserID(reader, objectID);\n            }\n            case \"borrow\" -&gt;  {\n                // Just return the borrow if it exists\n                return borrows.getOrDefault(objectID, null);\n            }\n            default -&gt; {\n                return null;\n            }\n        }\n    }\n\n    public static Borrow findBorrowByBookID(String bookID) {\n        for (Map.Entry&lt;String, Borrow&gt; entry : borrows.entrySet()) {\n            Borrow borrow = entry.getValue();\n            if (borrow.getBookID().equals(bookID)) {\n                return borrow;\n            }\n        }\n        return null;\n    }\n\n    public static Borrow findBorrowByUserID(Scanner reader, String userID) {\n        // 1. Find all borrows of that user\n        List&lt;Borrow&gt; userBorrows = new ArrayList&lt;&gt;();\n        for (Map.Entry&lt;String, Borrow&gt; entry : borrows.entrySet()) {\n            Borrow borrow = entry.getValue();\n            if (borrow.getStudentID().equals(userID)) {\n                userBorrows.add(borrow);\n            }\n        }\n\n        // 2.- Text-only: show all available borrows\n        for (Borrow borrow : userBorrows) {\n            if (borrow.getStatusDescription().equals(\"In progress\") || borrow.getStatusDescription().equals(\"Late\")) {\n                System.out.println(\"Borrow ID: \" + borrow.getBorrowID() + \", book: \" + BookManager.getBookTitle(borrow.getBookID()) + \", status: \" + borrow.getStatusDescription());\n            }\n        }\n\n        // 3. Let the user decide what borrow to get\n        String selectedBorrow = askString(reader, \"[Borrow Manager] Enter the user's borrow ID: \");\n        while (!borrows.containsKey(selectedBorrow)) {\n            if (selectedBorrow.equals(\"Quit\")) {\n                System.out.println(\"[Borrow Manager] Find borrow cancelled.\");\n                return null;\n            }\n            selectedBorrow = askString(reader, \"[Borrow Manager] Unknown ID. Enter the user's borrow ID: \");\n        }\n\n        // 4. Return the borrow\n        return borrows.get(selectedBorrow);\n    }\n}"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#storage-classes",
    "href": "java-exercises/Labs/java-se00-3.html#storage-classes",
    "title": "LAB#SE00-3: Maven Library model",
    "section": "Storage classes",
    "text": "Storage classes\n\nBookStorage\n\n\nUserStorage\n\n\nBorrowStorage"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#object-generation-classes",
    "href": "java-exercises/Labs/java-se00-3.html#object-generation-classes",
    "title": "LAB#SE00-3: Maven Library model",
    "section": "Object generation classes",
    "text": "Object generation classes"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#objects-creation",
    "href": "java-exercises/Labs/java-se00-3.html#objects-creation",
    "title": "LAB#SE00-3: Maven Library model",
    "section": "Objects creation",
    "text": "Objects creation"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#crud-operations",
    "href": "java-exercises/Labs/java-se00-3.html#crud-operations",
    "title": "LAB#SE00-3: Maven Library model",
    "section": "CRUD operations",
    "text": "CRUD operations"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#integration-tests",
    "href": "java-exercises/Labs/java-se00-3.html#integration-tests",
    "title": "LAB#SE00-3: Maven Library model",
    "section": "Integration tests",
    "text": "Integration tests\n\nBorrow a book\nDefine the required steps to borrow a book:\n\nCreate a User\nCreate a Book\nCreate a Borrow for that User and Book\n\n\n\nCreate an Input of Borrow by console\nDefine the required steps to replicate the Borrow test using an input from console."
  },
  {
    "objectID": "java-exercises/Labs/java-se01-1.html",
    "href": "java-exercises/Labs/java-se01-1.html",
    "title": "LAB#SE01-1: Maven Person and Account",
    "section": "",
    "text": "ContextGoalTasksOptional\n\n\nBasic understanding of Java programming language is required, as well as some familiarity with Maven or Gradle for managing dependencies and building the project.\nKnowledge of algotighms and data structures to implement the required classes.\n\n\nCreate three classes in Java (Person, Account and Manager) that implement different algorightms or data structures.\nTest these classes using JUnit.\n\n\n\nCreate a new Maven or Gradle project and setting up the project structure\nModify the project’s pom.xml or build.gradle file to import necessary dependencies, including JUnit for testing\nImplement the three required classes in Java\nImplement two basic patter-designs: singleton and think about factory\nWrite JUnit tests to verify that classes work as expected\n\n\n\n\nAllow the user to input data via the console, rather than using hard-coded test data in JUnit tests\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\nclassDiagram\n    Person \"1\" --o \"1\" Account : has\n    Person \"*\" -- \"1\" AccountManager : manages\n\n    class Person{\n        -String name\n        -String address\n        -int age\n        -Account account\n\n        +getBalance()\n        +setBalance()\n        +getPin()\n        +setPin()\n    }\n    \n    class Account{\n        -String accountManager\n        -String pin\n        -double balance\n\n        +equals(Account compared) boolean\n    }\n\n    class AccountManager{\n        +withdrawal(Person person, double amount) boolean\n        +transfer(Person sender, Person receiver, double amount) boolean\n        +changePin(Person person, String oldPin, String newPin) boolean\n    }\n    &lt;&lt;Static&gt;&gt; AccountManager\n    %%note for AccountManager \"Can withdraw money from a person's account\\nCan tranfer money between two persons' account\\nCan change the Pin of a person's account\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPerson class\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter @NoArgsConstructor\npublic class Person {\n    private String name;\n    private String address;\n    private int age;\n    private Account account;\n\n    public Person(String name, String address, int age, Account account) {\n        this.name = name;\n        this.address = address;\n        this.age = age;\n        this.account = account;\n    }\n\n    public double getBalance() {\n        return this.account.getBalance();\n    }\n\n    public void setBalance(double amount) {\n        this.account.setBalance(amount);\n    }\n\n    public String getPin() {\n        return this.account.getPin();\n    }\n\n    public void setPin(String newPin) {\n        this.account.setPin(newPin);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nAccount class\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter @NoArgsConstructor\npublic class Account {\n    private String accountNumber;\n    private String pin;\n    private double balance;\n\n    public Account(String accountNumber, String pin, double balance) {\n        this.accountNumber = accountNumber;\n        this.pin = pin;\n        this.balance = balance;\n    }\n\n    public boolean equals(Object compared) {\n        if (this == compared) {\n            return true;\n        }\n        if (!(compared instanceof Account)) {\n            return false;\n        }\n\n        Account comparedAccount = (Account) compared;\n\n        if (this.accountNumber.equals(comparedAccount.accountNumber) &&\n                this.pin.equals(comparedAccount.pin) &&\n                this.balance == comparedAccount.balance) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter @NoArgsConstructor\n/**\n * Public class with static methods to manage accounts between persons\n */\npublic class AccountManager {\n    public static boolean withdrawal(Person person, double amount) {\n        if (amount &gt; 0 && amount &lt;= person.getBalance()) {\n            person.setBalance(person.getBalance() - amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean transfer(Person sender, Person receiver, double amount) {\n        if (amount &gt; 0 && amount &lt;= sender.getBalance()) {\n            sender.setBalance(sender.getBalance() - amount);\n            receiver.setBalance(receiver.getBalance() + amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean changePin(Person person, String oldPin, String newPin) {\n        if (person.getPin().equals(oldPin)) {\n            person.setPin(newPin);\n            return true;\n        }\n        return false;\n    }\n}\n\n\n\n\n\n\n\n\nThe AccountManager class is created as a Singleton to force its usage when managing accounts.\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\nclassDiagram\n    class Account {\n        -String accountNumber\n        -String pin\n        -double balance\n\n        +getAccountNumber()\n        +setAccountNumber()\n        +getPin()\n        +setPin()\n        +getBalance()\n        +setBalance()\n    }\n\n    class Person {\n        -String name\n        -int age\n        -String address\n        -Account account\n\n        +getName()\n        +setName()\n        +getAge()\n        +setAge()\n        +getAddress()\n        +setAddress()\n        +getAccount()\n        +setAccount()\n        +getBalance()\n        +setBalance()\n        +getPin()\n        +setPin()\n    }\n\n    %% AccountManager Singleton\n    class AccountManager {\n        +getInstance()\n        +withdrawal(Person client, double amount)\n        +transfer(Person sender, Person receiver, double amount)\n        +deposit(Person client, double amount)\n        +changePin(Person client)\n    }\n\n    &lt;&lt;Singleton&gt;&gt; AccountManager\n    %% Classes relationships\n    Person \"1\" --o \"1\" Account : has\n    Person \"*\" -- \"1\" AccountManager : manages\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter\npublic class Person {\n    private String name;\n    private String address;\n    private int age;\n    private Account account;\n\n    public Person(String name, String address, int age, Account account) {\n        this.name = name;\n        this.address = address;\n        this.age = age;\n        this.account = account;\n    }\n\n    public double getBalance() {\n        return this.account.getBalance();\n    }\n\n    public void setBalance(double amount) {\n        this.account.setBalance(amount);\n    }\n\n    public String getPin() {\n        return this.account.getPin();\n    }\n\n    public void setPin(String newPin) {\n        this.account.setPin(newPin);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter\npublic class Account {\n    private String accountNumber;\n    private String pin;\n    private double balance;\n\n    public Account(String accountNumber, String pin, double balance) {\n        this.accountNumber = accountNumber;\n        this.pin = pin;\n        this.balance = balance;\n    }\n\n    public boolean equals(Object compared) {\n        if (this == compared) {\n            return true;\n        }\n        if (!(compared instanceof Account)) {\n            return false;\n        }\n\n        Account comparedAccount = (Account) compared;\n\n        if (this.accountNumber.equals(comparedAccount.accountNumber) &&\n                this.pin.equals(comparedAccount.pin) &&\n                this.balance == comparedAccount.balance) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.labSe01Part1;\n\npublic class AccountManager {\n    private static AccountManager instance;\n\n    private AccountManager() {\n        // Empty constructor?\n    }\n\n    public static AccountManager getInstance() {\n        if (instance == null) {\n            instance = new AccountManager();\n        }\n        return instance;\n    }\n\n    public static boolean withdrawal(Person person, double amount) {\n        if (amount &gt; 0 && amount &lt;= person.getBalance()) {\n            person.setBalance(person.getBalance() - amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean transfer(Person sender, Person receiver, double amount) {\n        if (amount &gt; 0 && amount &lt;= sender.getBalance()) {\n            sender.setBalance(sender.getBalance() - amount);\n            receiver.setBalance(receiver.getBalance() + amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean deposit(Person person, double amount){\n        if (amount &gt; 0) {\n            person.setBalance(person.getBalance() + amount);\n            return true;\n        }\n        return false;\n    }\n    \n    public static boolean changePin(Person person, String oldPin, String newPin) {\n        if (person.getPin().equals(oldPin)) {\n            person.setPin(newPin);\n            return true;\n        }\n        return false;\n    }\n}\n\n\n\n\n\n\n\n\nAnother approach would be that a client might have multiple accounts. We can manage all the client’s accounts as a HashMap where its keys are the account’s owners (Person) and each value is a list of accounts (Account). This way we are decoupling classes Account and Person.\nThe AccountManager class is created as a Singleton to force its usage when managing accounts.\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\nclassDiagram\n    class Person {\n        -String name\n        -int age\n        -String address\n\n        +getName()\n        +setName()\n        +getAge()\n        +setAge()\n        +getAddress()\n        +setAddress()\n        +equals(Person compared) boolean\n    }\n\n    class Account {\n        -String accountNumber\n        -String pin\n        -double balance\n\n        +getAccountNumber()\n        +setAccountNumber()\n        +getPin()\n        +setPin()\n        +getBalance()\n        +setBalance()\n        +equals(Account compared) boolean\n    }\n\n    %% AccountManager Singleton\n    class AccountManager {\n        -HashMap&lt; Person, ArrayList&lt; Account &gt; &gt; clients\n\n        -getAccount(Person client, String accountNumber)\n        -createAccount(Person client, Account newAccount)\n        -removeAccount(Person client, Account newAccount)\n\n        -getClient(String clientName)\n        -removeClient(Person client)\n\n        -getAccounts(Person client)\n\n        -changePin(Account account, String oldPin, String newPin)\n\n        +getInstance()\n        +getClientBalance(String clientName)\n        +getAccountBalance(String clientName, String accountNumber)\n        +withdrawal(String clientName, String accountNumber, double amount)\n        +transfer(String senderName, String senderAccountNumber, String receiverName, String receiverAccountNumber, double amount)\n        +deposit(String clientName, String accountNumber, double amount)\n        +changePin(String clientName, String accountNumber, String oldPin, String newPin)\n    }\n\n    &lt;&lt;Singleton&gt;&gt; AccountManager\n\n    %% Classes relationship\n    Person \"*\" -- \"1\" AccountManager : manages\n    Account \"*\" -- \"1\" AccountManager : manages\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter\npublic class Person {\n    private String name;\n    private String address;\n    private int age;\n\n    public Person(String name, String address, int age) {\n        this.name = name;\n        this.address = address;\n        this.age = age;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter @Setter\npublic class Account {\n    private String accountNumber;\n    private String pin;\n    private double balance;\n\n    public Account(String accountNumber, String pin, double balance) {\n        this.accountNumber = accountNumber;\n        this.pin = pin;\n        this.balance = balance;\n    }\n\n    public boolean equals(Object compared) {\n        if (this == compared) {\n            return true;\n        }\n        if (!(compared instanceof Account)) {\n            return false;\n        }\n\n        Account comparedAccount = (Account) compared;\n\n        if (this.accountNumber.equals(comparedAccount.accountNumber) &&\n                this.pin.equals(comparedAccount.pin) &&\n                this.balance == comparedAccount.balance) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.labSe01Part1;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class AccountManager {\n    private static AccountManager instance;\n    private HashMap&lt;Person, ArrayList&lt;Account&gt;&gt; clients;\n    private AccountManager() {\n        this.clients = new HashMap&lt;&gt;();\n        // Empty constructor?\n    }\n\n    public static AccountManager getInstance() {\n        if (instance == null) {\n            instance = new AccountManager();\n        }\n        return instance;\n    }\n\n    // clearAccounts only for testing purposes\n    public void clearAccounts() {\n        this.clients = new HashMap&lt;&gt;();\n    }\n\n    // Private methods: any method that requires Person or Account objects as input parameters\n    private boolean createAccount(Person client, Account newAccount) {\n        if (!this.clients.containsKey(client)) {\n            ArrayList&lt;Account&gt; accounts = new ArrayList&lt;&gt;();\n            accounts.add(newAccount);\n            this.clients.put(client, accounts);\n            return true;\n        }\n        else if (!this.clients.get(client).contains(newAccount)) {\n            this.clients.get(client).add(newAccount);\n            return true;\n        }\n        return false;\n    }\n\n    private boolean removeAccount(Person client, Account accountToDelete) {\n        if (this.clients.containsKey(client) && this.clients.get(client).contains(accountToDelete)) {\n            this.clients.get(client).remove(accountToDelete);\n            System.out.println(\"Account \" + accountToDelete.getAccountNumber() + \" removed from the system.\");\n            return true;\n        }\n        return false;\n    }\n\n    private boolean removeClient(Person client) {\n        if (this.clients.containsKey(client)) {\n            this.clients.remove(client);\n            System.out.println(\"Client \" + client.getName() + \" removed from the system.\");\n            return true;\n        }\n        return false;\n    }\n\n    private ArrayList&lt;Account&gt; getAccounts(Person client) {\n        return this.clients.getOrDefault(client, null);\n    }\n\n    private Person getClient(String clientName) {\n        for (Person client : this.clients.keySet()) {\n            if (client.getName().equals(clientName)) {\n                return client;\n            }\n        }\n        return null;\n    }\n\n    private Account getAccount(Person client, String accountNumber) {\n        if (this.clients.containsKey(client)) {\n            for (Account account : this.clients.get(client)) {\n                if (account.getAccountNumber().equals(accountNumber)) {\n                    return account;\n                }\n            }\n        }\n        return null;\n    }\n\n    private double getClientBalance(Person client) {\n        double totalBalance = 0.0;\n        if (this.clients.containsKey(client)) {\n            for (Account account : this.clients.get(client)) {\n                totalBalance += account.getBalance();\n            }\n        }\n        return totalBalance;\n    }\n\n    private boolean withdrawal(Account account, double amount) {\n        // Check if there's enough money to withdraw\n        if (amount &gt; 0 && amount &lt;= account.getBalance()) {\n            account.setBalance(account.getBalance() - amount);\n            System.out.println(\"Withdrawal completed. New balance: \" + account.getBalance());\n            return true;\n        }\n        // Not enough money to withdraw\n        System.out.println(\"Not enough money on client's account. Withdrawal operation cancelled.\");\n        return false;\n    }\n\n    private boolean transfer(Account senderAccount, Account receiverAccount, double amount) {\n        // Check if we can transfer the money\n        if (amount &gt; 0 && amount &lt;= senderAccount.getBalance()) {\n            senderAccount.setBalance(senderAccount.getBalance() - amount);\n            receiverAccount.setBalance(receiverAccount.getBalance() + amount);\n            System.out.println(\"Transfer completed.\");\n            System.out.println(\"New sender balance: \" + senderAccount.getBalance());\n            System.out.println(\"New receiver balance: \" + receiverAccount.getBalance());\n            return true;\n        }\n        // Not enough money for the transfer\n        System.out.println(\"Not enough money on sender's account. Transfer operation cancelled.\");\n        return false;\n    }\n\n    private boolean deposit(Account account, double amount) {\n        if (amount &gt; 0) {\n            account.setBalance(account.getBalance() + amount);\n            System.out.println(\"Deposit completed. New balance: \" + account.getBalance());\n            return true;\n        }\n        System.out.println(\"Bad amount of money. Deposit cancelled.\");\n        return false;\n    }\n\n    private boolean changePin(Account account, String oldPin, String newPin) {\n        if (account.getPin().equals(oldPin)) {\n            account.setPin(newPin);\n            System.out.println(\"Pin correctly changed.\");\n            return true;\n        }\n        return false;\n    }\n\n    // Public methods: only basic data types accepted, no Person or Account\n    public boolean createAccount(String clientName, String clientAddress, int age, String accountNumber, String accountPin, double balance) {\n        return this.createAccount(new Person(clientName, clientAddress, age), new Account(accountNumber, accountPin, balance));\n    }\n    public boolean createAccount(String clientName, String clientAddress, int age, String accountNumber, String accountPin) {\n        return this.createAccount(clientName, clientAddress, age, accountNumber, accountPin, 0.0);\n    }\n\n    public boolean removeAccount(String clientName, String accountNumber) {\n        Person client = this.getClient(clientName);\n        if (client == null) {\n            return false;\n        }\n        Account account = this.getAccount(client, accountNumber);\n        if (account == null) {\n            return false;\n        }\n        return this.removeAccount(client, account);\n    }\n\n    public boolean removeClient(String clientName) {\n        Person client = this.getClient(clientName);\n        if (client == null) {\n            return false;\n        }\n\n        return this.removeClient(client);\n    }\n\n    public Account getAccount(String clientName, String accountNumber) {\n        Person client = this.getClient(clientName);\n        if (client == null) {\n            return null;\n        }\n        return this.getAccount(client, accountNumber);\n    }\n\n    public double getAccountBalance(String clientName, String accountNumber) {\n        Account account = this.getAccount(clientName, accountNumber);\n        if (account == null) {\n            return 0.0;\n        }\n        return account.getBalance();\n    }\n\n    public double getClientBalance(String clientName) {\n        Person client = this.getClient(clientName);\n        if (client == null) {\n            System.out.println(\"Client \" + clientName + \" does not exist.\");\n            return 0.0;\n        }\n        return this.getClientBalance(client);\n    }\n\n    public boolean withdrawal(String clientName, String accountNumber, double amount) {\n        // Retrieve the account from that client\n        Account account = this.getAccount(clientName, accountNumber);\n        if (account == null) {\n            System.out.println(\"Client \" + clientName + \"doesn't have an account with number \" + accountNumber +\". Withdrawal operation cancelled.\");\n            return false;\n        }\n\n        return this.withdrawal(account, amount);\n    }\n\n    public boolean transfer(String senderName, String senderAccountNumber, String receiverName, String receiverAccountNumber, double amount) {\n        // Retrieve the sender account\n        Account senderAccount = this.getAccount(senderName, senderAccountNumber);\n        if (senderAccount == null) {\n            System.out.println(\"Client \" + senderName + \"doesn't have an account with number \" + senderAccountNumber + \". Transfer operation cancelled.\");\n            return false;\n        }\n        // Retrieve the receiver account\n        Account receiverAccount = this.getAccount(receiverName, receiverAccountNumber);\n        if (receiverAccount == null) {\n            System.out.println(\"Client \" + senderName + \"doesn't have an account with number \" + senderAccountNumber + \". Transfer operation cancelled.\");\n            return false;\n        }\n\n        return this.transfer(senderAccount, receiverAccount, amount);\n    }\n\n    public boolean deposit(String clientName, String accountNumber, double amount){\n        Account clientAccount = this.getAccount(clientName, accountNumber);\n        if (clientAccount == null) {\n            System.out.println(\"Client \" + clientName + \" doesn't have an account with number \" + accountNumber + \". Deposit operation cancelled.\");\n            return false;\n        }\n\n        return this.deposit(clientAccount, amount);\n    }\n\n    public boolean changePin(String clientName, String accountNumber, String oldPin, String newPin) {\n        Account account = this.getAccount(clientName, accountNumber);\n        if (account == null) {\n            return false;\n        }\n        return this.changePin(account, oldPin, newPin);\n    }\n}"
  },
  {
    "objectID": "java-exercises/Labs/java-se01-1.html#approach-1",
    "href": "java-exercises/Labs/java-se01-1.html#approach-1",
    "title": "LAB#SE01-1: Maven Person and Account",
    "section": "",
    "text": "Note\n\n\n\n\n\n\n\n\n\nclassDiagram\n    Person \"1\" --o \"1\" Account : has\n    Person \"*\" -- \"1\" AccountManager : manages\n\n    class Person{\n        -String name\n        -String address\n        -int age\n        -Account account\n\n        +getBalance()\n        +setBalance()\n        +getPin()\n        +setPin()\n    }\n    \n    class Account{\n        -String accountManager\n        -String pin\n        -double balance\n\n        +equals(Account compared) boolean\n    }\n\n    class AccountManager{\n        +withdrawal(Person person, double amount) boolean\n        +transfer(Person sender, Person receiver, double amount) boolean\n        +changePin(Person person, String oldPin, String newPin) boolean\n    }\n    &lt;&lt;Static&gt;&gt; AccountManager\n    %%note for AccountManager \"Can withdraw money from a person's account\\nCan tranfer money between two persons' account\\nCan change the Pin of a person's account\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPerson class\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter @NoArgsConstructor\npublic class Person {\n    private String name;\n    private String address;\n    private int age;\n    private Account account;\n\n    public Person(String name, String address, int age, Account account) {\n        this.name = name;\n        this.address = address;\n        this.age = age;\n        this.account = account;\n    }\n\n    public double getBalance() {\n        return this.account.getBalance();\n    }\n\n    public void setBalance(double amount) {\n        this.account.setBalance(amount);\n    }\n\n    public String getPin() {\n        return this.account.getPin();\n    }\n\n    public void setPin(String newPin) {\n        this.account.setPin(newPin);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nAccount class\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter @NoArgsConstructor\npublic class Account {\n    private String accountNumber;\n    private String pin;\n    private double balance;\n\n    public Account(String accountNumber, String pin, double balance) {\n        this.accountNumber = accountNumber;\n        this.pin = pin;\n        this.balance = balance;\n    }\n\n    public boolean equals(Object compared) {\n        if (this == compared) {\n            return true;\n        }\n        if (!(compared instanceof Account)) {\n            return false;\n        }\n\n        Account comparedAccount = (Account) compared;\n\n        if (this.accountNumber.equals(comparedAccount.accountNumber) &&\n                this.pin.equals(comparedAccount.pin) &&\n                this.balance == comparedAccount.balance) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter @NoArgsConstructor\n/**\n * Public class with static methods to manage accounts between persons\n */\npublic class AccountManager {\n    public static boolean withdrawal(Person person, double amount) {\n        if (amount &gt; 0 && amount &lt;= person.getBalance()) {\n            person.setBalance(person.getBalance() - amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean transfer(Person sender, Person receiver, double amount) {\n        if (amount &gt; 0 && amount &lt;= sender.getBalance()) {\n            sender.setBalance(sender.getBalance() - amount);\n            receiver.setBalance(receiver.getBalance() + amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean changePin(Person person, String oldPin, String newPin) {\n        if (person.getPin().equals(oldPin)) {\n            person.setPin(newPin);\n            return true;\n        }\n        return false;\n    }\n}"
  },
  {
    "objectID": "java-exercises/Labs/java-se01-1.html#approach-2",
    "href": "java-exercises/Labs/java-se01-1.html#approach-2",
    "title": "LAB#SE01-1: Maven Person and Account",
    "section": "",
    "text": "The AccountManager class is created as a Singleton to force its usage when managing accounts.\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\nclassDiagram\n    class Account {\n        -String accountNumber\n        -String pin\n        -double balance\n\n        +getAccountNumber()\n        +setAccountNumber()\n        +getPin()\n        +setPin()\n        +getBalance()\n        +setBalance()\n    }\n\n    class Person {\n        -String name\n        -int age\n        -String address\n        -Account account\n\n        +getName()\n        +setName()\n        +getAge()\n        +setAge()\n        +getAddress()\n        +setAddress()\n        +getAccount()\n        +setAccount()\n        +getBalance()\n        +setBalance()\n        +getPin()\n        +setPin()\n    }\n\n    %% AccountManager Singleton\n    class AccountManager {\n        +getInstance()\n        +withdrawal(Person client, double amount)\n        +transfer(Person sender, Person receiver, double amount)\n        +deposit(Person client, double amount)\n        +changePin(Person client)\n    }\n\n    &lt;&lt;Singleton&gt;&gt; AccountManager\n    %% Classes relationships\n    Person \"1\" --o \"1\" Account : has\n    Person \"*\" -- \"1\" AccountManager : manages\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter\npublic class Person {\n    private String name;\n    private String address;\n    private int age;\n    private Account account;\n\n    public Person(String name, String address, int age, Account account) {\n        this.name = name;\n        this.address = address;\n        this.age = age;\n        this.account = account;\n    }\n\n    public double getBalance() {\n        return this.account.getBalance();\n    }\n\n    public void setBalance(double amount) {\n        this.account.setBalance(amount);\n    }\n\n    public String getPin() {\n        return this.account.getPin();\n    }\n\n    public void setPin(String newPin) {\n        this.account.setPin(newPin);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter\npublic class Account {\n    private String accountNumber;\n    private String pin;\n    private double balance;\n\n    public Account(String accountNumber, String pin, double balance) {\n        this.accountNumber = accountNumber;\n        this.pin = pin;\n        this.balance = balance;\n    }\n\n    public boolean equals(Object compared) {\n        if (this == compared) {\n            return true;\n        }\n        if (!(compared instanceof Account)) {\n            return false;\n        }\n\n        Account comparedAccount = (Account) compared;\n\n        if (this.accountNumber.equals(comparedAccount.accountNumber) &&\n                this.pin.equals(comparedAccount.pin) &&\n                this.balance == comparedAccount.balance) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.labSe01Part1;\n\npublic class AccountManager {\n    private static AccountManager instance;\n\n    private AccountManager() {\n        // Empty constructor?\n    }\n\n    public static AccountManager getInstance() {\n        if (instance == null) {\n            instance = new AccountManager();\n        }\n        return instance;\n    }\n\n    public static boolean withdrawal(Person person, double amount) {\n        if (amount &gt; 0 && amount &lt;= person.getBalance()) {\n            person.setBalance(person.getBalance() - amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean transfer(Person sender, Person receiver, double amount) {\n        if (amount &gt; 0 && amount &lt;= sender.getBalance()) {\n            sender.setBalance(sender.getBalance() - amount);\n            receiver.setBalance(receiver.getBalance() + amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean deposit(Person person, double amount){\n        if (amount &gt; 0) {\n            person.setBalance(person.getBalance() + amount);\n            return true;\n        }\n        return false;\n    }\n    \n    public static boolean changePin(Person person, String oldPin, String newPin) {\n        if (person.getPin().equals(oldPin)) {\n            person.setPin(newPin);\n            return true;\n        }\n        return false;\n    }\n}"
  },
  {
    "objectID": "java-exercises/Labs/java-se01-1.html#approach-3---singleton-hashmaps",
    "href": "java-exercises/Labs/java-se01-1.html#approach-3---singleton-hashmaps",
    "title": "LAB#SE01-1: Maven Person and Account",
    "section": "",
    "text": "Another approach would be that a client might have multiple accounts. We can manage all the client’s accounts as a HashMap where its keys are the account’s owners (Person) and each value is a list of accounts (Account). This way we are decoupling classes Account and Person.\nThe AccountManager class is created as a Singleton to force its usage when managing accounts.\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\nclassDiagram\n    class Person {\n        -String name\n        -int age\n        -String address\n\n        +getName()\n        +setName()\n        +getAge()\n        +setAge()\n        +getAddress()\n        +setAddress()\n        +equals(Person compared) boolean\n    }\n\n    class Account {\n        -String accountNumber\n        -String pin\n        -double balance\n\n        +getAccountNumber()\n        +setAccountNumber()\n        +getPin()\n        +setPin()\n        +getBalance()\n        +setBalance()\n        +equals(Account compared) boolean\n    }\n\n    %% AccountManager Singleton\n    class AccountManager {\n        -HashMap&lt; Person, ArrayList&lt; Account &gt; &gt; clients\n\n        -getAccount(Person client, String accountNumber)\n        -createAccount(Person client, Account newAccount)\n        -removeAccount(Person client, Account newAccount)\n\n        -getClient(String clientName)\n        -removeClient(Person client)\n\n        -getAccounts(Person client)\n\n        -changePin(Account account, String oldPin, String newPin)\n\n        +getInstance()\n        +getClientBalance(String clientName)\n        +getAccountBalance(String clientName, String accountNumber)\n        +withdrawal(String clientName, String accountNumber, double amount)\n        +transfer(String senderName, String senderAccountNumber, String receiverName, String receiverAccountNumber, double amount)\n        +deposit(String clientName, String accountNumber, double amount)\n        +changePin(String clientName, String accountNumber, String oldPin, String newPin)\n    }\n\n    &lt;&lt;Singleton&gt;&gt; AccountManager\n\n    %% Classes relationship\n    Person \"*\" -- \"1\" AccountManager : manages\n    Account \"*\" -- \"1\" AccountManager : manages\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter\npublic class Person {\n    private String name;\n    private String address;\n    private int age;\n\n    public Person(String name, String address, int age) {\n        this.name = name;\n        this.address = address;\n        this.age = age;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter @Setter\npublic class Account {\n    private String accountNumber;\n    private String pin;\n    private double balance;\n\n    public Account(String accountNumber, String pin, double balance) {\n        this.accountNumber = accountNumber;\n        this.pin = pin;\n        this.balance = balance;\n    }\n\n    public boolean equals(Object compared) {\n        if (this == compared) {\n            return true;\n        }\n        if (!(compared instanceof Account)) {\n            return false;\n        }\n\n        Account comparedAccount = (Account) compared;\n\n        if (this.accountNumber.equals(comparedAccount.accountNumber) &&\n                this.pin.equals(comparedAccount.pin) &&\n                this.balance == comparedAccount.balance) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.labSe01Part1;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class AccountManager {\n    private static AccountManager instance;\n    private HashMap&lt;Person, ArrayList&lt;Account&gt;&gt; clients;\n    private AccountManager() {\n        this.clients = new HashMap&lt;&gt;();\n        // Empty constructor?\n    }\n\n    public static AccountManager getInstance() {\n        if (instance == null) {\n            instance = new AccountManager();\n        }\n        return instance;\n    }\n\n    // clearAccounts only for testing purposes\n    public void clearAccounts() {\n        this.clients = new HashMap&lt;&gt;();\n    }\n\n    // Private methods: any method that requires Person or Account objects as input parameters\n    private boolean createAccount(Person client, Account newAccount) {\n        if (!this.clients.containsKey(client)) {\n            ArrayList&lt;Account&gt; accounts = new ArrayList&lt;&gt;();\n            accounts.add(newAccount);\n            this.clients.put(client, accounts);\n            return true;\n        }\n        else if (!this.clients.get(client).contains(newAccount)) {\n            this.clients.get(client).add(newAccount);\n            return true;\n        }\n        return false;\n    }\n\n    private boolean removeAccount(Person client, Account accountToDelete) {\n        if (this.clients.containsKey(client) && this.clients.get(client).contains(accountToDelete)) {\n            this.clients.get(client).remove(accountToDelete);\n            System.out.println(\"Account \" + accountToDelete.getAccountNumber() + \" removed from the system.\");\n            return true;\n        }\n        return false;\n    }\n\n    private boolean removeClient(Person client) {\n        if (this.clients.containsKey(client)) {\n            this.clients.remove(client);\n            System.out.println(\"Client \" + client.getName() + \" removed from the system.\");\n            return true;\n        }\n        return false;\n    }\n\n    private ArrayList&lt;Account&gt; getAccounts(Person client) {\n        return this.clients.getOrDefault(client, null);\n    }\n\n    private Person getClient(String clientName) {\n        for (Person client : this.clients.keySet()) {\n            if (client.getName().equals(clientName)) {\n                return client;\n            }\n        }\n        return null;\n    }\n\n    private Account getAccount(Person client, String accountNumber) {\n        if (this.clients.containsKey(client)) {\n            for (Account account : this.clients.get(client)) {\n                if (account.getAccountNumber().equals(accountNumber)) {\n                    return account;\n                }\n            }\n        }\n        return null;\n    }\n\n    private double getClientBalance(Person client) {\n        double totalBalance = 0.0;\n        if (this.clients.containsKey(client)) {\n            for (Account account : this.clients.get(client)) {\n                totalBalance += account.getBalance();\n            }\n        }\n        return totalBalance;\n    }\n\n    private boolean withdrawal(Account account, double amount) {\n        // Check if there's enough money to withdraw\n        if (amount &gt; 0 && amount &lt;= account.getBalance()) {\n            account.setBalance(account.getBalance() - amount);\n            System.out.println(\"Withdrawal completed. New balance: \" + account.getBalance());\n            return true;\n        }\n        // Not enough money to withdraw\n        System.out.println(\"Not enough money on client's account. Withdrawal operation cancelled.\");\n        return false;\n    }\n\n    private boolean transfer(Account senderAccount, Account receiverAccount, double amount) {\n        // Check if we can transfer the money\n        if (amount &gt; 0 && amount &lt;= senderAccount.getBalance()) {\n            senderAccount.setBalance(senderAccount.getBalance() - amount);\n            receiverAccount.setBalance(receiverAccount.getBalance() + amount);\n            System.out.println(\"Transfer completed.\");\n            System.out.println(\"New sender balance: \" + senderAccount.getBalance());\n            System.out.println(\"New receiver balance: \" + receiverAccount.getBalance());\n            return true;\n        }\n        // Not enough money for the transfer\n        System.out.println(\"Not enough money on sender's account. Transfer operation cancelled.\");\n        return false;\n    }\n\n    private boolean deposit(Account account, double amount) {\n        if (amount &gt; 0) {\n            account.setBalance(account.getBalance() + amount);\n            System.out.println(\"Deposit completed. New balance: \" + account.getBalance());\n            return true;\n        }\n        System.out.println(\"Bad amount of money. Deposit cancelled.\");\n        return false;\n    }\n\n    private boolean changePin(Account account, String oldPin, String newPin) {\n        if (account.getPin().equals(oldPin)) {\n            account.setPin(newPin);\n            System.out.println(\"Pin correctly changed.\");\n            return true;\n        }\n        return false;\n    }\n\n    // Public methods: only basic data types accepted, no Person or Account\n    public boolean createAccount(String clientName, String clientAddress, int age, String accountNumber, String accountPin, double balance) {\n        return this.createAccount(new Person(clientName, clientAddress, age), new Account(accountNumber, accountPin, balance));\n    }\n    public boolean createAccount(String clientName, String clientAddress, int age, String accountNumber, String accountPin) {\n        return this.createAccount(clientName, clientAddress, age, accountNumber, accountPin, 0.0);\n    }\n\n    public boolean removeAccount(String clientName, String accountNumber) {\n        Person client = this.getClient(clientName);\n        if (client == null) {\n            return false;\n        }\n        Account account = this.getAccount(client, accountNumber);\n        if (account == null) {\n            return false;\n        }\n        return this.removeAccount(client, account);\n    }\n\n    public boolean removeClient(String clientName) {\n        Person client = this.getClient(clientName);\n        if (client == null) {\n            return false;\n        }\n\n        return this.removeClient(client);\n    }\n\n    public Account getAccount(String clientName, String accountNumber) {\n        Person client = this.getClient(clientName);\n        if (client == null) {\n            return null;\n        }\n        return this.getAccount(client, accountNumber);\n    }\n\n    public double getAccountBalance(String clientName, String accountNumber) {\n        Account account = this.getAccount(clientName, accountNumber);\n        if (account == null) {\n            return 0.0;\n        }\n        return account.getBalance();\n    }\n\n    public double getClientBalance(String clientName) {\n        Person client = this.getClient(clientName);\n        if (client == null) {\n            System.out.println(\"Client \" + clientName + \" does not exist.\");\n            return 0.0;\n        }\n        return this.getClientBalance(client);\n    }\n\n    public boolean withdrawal(String clientName, String accountNumber, double amount) {\n        // Retrieve the account from that client\n        Account account = this.getAccount(clientName, accountNumber);\n        if (account == null) {\n            System.out.println(\"Client \" + clientName + \"doesn't have an account with number \" + accountNumber +\". Withdrawal operation cancelled.\");\n            return false;\n        }\n\n        return this.withdrawal(account, amount);\n    }\n\n    public boolean transfer(String senderName, String senderAccountNumber, String receiverName, String receiverAccountNumber, double amount) {\n        // Retrieve the sender account\n        Account senderAccount = this.getAccount(senderName, senderAccountNumber);\n        if (senderAccount == null) {\n            System.out.println(\"Client \" + senderName + \"doesn't have an account with number \" + senderAccountNumber + \". Transfer operation cancelled.\");\n            return false;\n        }\n        // Retrieve the receiver account\n        Account receiverAccount = this.getAccount(receiverName, receiverAccountNumber);\n        if (receiverAccount == null) {\n            System.out.println(\"Client \" + senderName + \"doesn't have an account with number \" + senderAccountNumber + \". Transfer operation cancelled.\");\n            return false;\n        }\n\n        return this.transfer(senderAccount, receiverAccount, amount);\n    }\n\n    public boolean deposit(String clientName, String accountNumber, double amount){\n        Account clientAccount = this.getAccount(clientName, accountNumber);\n        if (clientAccount == null) {\n            System.out.println(\"Client \" + clientName + \" doesn't have an account with number \" + accountNumber + \". Deposit operation cancelled.\");\n            return false;\n        }\n\n        return this.deposit(clientAccount, amount);\n    }\n\n    public boolean changePin(String clientName, String accountNumber, String oldPin, String newPin) {\n        Account account = this.getAccount(clientName, accountNumber);\n        if (account == null) {\n            return false;\n        }\n        return this.changePin(account, oldPin, newPin);\n    }\n}"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-1.html",
    "href": "java-exercises/Labs/java-se00-1.html",
    "title": "LAB#SE00-1: Maven Person",
    "section": "",
    "text": "ContextGoalTasksOptional\n\n\nBasic understanding of Java programming language is required, as well as some familiarity with Maven or Gradle for managing dependencies and building the project. ssl encryption and is intended to run behind a Knowledge of algotighms and data structures to implement the required classes.\n\n\nCreate multiple classes in Java (Person, Student, Book, Car and Author) using the most convenient entity relationship between them.\nTest these classes using JUnit.\n\n\n\nCreate a new Maven or Gradle project and setting up the project structure\nModify the project’s pom.xml or build.gradle file to import necessary dependencies, including JUnit for testing\nImplement the required classes in Java\nImplement two basic patter-designs: singleton and think about factory\nWrite JUnit tests to verify that classes work as expected\n\n\n\n\nAllow the user to input data via the console, rather than using hard-coded test data in JUnit tests\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTODO\n\n\n\nPending to create UML diagram\n\n\n\n\n\n\n\n\n\n\n\n\n\nPerson class\n\n\n\n\n\n\n\nPerson.java\n\npackage org.labse00part1.domain;\n\nimport lombok.*;\n\n@Data\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Person {\n    private String firstName;\n    private String lastName;\n    private int age;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nStudent class\n\n\n\n\n\n\n\nStudent.java\n\npackage org.labse00part1.domain;\n\nimport lombok.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Data\n@Getter\n@Setter\n@NoArgsConstructor\n@ToString(callSuper=true)\npublic class Student extends Person{\n    private String university;\n    private List&lt;Book&gt; books;\n\n    private Car car;\n\n    @Builder\n    public Student(String firstName, String lastName, int age, String university) {\n        super(firstName, lastName, age);\n        this.university = university;\n        this.books = new ArrayList&lt;&gt;();\n        this.car = new Car();\n    }\n\n    @Builder\n    public Student(String firstName, String lastName, int age, String university, List&lt;Book&gt; books) {\n        super(firstName, lastName, age);\n        this.university = university;\n        this.books = books;\n        this.car = new Car();\n    }\n\n    @Builder\n    public Student(String firstName, String lastName, int age, String university, List&lt;Book&gt; books, Car car) {\n        super(firstName, lastName, age);\n        this.university = university;\n        this.books = books;\n        this.car = car;\n    }\n\n    public void addBook(Book newBook) {\n        this.books.add(newBook);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nAuthor class\n\n\n\n\n\n\n\nAuthor.java\n\npackage org.labse00part1.domain;\n\nimport lombok.*;\n\n@Data\n@Getter\n@Setter\n@NoArgsConstructor\n@ToString(callSuper=true)\npublic class Author extends Person{\n    private String genre;\n\n    @Builder\n    public Author(String firstName, String lastName, int age, String genre) {\n        super(firstName, lastName, age);\n        this.genre = genre;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nCar class\n\n\n\n\n\n\n\nCar.java\n\npackage org.labse00part1.domain;\n\nimport lombok.*;\n\n@Data\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Car {\n    public int doors;\n    public int seats;\n    public String color;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nBook class\n\n\n\n\n\n\n\nBook.java\n\npackage org.labse00part1.domain;\n\nimport lombok.*;\n\n@Data\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Book {\n    private String title;\n    private int pages;\n    private String ISBN;\n    private Author author;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse the Code Coverage feature!\n\n\n\nWhen launching tests, do it with Code Coverage to know how much of your code is being tested. Just click on the button next to the Run one when executing a batch of tests or right-click on the Play button next to each test:"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-1.html#approach-1",
    "href": "java-exercises/Labs/java-se00-1.html#approach-1",
    "title": "LAB#SE00-1: Maven Person",
    "section": "",
    "text": "TODO\n\n\n\nPending to create UML diagram\n\n\n\n\n\n\n\n\n\n\n\n\n\nPerson class\n\n\n\n\n\n\n\nPerson.java\n\npackage org.labse00part1.domain;\n\nimport lombok.*;\n\n@Data\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Person {\n    private String firstName;\n    private String lastName;\n    private int age;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nStudent class\n\n\n\n\n\n\n\nStudent.java\n\npackage org.labse00part1.domain;\n\nimport lombok.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Data\n@Getter\n@Setter\n@NoArgsConstructor\n@ToString(callSuper=true)\npublic class Student extends Person{\n    private String university;\n    private List&lt;Book&gt; books;\n\n    private Car car;\n\n    @Builder\n    public Student(String firstName, String lastName, int age, String university) {\n        super(firstName, lastName, age);\n        this.university = university;\n        this.books = new ArrayList&lt;&gt;();\n        this.car = new Car();\n    }\n\n    @Builder\n    public Student(String firstName, String lastName, int age, String university, List&lt;Book&gt; books) {\n        super(firstName, lastName, age);\n        this.university = university;\n        this.books = books;\n        this.car = new Car();\n    }\n\n    @Builder\n    public Student(String firstName, String lastName, int age, String university, List&lt;Book&gt; books, Car car) {\n        super(firstName, lastName, age);\n        this.university = university;\n        this.books = books;\n        this.car = car;\n    }\n\n    public void addBook(Book newBook) {\n        this.books.add(newBook);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nAuthor class\n\n\n\n\n\n\n\nAuthor.java\n\npackage org.labse00part1.domain;\n\nimport lombok.*;\n\n@Data\n@Getter\n@Setter\n@NoArgsConstructor\n@ToString(callSuper=true)\npublic class Author extends Person{\n    private String genre;\n\n    @Builder\n    public Author(String firstName, String lastName, int age, String genre) {\n        super(firstName, lastName, age);\n        this.genre = genre;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nCar class\n\n\n\n\n\n\n\nCar.java\n\npackage org.labse00part1.domain;\n\nimport lombok.*;\n\n@Data\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Car {\n    public int doors;\n    public int seats;\n    public String color;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nBook class\n\n\n\n\n\n\n\nBook.java\n\npackage org.labse00part1.domain;\n\nimport lombok.*;\n\n@Data\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Book {\n    private String title;\n    private int pages;\n    private String ISBN;\n    private Author author;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse the Code Coverage feature!\n\n\n\nWhen launching tests, do it with Code Coverage to know how much of your code is being tested. Just click on the button next to the Run one when executing a batch of tests or right-click on the Play button next to each test:"
  },
  {
    "objectID": "java-exercises/Labs/java-se03-1.html",
    "href": "java-exercises/Labs/java-se03-1.html",
    "title": "LAB#SE03-1: Library/Book core model",
    "section": "",
    "text": "ContextGoalTasksOptional\n\n\nBasic understanding of Java programming language is required, as well as some familiarity with Maven or Gradle for managing dependencies and building the project. ssl encryption and is intended to run behind a Knowledge of algotighms and data structures to implement the required classes.\n\n\nDescribe the required models that might define the solution to a Library implementation. Create multiple classes in Java using the most convenient entity relationship between them to implement the solution.\nTest these classes using JUnit.\n\n\n\nCreate a new Maven or Gradle project and setting up the project structure\nModify the project’s pom.xml or build.gradle file to import necessary dependencies, including JUnit for testing\nImplement the required classes in Java\nImplement User interactive interfaces for each manager\nWrite JUnit tests to verify that classes work as expected\n\n\n\n\nAllow the user to input data via the console, rather than using hard-coded test data in JUnit tests"
  },
  {
    "objectID": "java-exercises/Labs/java-se03-1.html#refactoring-code",
    "href": "java-exercises/Labs/java-se03-1.html#refactoring-code",
    "title": "LAB#SE03-1: Library/Book core model",
    "section": "Refactoring code",
    "text": "Refactoring code\nRight now, the interfaces are coded within the managers, thus creating bad cohesion (interactive interfaces should be separated from logic as it could be created in any other language).\n\nRequest handlers\nThe interface redirects the user to the corresponding manager by calling request handlers:\n\nBookRequestHandler\n\n\nUserRequestHandler\n\n\nBorrowRequestHandler"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-2.html",
    "href": "java-exercises/Labs/java-se00-2.html",
    "title": "LAB#SE00-1: Maven Clinic",
    "section": "",
    "text": "ContextGoalTasksOptional\n\n\nBasic understanding of Java programming language is required, as well as some familiarity with Maven or Gradle for managing dependencies and building the project.\nKnowledge of algotighms and data structures to implement the required classes.\n\n\nCreate multiple classes in Java (Person, Clinic and MyDate) using the most convenient entity relationship between them.\nTest these classes using JUnit.\n\n\n\nCreate a new Maven or Gradle project and setting up the project structure\nModify the project’s pom.xml or build.gradle file to import necessary dependencies, including JUnit for testing\nImplement the required classes in Java\nImplement two basic patter-designs: singleton and think about factory\nWrite JUnit tests to verify that classes work as expected\n\n\n\n\nAllow the user to input data via the console, rather than using hard-coded test data in JUnit tests\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTODO\n\n\n\nPending to create UML diagram\n\n\n\n\n\n\n\n\n\n\n\n\n\nPerson class\n\n\n\n\n\n\n\nPerson.java\n\npackage org.labse00part2.domain;\n\nimport lombok.*;\n\n@Data\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Person {\n    private String name;\n    private int age;\n    private int height;\n    private int weight;\n    private MyDate birthDate;\n\n    public void printPerson() {\n        System.out.println(this.name + \", \" + this.age + \" years old\");\n    }\n\n    public void becomeOlder() {\n        this.age++;\n    }\n\n    public void becomeOlder(int years) {\n        this.age += years;\n    }\n\n    public boolean isAdult() {\n        return this.age &gt;= 18;\n    }\n\n    public double weightIndex() {\n        double heightInMeters = this.height / 100.0;\n        return this.weight / (heightInMeters * heightInMeters);\n    }\n\n    public boolean olderThan(Person compared) {\n        return this.age &gt; compared.getAge();\n    }\n\n    private void setAge() {\n        // TODO: Use the myDate attribute to set the current age\n        // Some methods like becomeOlder should be removed\n    }\n\n    @Override\n    public String toString() {\n        return this.getName() + \", born in \" + this.getBirthDate() + \", \" + this.getAge() + \" years old, weight index: \" + this.weightIndex() + \".\";\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nMyDate class\n\n\n\n\n\n\n\nMyDate.java\n\npackage org.labse00part2.domain;\n\nimport lombok.*;\n\n@Data\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class MyDate {\n    private int day;\n    private int month;\n    private int year;\n\n    @Override\n    public String toString() {\n        return this.getYear() + \"/\" + this.getMonth() + \"/\" + this.getDay();\n    }\n\n    public boolean earlierThan(MyDate compared) {\n        // First, compare years\n        if (this.getYear() &lt; compared.getYear()) {\n            return true;\n        }\n        // Then, compare months\n        if (this.getYear() == compared.getYear() && this.getMonth() &lt; compared.getMonth()) {\n            return true;\n        }\n\n        // Then, compare day\n        if (this.getYear() == compared.getYear()\n                && this.getMonth() == compared.getMonth()\n                && this.getDay() &lt; compared.getDay()){\n            return true;\n        }\n\n        return false;\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nClinic class\n\n\n\n\n\n\n\nClinic.java\n\npackage org.labse00part2.domain;\n\nimport lombok.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Data\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Clinic {\n\n    private String name;\n    private double lowestWeightIndex;\n    private List&lt;Person&gt; members;\n\n    @Builder\n    public Clinic(String name, double lowestWeightIndex) {\n        this.name = name;\n        this.lowestWeightIndex = lowestWeightIndex;\n        this.members = new ArrayList&lt;&gt;();\n    }\n\n    @Builder\n    public Clinic(String name, List&lt;Person&gt; members) {\n        this.name = name;\n        this.members = members;\n        // Once initialized the members, set the lowest Weight Index\n        this.setLowestWeightIndex();\n    }\n\n    public void addMember(Person member) {\n        this.getMembers().add(member);\n        // Remember to update the lowestWeightIndex each time a new member is added\n        if (member.weightIndex() &lt; this.getLowestWeightIndex()) {\n            this.lowestWeightIndex = member.weightIndex();\n        }\n        this.setLowestWeightIndex();\n    }\n\n    public boolean hasMember(Person member) {\n        return this.getMembers().contains(member);\n    }\n\n    public Person personWithHighestWeightIndex() {\n        Person highestWeightIndexMember = null;\n        for (Person member : this.getMembers()) {\n            if (highestWeightIndexMember == null || member.weightIndex() &gt; highestWeightIndexMember.weightIndex()) {\n                highestWeightIndexMember = member;\n            }\n        }\n        return highestWeightIndexMember;\n    }\n\n    public void setLowestWeightIndex() {\n        for (Person member : this.getMembers()) {\n            if (this.getLowestWeightIndex() == 0 || member.weightIndex() &lt; this.getLowestWeightIndex()) {\n                this.lowestWeightIndex = member.weightIndex();\n            }\n        }\n    }\n\n    public String toString() {\n        StringBuilder membersBuilder = new StringBuilder(\"\");\n        for (Person member : this.getMembers()) {\n            membersBuilder.append(member + \"\\n\");\n        }\n        return \"Clinic: \" + this.getName() + \"\\n\"\n                + \"Lowest Weight Index: \" + this.getLowestWeightIndex() + \"\\n\"\n                + \"Members: \" + membersBuilder;\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTODO\n\n\n\nMissing tests for Person and MyDate classes\n\n\n\n\n\n\n\n\nUse the Code Coverage feature!\n\n\n\nWhen launching tests, do it with Code Coverage to know how much of your code is being tested. Just click on the button next to the Run one when executing a batch of tests or right-click on the Play button next to each test:"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-2.html#approach-1",
    "href": "java-exercises/Labs/java-se00-2.html#approach-1",
    "title": "LAB#SE00-1: Maven Clinic",
    "section": "",
    "text": "TODO\n\n\n\nPending to create UML diagram\n\n\n\n\n\n\n\n\n\n\n\n\n\nPerson class\n\n\n\n\n\n\n\nPerson.java\n\npackage org.labse00part2.domain;\n\nimport lombok.*;\n\n@Data\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Person {\n    private String name;\n    private int age;\n    private int height;\n    private int weight;\n    private MyDate birthDate;\n\n    public void printPerson() {\n        System.out.println(this.name + \", \" + this.age + \" years old\");\n    }\n\n    public void becomeOlder() {\n        this.age++;\n    }\n\n    public void becomeOlder(int years) {\n        this.age += years;\n    }\n\n    public boolean isAdult() {\n        return this.age &gt;= 18;\n    }\n\n    public double weightIndex() {\n        double heightInMeters = this.height / 100.0;\n        return this.weight / (heightInMeters * heightInMeters);\n    }\n\n    public boolean olderThan(Person compared) {\n        return this.age &gt; compared.getAge();\n    }\n\n    private void setAge() {\n        // TODO: Use the myDate attribute to set the current age\n        // Some methods like becomeOlder should be removed\n    }\n\n    @Override\n    public String toString() {\n        return this.getName() + \", born in \" + this.getBirthDate() + \", \" + this.getAge() + \" years old, weight index: \" + this.weightIndex() + \".\";\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nMyDate class\n\n\n\n\n\n\n\nMyDate.java\n\npackage org.labse00part2.domain;\n\nimport lombok.*;\n\n@Data\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class MyDate {\n    private int day;\n    private int month;\n    private int year;\n\n    @Override\n    public String toString() {\n        return this.getYear() + \"/\" + this.getMonth() + \"/\" + this.getDay();\n    }\n\n    public boolean earlierThan(MyDate compared) {\n        // First, compare years\n        if (this.getYear() &lt; compared.getYear()) {\n            return true;\n        }\n        // Then, compare months\n        if (this.getYear() == compared.getYear() && this.getMonth() &lt; compared.getMonth()) {\n            return true;\n        }\n\n        // Then, compare day\n        if (this.getYear() == compared.getYear()\n                && this.getMonth() == compared.getMonth()\n                && this.getDay() &lt; compared.getDay()){\n            return true;\n        }\n\n        return false;\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nClinic class\n\n\n\n\n\n\n\nClinic.java\n\npackage org.labse00part2.domain;\n\nimport lombok.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Data\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Clinic {\n\n    private String name;\n    private double lowestWeightIndex;\n    private List&lt;Person&gt; members;\n\n    @Builder\n    public Clinic(String name, double lowestWeightIndex) {\n        this.name = name;\n        this.lowestWeightIndex = lowestWeightIndex;\n        this.members = new ArrayList&lt;&gt;();\n    }\n\n    @Builder\n    public Clinic(String name, List&lt;Person&gt; members) {\n        this.name = name;\n        this.members = members;\n        // Once initialized the members, set the lowest Weight Index\n        this.setLowestWeightIndex();\n    }\n\n    public void addMember(Person member) {\n        this.getMembers().add(member);\n        // Remember to update the lowestWeightIndex each time a new member is added\n        if (member.weightIndex() &lt; this.getLowestWeightIndex()) {\n            this.lowestWeightIndex = member.weightIndex();\n        }\n        this.setLowestWeightIndex();\n    }\n\n    public boolean hasMember(Person member) {\n        return this.getMembers().contains(member);\n    }\n\n    public Person personWithHighestWeightIndex() {\n        Person highestWeightIndexMember = null;\n        for (Person member : this.getMembers()) {\n            if (highestWeightIndexMember == null || member.weightIndex() &gt; highestWeightIndexMember.weightIndex()) {\n                highestWeightIndexMember = member;\n            }\n        }\n        return highestWeightIndexMember;\n    }\n\n    public void setLowestWeightIndex() {\n        for (Person member : this.getMembers()) {\n            if (this.getLowestWeightIndex() == 0 || member.weightIndex() &lt; this.getLowestWeightIndex()) {\n                this.lowestWeightIndex = member.weightIndex();\n            }\n        }\n    }\n\n    public String toString() {\n        StringBuilder membersBuilder = new StringBuilder(\"\");\n        for (Person member : this.getMembers()) {\n            membersBuilder.append(member + \"\\n\");\n        }\n        return \"Clinic: \" + this.getName() + \"\\n\"\n                + \"Lowest Weight Index: \" + this.getLowestWeightIndex() + \"\\n\"\n                + \"Members: \" + membersBuilder;\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTODO\n\n\n\nMissing tests for Person and MyDate classes\n\n\n\n\n\n\n\n\nUse the Code Coverage feature!\n\n\n\nWhen launching tests, do it with Code Coverage to know how much of your code is being tested. Just click on the button next to the Run one when executing a batch of tests or right-click on the Play button next to each test:"
  },
  {
    "objectID": "java-exercises/Labs/java-se02-1.html",
    "href": "java-exercises/Labs/java-se02-1.html",
    "title": "LAB#SE02-1: Movie/Review, model",
    "section": "",
    "text": "ContextGoalTasksOptional\n\n\nBasic understanding of Java programming language is required, as well as some familiarity with Maven or Gradle for managing dependencies and building the project.\nKnowledge of algotighms and data structures to implement the required classes.\n\n\nCreate three classes in Java (Movie, Critic and Review) that implement different algorightms or data structures.\nTest these classes using JUnit.\n\n\n\nCreate a new Maven or Gradle project and setting up the project structure\nModify the project’s pom.xml or build.gradle file to import necessary dependencies, including JUnit for testing\nImplement the three required classes in Java\nImplement two basic patter-designs: singleton and think about factory\nWrite JUnit tests to verify that classes work as expected\n\n\n\n\nAllow the user to input data via the console, rather than using hard-coded test data in JUnit tests"
  },
  {
    "objectID": "java-exercises/Labs/java-se02-1.html#model-design",
    "href": "java-exercises/Labs/java-se02-1.html#model-design",
    "title": "LAB#SE02-1: Movie/Review, model",
    "section": "Model design",
    "text": "Model design\n\n\n\n\n\n\nUML diagram of the model\n\n\n\nTODO: Review multiplicity concept and apply it to the UML!!\nAn association (the UML equivalent to a relationship in data modeling circles) has a multiplicity for each direction."
  },
  {
    "objectID": "java-exercises/Labs/java-se02-1.html#dependencies",
    "href": "java-exercises/Labs/java-se02-1.html#dependencies",
    "title": "LAB#SE02-1: Movie/Review, model",
    "section": "Dependencies",
    "text": "Dependencies\n\nLombok (both dependency and Maven plugin):\n\n&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n    &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n    &lt;version&gt;1.18.24&lt;/version&gt;\n    &lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok-maven-plugin --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n    &lt;artifactId&gt;lombok-maven-plugin&lt;/artifactId&gt;\n    &lt;version&gt;1.18.20.0&lt;/version&gt;\n    &lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n\nJunit:\n\n&lt;!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n    &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;\n    &lt;version&gt;5.9.1&lt;/version&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n\nJava Faker: dependency used to generate stub data for testing\n\n&lt;!-- https://mvnrepository.com/artifact/com.github.javafaker/javafaker --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.github.javafaker&lt;/groupId&gt;\n    &lt;artifactId&gt;javafaker&lt;/artifactId&gt;\n    &lt;version&gt;1.0.2&lt;/version&gt;\n&lt;/dependency&gt;"
  },
  {
    "objectID": "java-exercises/Labs/java-se02-1.html#first-approach",
    "href": "java-exercises/Labs/java-se02-1.html#first-approach",
    "title": "LAB#SE02-1: Movie/Review, model",
    "section": "First approach",
    "text": "First approach\n\nDomain design\n\nMovie\nA Movie class shall represent a movie being reviewed. It should have the following attributes:\n\ntitle: a String representing the title of the movie\nreviews: a Set of Review objects representing the reviews that have been written for this movie\ncritic: The Critic class represents a critic who writes reviews\n\n\n\nCritic\nA Critic class shall represent a critic and a Review of its own. It should have the following attributes:\n\nname: a String representing the name of the critic\nReview: the Review class represents a review of a movie written by a critic\n\n\n\nReview\nA Review class shall represent the information that identifies a review of a movie. It shall have the following attributes:\n\nmovie: a Movie object representing the movie being reviewed\ncritic: a Critic object representing the critic\n\n\n\n\nUML diagram\n\n\n\n\n\n\nQuarto bug\n\n\n\n.mmd files attachment through the file directive (as explained here) isn’t working, there’s an open bug in github.\nOnce the bug is solved, replace any {mermaid} snippet with a link to the uml.mmd file attached to each lab approach like this:\n```{mermaid}\n%%| label: fig-uml\n%%| fig-cap: \"UML diagram\"\n%%| file: ../../../../java-exercises/lab-se-02-1/approach_1/uml.mmd\n\n```\n\n\n\n\n\n\n\nclassDiagram\n    direction LR\n    Review \"*\" o-- \"1\" Movie : has\n    Review \"*\" o-- \"1\" Critic : is done by\n    Critic \"1\" *-- \"*\" Review : can do\n    Movie \"*\" *-- \"*\" Critic : is reviewed by\n    \n    class Movie{\n        -title: String\n        -year: int\n        -critics: Set\n    }\n    \n    class Critic {\n        -name: String\n        -reviews: Set\n    }\n\n    class Review {\n        -movie: Movie\n        -rating: int\n        -comment: String\n        -critic: Critic\n    }\n\n\nFigure 1: UML diagram - First approach"
  },
  {
    "objectID": "java-exercises/Labs/java-se02-1.html#second-approach---less-coupling-between-classes",
    "href": "java-exercises/Labs/java-se02-1.html#second-approach---less-coupling-between-classes",
    "title": "LAB#SE02-1: Movie/Review, model",
    "section": "Second approach - Less coupling between classes",
    "text": "Second approach - Less coupling between classes\nIn this approach we remove redundant or unnecessary associations between the classes.\n\nChanges in previous Domain\n\nMovie\n\nThis time Movie has a Review set instead of a Critic set\n\n\n\nCritic\n\nThis time Critic doesn’t include any reference to the class Review\n\n\n\nReview\n\nReview class is the same as in the first approach\n\n\n\n\nUML diagram\n\n\n\n\n\nclassDiagram\n    direction LR\n    Movie \"1\" *-- \"*\" Review : may have\n    Review \"*\" o-- \"1\" Movie : talks about\n    Review \"1\" o-- \"1\" Critic : is written by\n\n    class Movie {\n        -title: String\n        -reviews: Set\n    }\n\n    class Review {\n        -movie: Movie\n        -critic: Critic\n        -rating: int\n        -comment: String\n    }\n\n    class Critic {\n        -name: String\n    }\n\n\nFigure 2: UML diagram - Second approach"
  },
  {
    "objectID": "java-exercises/Labs/java-se02-1.html#third-approach---use-manager-classes",
    "href": "java-exercises/Labs/java-se02-1.html#third-approach---use-manager-classes",
    "title": "LAB#SE02-1: Movie/Review, model",
    "section": "Third approach - Use Manager classes",
    "text": "Third approach - Use Manager classes\nIn this approach, instead of heavily binding classes between them, we delegate the responsibility to an external class, called MovieManager\n\nLogic\n\nMovieManager (non-static)\nThe non-static approach requests the user to create a MovieManager object in order to access its methods.\n\n\n\n\nclassDiagram\n\n    class MovieManager {\n    }\n\n\n\n\n\n\n\n\nMovieManager (static)\n\n\n\n\n\n\nStatic method and static class\n\n\n\nA static method is a method that is owned only by the class, not by the class objects. You don’t instantiate a class object to access the static methods.\nA static class is a class that doesn’t instantiate objects; thus, static class’ methods are accessed through the class name.\n\n\n\n\n\n\nclassDiagram\n    class MovieManager {\n    }\n\n    &lt;&lt;Static&gt;&gt; MovieManager\n\n\n\n\n\n\n\n\n\n\n\nTODO\n\n\n\n\n\n\n\n\n\nUML diagram\n\n\n\n\n\n\nTODO"
  },
  {
    "objectID": "java-exercises/Labs/java-se02-1.html#fourth-approach---create-a-superclass-person",
    "href": "java-exercises/Labs/java-se02-1.html#fourth-approach---create-a-superclass-person",
    "title": "LAB#SE02-1: Movie/Review, model",
    "section": "Fourth approach - Create a superclass Person",
    "text": "Fourth approach - Create a superclass Person\nLet’s say that we want to add information about the FilmMaker and the Actors of a Movie to our model. Now we have three classes (Critic, FilmMaker and Actor) that have something in common: they are all persons. Thus, we can encapsule their common treats into a new class Person and make these classes inherit it.\n\nChanges in Domain\n\nPerson\nThe Person class defines the common treats of any human being:\n\nname: a String representing the name of the person\nbirthDate: a String representing the birth date of the person (it can also be a Date type)\n\n\n\nFilmMaker\nFilmMaker is a Person subclass that contains info about its works:\n\nmovies: a Set of Movie containing all the movies that this Person has filmed\n\n\n\nActor\nActor is a Person subclass that contains info about its works:\n\nmovies: a Set of Movie containing all the movies where this Person has performed in\n\n\n\nCritic\nCritic now is a Person subclass that contains info about the reviews it has written:\n\nreviews: a Set of Review containing all its reviews\n\n\n\n\nLogic\nNow the MovieManager class must take into account all these changes in its methods\n\n\n\n\n\n\nTODO\n\n\n\n\n\n\n\n\nUML diagram\n\n\n\n\n\n\nTODO"
  },
  {
    "objectID": "java-exercises/Labs/java-se02-1.html#create-a-console-user-interface",
    "href": "java-exercises/Labs/java-se02-1.html#create-a-console-user-interface",
    "title": "LAB#SE02-1: Movie/Review, model",
    "section": "Create a console User Interface",
    "text": "Create a console User Interface\n\n\n\n\n\n\nTODO"
  },
  {
    "objectID": "java-exercises/Labs/java-se02-1.html#create-tests-for-each-one",
    "href": "java-exercises/Labs/java-se02-1.html#create-tests-for-each-one",
    "title": "LAB#SE02-1: Movie/Review, model",
    "section": "Create tests for each one",
    "text": "Create tests for each one\n\n\n\n\n\n\nTODO\n\n\n\n\n\n\n\nTests using InputStreams"
  },
  {
    "objectID": "java-exercises/APIs/api-rest.html",
    "href": "java-exercises/APIs/api-rest.html",
    "title": "API REST",
    "section": "",
    "text": "Teacher’s definition:\n\nREST is an architecture style for building web services. It is based on a client-server model, where a client sends a request to a server and the server sends a response.\nRESTful APIs use HTTP requests to POST (create), PUT (update), GET (read) and DELETE (delete) data.\nA RESTful API is a simple, consistent, and easy-to-use way for applications to communicate with each other over the internet.\n\n\n\nIt is the common language between a client and a server, so the client knows what operations are available in the server. Common REST API operations\n\nPOST (Create)\nGET (Read)\nPUT (Update)\nDELETE (Delete)\n\nSo the base operations are the classic CRUD, but can be expanded. In fact, it is a set of definitions and protocols, sometimes referred to as a contract between an information provider and an Information user.\nThis contract (API Rest style) establishing the content required from the consumer (the call) and the content required by the producer (the response).\n\n\n\n\n\n\nAPI Weather example\n\n\n\nThe API design for a weather service could ask the user for a zip code as a requestand then return a response in the form of a 2-part answer, being the first one the high temperature and the second one the low temperature.\n\n\n\n\n\n\n\n\n\n\n\nTODO\n\n\n\nPending to elaborate!"
  },
  {
    "objectID": "java-exercises/APIs/api-rest.html#what-exactly-is-a-rest-api",
    "href": "java-exercises/APIs/api-rest.html#what-exactly-is-a-rest-api",
    "title": "API REST",
    "section": "",
    "text": "It is the common language between a client and a server, so the client knows what operations are available in the server. Common REST API operations\n\nPOST (Create)\nGET (Read)\nPUT (Update)\nDELETE (Delete)\n\nSo the base operations are the classic CRUD, but can be expanded. In fact, it is a set of definitions and protocols, sometimes referred to as a contract between an information provider and an Information user.\nThis contract (API Rest style) establishing the content required from the consumer (the call) and the content required by the producer (the response).\n\n\n\n\n\n\nAPI Weather example\n\n\n\nThe API design for a weather service could ask the user for a zip code as a requestand then return a response in the form of a 2-part answer, being the first one the high temperature and the second one the low temperature."
  },
  {
    "objectID": "java-exercises/APIs/api-rest.html#what-should-we-take-into-account-when-creating-a-rest-api",
    "href": "java-exercises/APIs/api-rest.html#what-should-we-take-into-account-when-creating-a-rest-api",
    "title": "API REST",
    "section": "",
    "text": "TODO\n\n\n\nPending to elaborate!"
  },
  {
    "objectID": "java-exercises/APIs/api-rest.html#postman",
    "href": "java-exercises/APIs/api-rest.html#postman",
    "title": "API REST",
    "section": "Postman",
    "text": "Postman\nLink here:\nAccording to the official page:\n\nPostman is an API platform for building and using APIs. Postman simplifies each step of the API lifecycle and streamlines collaboration so you can create better APIs—faster.\n\nPostman allows the following:\n\nCreate collections of REST requests\nCreate APIs that query against other datasources (?)\nCreate Mock Servers to test your APIs\nCreate Monitor to observe your system\nCreate Flows to automate processes\n\n\nEnvironments\nCreate environment variables when they are used across all collections or when they have sensitive data (secret)"
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html",
    "href": "java-exercises/Design-patterns/uml.html",
    "title": "UML",
    "section": "",
    "text": "Class notes’ definition\n\n\n\nUML stands for Unified Modeling Language. It is a standardized visual language for specifying, constructing, visualizing, and documenting the artifacts of software systems, as well as for business modeling and other non-software systems.\nUML is used by software developers, business analysts, and system engineers to model the design of a system and communicate that design to others.\n\n\nWhy is it useful?\n\nIt allows all team members to be on the same page by providing a common language; thus, people from different disciplines can understand and discuss system design in a concise and precise way (13)\nIt allows to identify issues either in the design or in the team dynamics (13)\nIt allows to solve any found issue even before coding the system (13)\nIt helps understanding the problem to solve, the client requirements, the market needs, the core, etc… (21)\nIt serves as a project documentation (13)"
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html#inheritance",
    "href": "java-exercises/Design-patterns/uml.html#inheritance",
    "title": "UML",
    "section": "Inheritance",
    "text": "Inheritance\n\n\n\n\n\nclassDiagram\n    class SuperClass {\n    }\n    class SubClass {\n    }\n    SuperClass &lt;|-- SubClass : Inheritance\n\n\n\n\n\nInheritance is a relationship between classes, where one class is a subclass of another class and inherits the properties and behavioral of the superclass. This is represented in UML by a solid line with a closed, filled arrowhead pointing from the subclass to the superclass:"
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html#composition",
    "href": "java-exercises/Design-patterns/uml.html#composition",
    "title": "UML",
    "section": "Composition",
    "text": "Composition\n\n\n\n\n\nclassDiagram\n    class Client {\n    }\n    class BankAccount {\n    }\n\n    Client o-- BankAccount : Composition\n\n\n\n\n\nComposition is a strong type of association that represents a whole-part relationship between two classes, where the parts cannot exist independently of the whole. This is represented in UML by a solid line with a closed diamond shape pointing from the whole to the part."
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html#aggregation",
    "href": "java-exercises/Design-patterns/uml.html#aggregation",
    "title": "UML",
    "section": "Aggregation",
    "text": "Aggregation\n\n\n\n\n\nclassDiagram\n    class Person {\n    }\n    class Hand {\n    }\n\n    Person *-- Hand : Aggregation\n\n\n\n\n\nAggregation is a weaker type of association that represents a whole-part relationship between two classes, where the parts can exist independently of the whole. Thisis represented in UML by a solid line with an open diamond shape pointing from the whole to the part."
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html#association",
    "href": "java-exercises/Design-patterns/uml.html#association",
    "title": "UML",
    "section": "Association",
    "text": "Association\n\n\n\n\n\nclassDiagram\n    class Customer {\n    }\n    class Ticket {\n    }\n\n    Customer --&gt; Ticket : Association\n\n\n\n\n\nAssociation is a relationship between two classes that represents a connection or relationship between them (as in generic relationship). This is represented in UML by a solid line with an open arrowhead pointing from one class to the other."
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html#dependency",
    "href": "java-exercises/Design-patterns/uml.html#dependency",
    "title": "UML",
    "section": "Dependency",
    "text": "Dependency\n\n\n\n\n\nclassDiagram\n    class MovieManager {\n    }\n    class Movie {\n    }\n\n    MovieManager ..&gt; Movie : Dependency\n\n\n\n\nDependency is a relationship between two classes that indicates that one class depends on the other for its functionality. This is represented in UML by a dashed line with an open arrowhead pointing from the dependenet class to the class it depends on."
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html#use-realization",
    "href": "java-exercises/Design-patterns/uml.html#use-realization",
    "title": "UML",
    "section": "Use / Realization",
    "text": "Use / Realization\n\n\n\n\n\nclassDiagram\n    class ShoppingList {\n    }\n    class Item {\n    }\n    \n    ShoppingList ..|&gt; Item : Use / Realization\n\n\n\n\nUse is a relationship between two classes that indicates that one class uses the other in some way. This is represented in UML by a dashed line with an open, unfilled arrowhead pointing from the using class to the class being used."
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html#one-to-one-11",
    "href": "java-exercises/Design-patterns/uml.html#one-to-one-11",
    "title": "UML",
    "section": "One-to-One (1:1)",
    "text": "One-to-One (1:1)"
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html#one-to-many-1n",
    "href": "java-exercises/Design-patterns/uml.html#one-to-many-1n",
    "title": "UML",
    "section": "One-to-Many (1:n)",
    "text": "One-to-Many (1:n)"
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html#many-to-many-nm",
    "href": "java-exercises/Design-patterns/uml.html#many-to-many-nm",
    "title": "UML",
    "section": "Many-to-Many (n:m)",
    "text": "Many-to-Many (n:m)\nMany-to-many requires a middle-man table (assignment table) for both entities to share that info\n\n\n\n\nclassDiagram\n    direction TB\n    class User {\n        -int userId\n        -String name\n    }\n\n    class Book {\n        -int bookId\n        -String title\n        -Enumerator bookStatus\n    }\n\n    class Borrows {\n        -User user\n        -Book book\n        -Date initialBorrow\n        -Date endBorrow\n    }\n\n    class bookStatus {\n        &lt;&lt;enumerator&gt;&gt;\n        - Available\n        - Lost\n        - Borrowed\n    }\n\n    User ..&gt; bookStatus\n    User \"1\" --o \"*\" Borrows : Who borrows\n    Book \"1\" --o \"*\" Borrows : What is borrowed"
  },
  {
    "objectID": "java-exercises/Principles/00-encapsulation.html",
    "href": "java-exercises/Principles/00-encapsulation.html",
    "title": "Encapsulation",
    "section": "",
    "text": "Class notes definition\n\n\n\nEncapsulation is the process of wrapping data and methods that operate on a data into a single unit. In other words, it is the process of hiding the implementation details of an object from the outside world.\nIn Java, encapsulation is achieved through the use of access modifiers like private, public and protected.\n\n\n\n\n\n\n\n\nTODO\n\n\n\nCreate your own definition of encapsulation\n\n\nThe main purpose of encapsulation is to divide the code and create blocks of functionality."
  },
  {
    "objectID": "java-exercises/Principles/02-inheritance.html",
    "href": "java-exercises/Principles/02-inheritance.html",
    "title": "Inheritance",
    "section": "",
    "text": "Class notes definition\n\n\n\nInheritance is a fundamental concept in object-oriented programming. It is the process of creating new classes from existing classes.\n\n\n\n\n\n\n\n\nTODO\n\n\n\nCreate your own definition of inheritance\n\n\nThe main purpose of inheritance is to reuse your code the most."
  },
  {
    "objectID": "java-exercises/Principles/03-polymorphism.html",
    "href": "java-exercises/Principles/03-polymorphism.html",
    "title": "Polymorphism",
    "section": "",
    "text": "Class notes definition\n\n\n\nPolymorphism is a fundamental concept in object-oriented programming. It is the ability of an object to take on different forms.\nIn other words, it is the ability of a single object to behave differently in different context.\n\n\n\n\n\n\n\n\nTODO\n\n\n\nCreate your own definition of polymorphism\n\n\nThe main purpose of polymorphism is to impersonate another inherited class."
  },
  {
    "objectID": "java-exercises/Principles/01-abstraction.html",
    "href": "java-exercises/Principles/01-abstraction.html",
    "title": "Abstraction",
    "section": "",
    "text": "Class notes definition\n\n\n\nAbstraction is the process of focusing on the essential characteristics of an object, while ignoring the non-essential details.\n\n\n\n\n\n\n\n\nTODO\n\n\n\nCreate your own definition of abstraction\n\n\nThe main purpose of abstraction it to sort."
  },
  {
    "objectID": "project-management/scrum-management.html",
    "href": "project-management/scrum-management.html",
    "title": "Scrum management",
    "section": "",
    "text": "Here we’ll discuss some key topics regarding Scrum management of projects"
  },
  {
    "objectID": "project-management/scrum-management.html#sprints",
    "href": "project-management/scrum-management.html#sprints",
    "title": "Scrum management",
    "section": "Sprints",
    "text": "Sprints\n\nSprint 0 (It doesn’t exist, really!!)\nWhat this sprint isn’t:\n\nIt is not the phase in which the team is put together\n\nIn order to conduct a Sprint in the first place, a team must already be in place\n\nIt is not the phase for setting up infrastructure which should already be implemented or easily implemented on demand, but not as part of a Sprint Zero\nIt should not involve adding products to a backlog or Consider Planning as classical project with Gantt Diagrams plannings\n\nThe main goal of a Sprint Zero is to deliver some usable value that can be built upon by the next team.\nSprint Zeroes are required to:\n\nCreate the project’s skeleton, including research spikes\nKeep design minimal\nDevelop a small number of stories to completion\nBe low velocity and lightweight\n\nMore specifically, the deliverables of a Sprint Zero should be as follows:\n\nA usable piece of code, however small\nA minimal environment for writing code\nA prioritization of features or a list of stories\nA release plan assigning each story to a Sprint\nA plan for the most likely implementation of features\n\n\nKeywords of a Sprint Zero:\nLet’s take the example of the Library Laboratory SE03-01\n\n\n\n\n\n\n\nsprintZero\n\n Sprint Zero  \n\nSprint Zero\n\n Sprint Zero   \n\n1 - Project\n\n 1 - Project   \n\nSprint Zero–1 - Project\n\n   \n\n2 - DDD\n\n 2 - DDD   \n\nSprint Zero–2 - DDD\n\n   \n\n3 - UML\n\n 3 - UML   \n\nSprint Zero–3 - UML\n\n   \n\n4 - Code\n\n 4 - Code   \n\nSprint Zero–4 - Code\n\n   \n\nUse Case\n\n Use Case   \n\n1 - Project–Use Case\n\n   \n\nDocumentation\n\n Documentation   \n\n1 - Project–Documentation\n\n   \n\nMock-up\n\n Mock-up   \n\n1 - Project–Mock-up\n\n   \n\nOpen?\n\n Open Project?   \n\n1 - Project–Open?\n\n   \n\nVocabulary\n\n Vocabulary   \n\n2 - DDD–Vocabulary\n\n   \n\nPackages\n\n Packages   \n\n2 - DDD–Packages\n\n   \n\nModel\n\n Model   \n\n2 - DDD–Model\n\n   \n\nController\n\n Controller   \n\n2 - DDD–Controller\n\n   \n\nRefactor\n\n Refactor Domain   \n\n2 - DDD–Refactor\n\n   \n\nRelationships\n\n Relationships   \n\n3 - UML–Relationships\n\n   \n\nUtilities\n\n Utilities   \n\n4 - Code–Utilities\n\n   \n\nCore model\n\n Core model   \n\n4 - Code–Core model\n\n   \n\nManagers\n\n Managers   \n\n4 - Code–Managers\n\n   \n\nDependencies\n\n Dependencies   \n\n4 - Code–Dependencies\n\n   \n\nMaven\n\n Maven   \n\n4 - Code–Maven\n\n   \n\nRefactor\n\n Refactor Code   \n\n4 - Code–Refactor\n\n   \n\nTest\n\n Test   \n\n4 - Code–Test\n\n   \n\nGit\n\n Git   \n\n4 - Code–Git\n\n   \n\nUser Stories\n\n User Stories   \n\nUse Case–User Stories\n\n   \n\nQuarto\n\n Quarto   \n\nDocumentation–Quarto\n\n   \n\nObsidian\n\n Obsidian   \n\nDocumentation–Obsidian\n\n   \n\nNew Feature\n\n New Feature   \n\nMock-up–New Feature\n\n   \n\nCommon\n\n Common Language   \n\nVocabulary–Common\n\n   \n\nController–Managers\n\n   \n\nIf there isCode\n\n If there is Legacy Code   \n\nRefactor–If there isCode\n\n   \n\nRefactor–Refactor\n\n   \n\nComposition\n\n Composition   \n\nRelationships–Composition\n\n   \n\nInheritance\n\n Inheritance   \n\nRelationships–Inheritance\n\n   \n\nMultiplicity\n\n Multiplicity   \n\nRelationships–Multiplicity\n\n   \n\nBook\n\n Book   \n\nCore model–Book\n\n   \n\nBorrow\n\n Borrow   \n\nCore model–Borrow\n\n   \n\nUser\n\n User   \n\nCore model–User\n\n   \n\nlombok\n\n lombok   \n\nDependencies–lombok\n\n   \n\nJUnit\n\n JUnit   \n\nDependencies–JUnit\n\n   \n\nJupiter\n\n Jupiter   \n\nDependencies–Jupiter\n\n   \n\nfaker\n\n faker   \n\nDependencies–faker\n\n   \n\nMake Borrow\n\n Make Borrow   \n\nTest–Make Borrow\n\n   \n\nGitHub\n\n GitHub   \n\nGit–GitHub\n\n   \n\nCreate\n\n Create   \n\nfaker–Create\n\n   \n\n100 books\n\n 100 books   \n\nCreate–100 books\n\n   \n\n100 users\n\n 100 users   \n\nCreate–100 users\n\n  \n\n\n\n\n\n\n\n\nSprint 1\nWe’ll define multiple tasks in the backlog and assign priorities and complexity to each of them. Don’t worry about defining tasks that might not be needed, they should be removed if they aren’t addressed after some sprints:\nTemplate –&gt; Task name (priority) (complexity)\n\nSpring backlog:\n\nProject:\n\nBusiness Model (21) (13)\nUse cases (21) (13)\nDefine Release Plan:\n\nNumber of Sprints (21) (8)\nGoal for each Sprint (21) (8)\n\nMock-ups (13) (13)\nSecurity (21) (21)\nDeployment:\n\nProgramming languages and versions () ()\nDependencies () ()\nPipeline () ()\n\nDocumentation: (21) (13)\n\nGit:\n\nTechnology to use (GitHub, GitLab) (8) (5)\nStylebook: (13) (13)\n\nBranch names\nCommit texts and labels\n\nRoles (13) (8)\n\nWho reviews pull requests?\nWho can merge code?\nWho can push to production?\n\n\n\nScrum concepts: (13) (8)\n\nDefine “Done” task\n\n\nDomains:\n\nCommon language (21) (13)\nRethink Test Borrow by Console (5) (21)\n\nUML:\n\nFunctional diagram (21) (13)\nCore classes (21) (13)\nManager classes (13) (13)\n\nCode:\n\nSandbox: (21) (8)\nGit:\n\nInitialization (21) (8)\n\nRefactor user interface (13) (13)\nTest Borrow (13) (13)\nBook Manager (13) (8)\nBorrow Manager (13) (21)\nUser Manager (13) (8)\nCreate fakers for each Manager (13) (13)\nDeployment (21) (21)\n\n\n\nAfter that, we’ll work with a Kanban table to keep track of the status of each task:\n\nOptions:\n\nGitHub projects\nOpenProject"
  },
  {
    "objectID": "project-management/useful-questions.html",
    "href": "project-management/useful-questions.html",
    "title": "Useful questions",
    "section": "",
    "text": "Answering the useful (right?) questions\nQuestions that begin with the words why, who, what and how are necessary and paramount because they help to clarify information, to seek additional details, and to better understand a situation. Besides, they play a crucial role in facilitating communication and understanding.\nThese words are often used to ask open-ended questions, which are questions that cannot be answered with a simple yes or no. Asking open-ended questions allows for more in-depth conversation and debate and can help to uncover important information or insights.\n\n\n\n\n\n\nOverall, asking why, who, what and how can help to imporve communication, to facilitate decision-making, and to deepen understanding.\n\n\n\n\n\n\n\nflowchart\n    id1{Why: programming} --&gt; id1a[You love it]\n    id1 --&gt; id1b[You need it]\n    id1a --&gt; id2{Who: profiles}\n    id1c[Here you need some kind of guidance] --&gt; id2\n    id1b --&gt; id2\n    id2 --&gt;|Teacher? Senior?\\nElse, a coder| id3[What: sylabus]\n    id3 --&gt;|The what is helpless\\nif you don't know the for| id4[For what: skills]\n    id4 --&gt;|The second most important step\\nafter the 'why': the 'how'.\\nA bad 'how' may destroy your 'why'| id5[How: learning techniques]"
  },
  {
    "objectID": "project-management/project-life-cycle.html",
    "href": "project-management/project-life-cycle.html",
    "title": "What is the project lifecycle?",
    "section": "",
    "text": "The software development lifecycle (SDLC) is a process that describes the stages involved in creating and deployng software."
  },
  {
    "objectID": "project-management/project-life-cycle.html#planning",
    "href": "project-management/project-life-cycle.html#planning",
    "title": "What is the project lifecycle?",
    "section": "Planning",
    "text": "Planning\nThis stage involves identifying the goals and objectives of the software, as well as determining the resources and timelines required to develop it."
  },
  {
    "objectID": "project-management/project-life-cycle.html#design",
    "href": "project-management/project-life-cycle.html#design",
    "title": "What is the project lifecycle?",
    "section": "Design",
    "text": "Design\nIn this stage, the software’s architecture and user interface are created, and the functional and non-functional requirements are defined."
  },
  {
    "objectID": "project-management/project-life-cycle.html#test",
    "href": "project-management/project-life-cycle.html#test",
    "title": "What is the project lifecycle?",
    "section": "Test",
    "text": "Test\nThis stage involves the implementation of test-driven development (TDD). It starts by writing automated test cases based on the requirements and design of the software. The developer then writes the minimum amount of code needed to pass the test, and repeat this process until all the requirements are met."
  },
  {
    "objectID": "project-management/project-life-cycle.html#develop",
    "href": "project-management/project-life-cycle.html#develop",
    "title": "What is the project lifecycle?",
    "section": "Develop",
    "text": "Develop\nThe actual coding of the software takes place during this stage. This may involve writing code in a specific programming language or using certain development tools."
  },
  {
    "objectID": "project-management/project-life-cycle.html#maintain",
    "href": "project-management/project-life-cycle.html#maintain",
    "title": "What is the project lifecycle?",
    "section": "Maintain",
    "text": "Maintain\nOnce the software is tested and developed, it will be integrated into the primary source code through developer efforts, usually by leveraging training environments to detect further errors or defects."
  },
  {
    "objectID": "project-management/project-life-cycle.html#deploy",
    "href": "project-management/project-life-cycle.html#deploy",
    "title": "What is the project lifecycle?",
    "section": "Deploy",
    "text": "Deploy\nThe final stage is deployment, where the software is made available to users. This may involve installing the software on individual computers or deploying it to a server for multiple users to access."
  },
  {
    "objectID": "project-management/decision-making.html",
    "href": "project-management/decision-making.html",
    "title": "Decision Making",
    "section": "",
    "text": "From UMass Darthmouth:\n\nDecision making is the process of making choices by identifying a decision, gathering information, and assessing alternative resolutions.\nUsing a step-by-step decision-making process can help you make more deliberate, thoughtful decisions by organizing relevant information and defining alternatives. This approach increases the chances that you will choose the most satisfying alternative possible.\n\n\n\n\n7 Steps to Effective Decision Making"
  },
  {
    "objectID": "project-management/decision-making.html#step-0-go-for-small-iterations-of-work",
    "href": "project-management/decision-making.html#step-0-go-for-small-iterations-of-work",
    "title": "Decision Making",
    "section": "Step 0: Go for small iterations of work",
    "text": "Step 0: Go for small iterations of work\nFocusing on small, feasable units of work allows the team to quickly identify problems."
  },
  {
    "objectID": "project-management/decision-making.html#step-1-identify-the-decision",
    "href": "project-management/decision-making.html#step-1-identify-the-decision",
    "title": "Decision Making",
    "section": "Step 1: Identify the decision",
    "text": "Step 1: Identify the decision\nYou realize that you need to make a decision. Try to clearly define the nature of the decision you must make. This first step is very important"
  },
  {
    "objectID": "project-management/decision-making.html#step-2-gather-relevant-information",
    "href": "project-management/decision-making.html#step-2-gather-relevant-information",
    "title": "Decision Making",
    "section": "Step 2: Gather relevant information",
    "text": "Step 2: Gather relevant information\nCollect some pertinent information before you make your decision: what information is neeede, the best sources of information, and how to get it. This step involves both internal and external “work”. Some information is internal: you’ll seek it through a process of self-assessment. Other information is external: you’ll find it online, in books, from other people, and from other sources."
  },
  {
    "objectID": "project-management/decision-making.html#step-3-identify-the-alternatives",
    "href": "project-management/decision-making.html#step-3-identify-the-alternatives",
    "title": "Decision Making",
    "section": "Step 3: Identify the alternatives",
    "text": "Step 3: Identify the alternatives\nAs you collect information, you will probably identify several possible paths of action, or alternatives. You can also use your imagination and additional information to construct new alternatives. In this step, you will list all possible and desirable alternatives."
  },
  {
    "objectID": "project-management/decision-making.html#step-4-weigh-the-evidence",
    "href": "project-management/decision-making.html#step-4-weigh-the-evidence",
    "title": "Decision Making",
    "section": "Step 4: Weigh the evidence",
    "text": "Step 4: Weigh the evidence\nDraw on your information and emotions to imagine whati it would be like if you carried out each of the alternatives to the end. Evaluate whether the need identified in Step 1 would be met or resolved through the use of each alternative. As you go through this difficult internal process, you’ll begin to favor certain alternatives: those that seem to have a higher potential for reaching your goal. Finally, place the alternatives in a priority order, based upon your own value system."
  },
  {
    "objectID": "project-management/decision-making.html#step-5-choose-among-alternatives",
    "href": "project-management/decision-making.html#step-5-choose-among-alternatives",
    "title": "Decision Making",
    "section": "Step 5: Choose among alternatives",
    "text": "Step 5: Choose among alternatives\nOnce you have weighed all the evidence, you are ready to select the alternative that seems to be best one for you. You may even choose a combination of alternatives. Your choice in Step 5 may very likely be the same or similar to the alternative you placed at the top of your list at the end of Step 4."
  },
  {
    "objectID": "project-management/decision-making.html#step-6-take-action",
    "href": "project-management/decision-making.html#step-6-take-action",
    "title": "Decision Making",
    "section": "Step 6: Take action",
    "text": "Step 6: Take action\nYou’re now ready to take some positive action by beginning to implement the alternative you chose in Step 5."
  },
  {
    "objectID": "project-management/decision-making.html#step-7-review-your-decision-its-consequences",
    "href": "project-management/decision-making.html#step-7-review-your-decision-its-consequences",
    "title": "Decision Making",
    "section": "Step 7: Review your decision & its consequences",
    "text": "Step 7: Review your decision & its consequences\nIn this final step, consider the results of your decision and evaluate whether or not it has resolved the need you identified in Step 1. If the decision has not met the identified need, you may want to repeat certain steps of the process to make a new decision. For example, you might want to gather more detailed or somewhat different information or explore additional alternatives."
  },
  {
    "objectID": "team-projects/00-game-tracker.html",
    "href": "team-projects/00-game-tracker.html",
    "title": "First project - GameTracker",
    "section": "",
    "text": "For the Java Web Applications course team projects, at least 3 proposals of feasible projects shall be defined and presented each time. Each member of the team shall present them to the rest and the project to work on shall be chosen by all team members."
  },
  {
    "objectID": "team-projects/00-game-tracker.html#lakes-status-david-marchan",
    "href": "team-projects/00-game-tracker.html#lakes-status-david-marchan",
    "title": "First project - GameTracker",
    "section": "Lakes status (David Marchan)",
    "text": "Lakes status (David Marchan)\n\nWhat is it expected to do? Provides status info of lakes where to go fishing\nWhat is it for? Its main purpose is to help the user decide which lake would be more appropriate to go fishing\nWho is it for? Fishermen, fans of fishing and nature\nWhy would it be interesting to do? TODO\nHow would it be done?\n\nData acquisition…\nData engineering…\nData persistency…\nData representation…"
  },
  {
    "objectID": "team-projects/00-game-tracker.html#data-analysis-platform-marc",
    "href": "team-projects/00-game-tracker.html#data-analysis-platform-marc",
    "title": "First project - GameTracker",
    "section": "Data analysis platform (Marc)",
    "text": "Data analysis platform (Marc)\n\nWhat is it expected to do? Retrieve data from a data source and provide useful insights related to it\nWhat is it for? This allows to reach conclusions and take decisions based on actual facts and not speculations\nWho is it for? Any decision-making person regardless of their sector, be it market, entertainment, education, etc…\nWhy would it be interesting to do? Because it would be an entry point to such a powerful sector as the Data Analysis, that uses Machine Learning to create models for categorization, prediction, foresight, etc…\nHow would it be done?\n\nData acquisition would be done via API requests to public assets or using web scappers\nData engineering would be done with ETL (Extract, Transform and Load) processes\nData persistency would be achieved with relational databases (i.e. SQL, MariaDB…) for event-driven records (i.e. time-based information and historical data), or non-relational databases (noSQL, MongoDB, DynamoDB…) for any other type of document-based data (i.e. Information of movies, shows, sports teams, etc…)\nData representation would be done with a web application capable of graphically represent data sets. The user shall be able to modify the scope of the represented data and properly drill-down to obtain insight information"
  },
  {
    "objectID": "team-projects/00-game-tracker.html#game-tracker-victor",
    "href": "team-projects/00-game-tracker.html#game-tracker-victor",
    "title": "First project - GameTracker",
    "section": "Game Tracker (Victor)",
    "text": "Game Tracker (Victor)\n\nWhat is it expected to do? Provides info related to board games and other users that play them or have common interests\nWhat is it for? Its main purpose is to track the user experience as a board game player and offer match-making functionalities\nWho is it for? Board Games players, families, people that want to buy a game as a gift, etc…\nWhy would it be interesting to do? Statistics are always fun and data mining and analysis has proven to be very valuable in our society. Also, there’s a social component in sharing one’s games, experience and reviews, as well as the match-making aspect, where people can gather together to share their interests\nHow would it be done?\n\nData acquisition…\nData engineering…\nData persistency…\nData representation…"
  },
  {
    "objectID": "team-projects/00-game-tracker.html#ngo-tinder-david-maqueda",
    "href": "team-projects/00-game-tracker.html#ngo-tinder-david-maqueda",
    "title": "First project - GameTracker",
    "section": "NGO Tinder (David Maqueda)",
    "text": "NGO Tinder (David Maqueda)\n\nWhat is it expected to do? Provides info related to Non-governmental Organizations (NGO) and volunteers with common interests\nWhat is it for? Its main purpose is to act as a bridge between the organizations and the people who want to volunteer with them\nWho is it for? Volunteers that want to find NGO activities and demonstrations based on their interests\nWhy would it be interesting to do? Social movements are very diverse and it’s difficult to know which activities have the most affinity with each person. This app would help people to know the goals of each NGO and contribute to their causes with a better understanding.\nHow would it be done?\n\nData acquisition…\nData engineering…\nData persistency…\nData representation…"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Page description\nThis site is a compilation of all the knowledge achieved during CIFO courses, such as DevOps or Web Applications with Java.\n\n\nAbout the author\nHi! My name is Marc Palacín and I’m a Data Engineer, Software Engineer and hopefully a future DevOps engineer!\nI love tinkering with electronics and hardware, and process automation is my passion."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Index",
    "section": "",
    "text": "What is included in this page:\n\nDevOps guides:\nJava exercises: compilation of classnotes and Java laboratories\nProject Management: entries related to management frameworks, such as Scrum and Agile\nTeam projects: summary of all group projects done during the class\nWalkthrough: some Quarto sandbox pages\nAbout: page about the author"
  },
  {
    "objectID": "index.html#cifo-web-applications-course-documentation.",
    "href": "index.html#cifo-web-applications-course-documentation.",
    "title": "Index",
    "section": "",
    "text": "What is included in this page:\n\nDevOps guides:\nJava exercises: compilation of classnotes and Java laboratories\nProject Management: entries related to management frameworks, such as Scrum and Agile\nTeam projects: summary of all group projects done during the class\nWalkthrough: some Quarto sandbox pages\nAbout: page about the author"
  },
  {
    "objectID": "index.html#github-stats",
    "href": "index.html#github-stats",
    "title": "Index",
    "section": "GitHub Stats",
    "text": "GitHub Stats\n\nNumber of commits:\n\nd3 = require('d3')\ncontributors = await d3.json(\n  \"https://api.github.com/repos/protossgp32/CIFO-Web-Applications/stats/contributors\"\n)\n\ncommits = contributors.map(contributor =&gt; {\n  const author = contributor.author;\n  return {\n    \"Author\": author.login,\n    \"Number of commits\": contributor.total\n  }\n})\n\nInputs.table(commits, { sort: \"value\", reverse: true })"
  },
  {
    "objectID": "react-exercises/00-getting-started.html",
    "href": "react-exercises/00-getting-started.html",
    "title": "React: Getting started",
    "section": "",
    "text": "According to React official page:\n\n\n\n\nReact is very easy to use\nReact uses a Component Oriented Programming paradigm\nEach component returns a fragment"
  },
  {
    "objectID": "react-exercises/00-getting-started.html#what-is-react",
    "href": "react-exercises/00-getting-started.html#what-is-react",
    "title": "React: Getting started",
    "section": "",
    "text": "According to React official page:\n\n\n\n\nReact is very easy to use\nReact uses a Component Oriented Programming paradigm\nEach component returns a fragment"
  },
  {
    "objectID": "react-exercises/00-getting-started.html#install-node.js-and-npm-via-its-official-script",
    "href": "react-exercises/00-getting-started.html#install-node.js-and-npm-via-its-official-script",
    "title": "React: Getting started",
    "section": "Install Node.js and NPM via its official script",
    "text": "Install Node.js and NPM via its official script\nFollow the instructions in the Nodesource github repository to execute the installation script:\n\n\nNode.js installation on Debian-based OS\n\n# As root or sudo user\ncurl -fsSL https://deb.nodesource.com/setup_18.x | bash - &&\\\napt-get install -y nodejs\n\nEach Node.js version has its own installation script."
  },
  {
    "objectID": "react-exercises/00-getting-started.html#install-node.js-using-nvm",
    "href": "react-exercises/00-getting-started.html#install-node.js-using-nvm",
    "title": "React: Getting started",
    "section": "Install Node.js using NVM",
    "text": "Install Node.js using NVM\nNVM is Nodejs Version Manager, it allows to manage differnt Node.js versions.\nInstallation guide"
  },
  {
    "objectID": "react-exercises/00-getting-started.html#use-a-custom-script-to-automate-nvm-and-node.js-installation",
    "href": "react-exercises/00-getting-started.html#use-a-custom-script-to-automate-nvm-and-node.js-installation",
    "title": "React: Getting started",
    "section": "Use a custom script to automate NVM and Node.js installation",
    "text": "Use a custom script to automate NVM and Node.js installation\n\n\ninstall_react_framework.sh\n\n#!/bin/bash\n#   CIFO Web Applications - Software installation\n#   - This script install the required software for the course\n#   - Categories:\n#       - IDEs\n#       - Version Control Sofware\n#       - Documentation\n\nNODE_VERSION=0\n\nwhile getopts n: flag\ndo\n\tcase \"${flag}\" in\n\t\tn) NODE_VERSION=${OPTARG};;\n\tesac\ndone\n\n# Define the installation command\n# -qq flag prior to the install command reduces the output messages except for errors\n# -y after the install command is for non-interactive/unattended installations\nINSTALL=\"apt-get -qq install -y\"\nUPDATE=\"apt-get -qq update\"\n\n# Pre-requisites:\n# - Install download and GPG binaries\n# - Apt installation via HTTPS paths must also be installed\n#$INSTALL wget gpg curl apt-transport-https\n\n# NVM installation:\n# =================\nif [ -x \"$(command -v nvm)\" ]; then\n\techo \"Installing NVM...\"\n\t# Download and install NVM\n\tcurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash\n\t# Execute this if NVM is not available after installation script\n\texport NVM_DIR=\"${HOME}/.nvm\"\n\t[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n\t[ -s \"${NVM_DIR}/bash_completion\" ] && \\. \"${NVM_DIR}/bash_completion\" # This loads nvm bash_completion\n\nfi\n\n# Node.js installation\n# ====================\nif [[ ${NODE_VERSION} -ne 0 ]]; then\n\t# Execute this if NVM is not available after installation script\n\texport NVM_DIR=\"${HOME}/.nvm\"\n\t[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n\t[ -s \"${NVM_DIR}/bash_completion\" ] && \\. \"${NVM_DIR}/bash_completion\" # This loads nvm bash_completion\n\t# Install the desired version\n\techo \"Node.js version selected: ${NODE_VERSION}\"\n\tnvm install ${NODE_VERSION}\n\t# Use the installed version\n\tnvm use ${NODE_VERSION}\n\t# Check the version\n\tnode -v\n\t# Install npx\n\tnpm install npx\nfi\n\n# (Do not use this if installing NVM)\n# ===================================\n#if [[ ${NODE_VERSION} -ne 0 ]]; then\n#\techo \"Node.js version selected: ${NODE_VERSION}\"\n#\n#\t# Add Node.js PPA to the system\n#\tcurl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -\n#\n#\t# Update repositories\n#\t# ===================\n#\t$UPDATE\n#\n#\t# Install packages\n#\t# ================\n#\n#\t# Node.js\n#\t$INSTALL nodejs\n#fi"
  },
  {
    "objectID": "react-exercises/00-getting-started.html#start-a-new-react-project",
    "href": "react-exercises/00-getting-started.html#start-a-new-react-project",
    "title": "React: Getting started",
    "section": "Start a new React project",
    "text": "Start a new React project\nOfficial tutorial\nWe’ll be using npx command to initialize React projects.\nOnce done, execute npm start from the new project path to launch it and have a live webpage that updates on code changes.\nThe newly-created react project has the following structure:\n\nnode_modules: path with all the Node.js dependencies (do not push to Git!)\npublic: includes the public web assets such as the favicon.ico, the manifest.json and the index.html\n\nindex.html uses the manifest.json to populate some links in the &lt;head&gt; tag\n\nsrc: the source code of our app\n\nindex.js: our entrypoint, it imports the App component already created\nApp.js: our main app\nreportWebVitals.js: this defines the exposed metrics of our app for further observability\nsrc package also includes App.test.js for the App component"
  },
  {
    "objectID": "react-exercises/00-getting-started.html#install-dependencies-for-your-node.js-project",
    "href": "react-exercises/00-getting-started.html#install-dependencies-for-your-node.js-project",
    "title": "React: Getting started",
    "section": "Install dependencies for your Node.js project",
    "text": "Install dependencies for your Node.js project\nWe’ll be using NPM (Node Package Manager) to install Node.js dependencies."
  },
  {
    "objectID": "react-exercises/00-getting-started.html#react-project",
    "href": "react-exercises/00-getting-started.html#react-project",
    "title": "React: Getting started",
    "section": "React project",
    "text": "React project\n\nInstall linter\nFrom the React project path, execute:\n\n\nInstall eslint\n\nnpm install -g eslint"
  },
  {
    "objectID": "react-exercises/00-getting-started.html#vs-code-extensions",
    "href": "react-exercises/00-getting-started.html#vs-code-extensions",
    "title": "React: Getting started",
    "section": "VS Code extensions",
    "text": "VS Code extensions\n\nLinting and formatting\n\nESLint\nFollow this guide:\n\nGo to the Extensions Marketplace and search eslint by Microsoft.\nOnce installed, go to the Command Palette (Ctrl + Shift + P) and use the command ESLint: Create ESLint configuration\n\nThe resulting config is saved in the .eslintrc.js file in your project root\n\n\nESLint will now analyze open files and shows warnings of anti-patterns, code not following code conventions and more sophisticated analysis.\n\n\nPrettier\n\nPrettier - Code formatter\n\n\nPrettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.\n\n\n\n\nCSS tools\n\nCSS Peek\n\n\n\nPackages cost\n\nImport cost\n\n\nThis extension will display inline in the editor the size of the imported package. The extension utilizes webpack in order to detect the imported size."
  },
  {
    "objectID": "react-exercises/00-getting-started.html#web-browser-extensions",
    "href": "react-exercises/00-getting-started.html#web-browser-extensions",
    "title": "React: Getting started",
    "section": "Web browser extensions",
    "text": "Web browser extensions\n\nGoogle Chrome\nReact Developer Tools\n\n\nMozilla Firefox\nReact DevTools"
  },
  {
    "objectID": "react-exercises/labs/02-lab-re01-2.html",
    "href": "react-exercises/labs/02-lab-re01-2.html",
    "title": "React JS: Lab#RE01-2",
    "section": "",
    "text": "Link to class page\nMain objectives:\n\nWe’ll be uusing our own RESTful API in SpringBoot to create a React app that will display a list of publications\nWe will use the Axios library to make HTTP requests to the API and retrieve the data in JSON format\nWe will display the publication data in a table with fields that will depend on the publication type\nWe will also add a loading state to show the user that the app is retrieving data from the API\n\nThe lab will demonstrate how to use a RESTful API with React to build a functional web application"
  },
  {
    "objectID": "react-exercises/labs/02-lab-re01-2.html#booklist",
    "href": "react-exercises/labs/02-lab-re01-2.html#booklist",
    "title": "React JS: Lab#RE01-2",
    "section": "BookList",
    "text": "BookList\nNow the BookList component should request data from our SpringBoot API, so some things must be changed.\n\n\nBookList.jsx\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst BookList = () =&gt; {\n    const [books, setBooks] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    // useEffect hook ensures that the BookList component stays connected to the SpringBoot API while displayed on the page\n    useEffect(() =&gt; {\n        // Define the fetchBooks function (?)\n        const fetchBooks = async () =&gt; {\n            const response = await axios.get(\n                'http://localhost:9090/api/publications/books'\n            );\n            \n            const booksData = response.data;\n            setBooks(booksData);\n            setIsLoading(false);\n\n        };\n        // Invoke the fetchBooks function\n        fetchBooks();\n        // TODO: return a clean code function with cleanup code that disconnects from the SpringBoot API\n\n    }, []); // No dependencies required nor values from the component used inside of those functions\n\n    return (\n        &lt;&gt;\n            &lt;h1&gt;Books&lt;/h1&gt;\n            {isLoading ? (\n                &lt;p&gt;Loading...&lt;/p&gt;\n            ) : (\n                &lt;ul&gt;\n                    {books.map((book) =&gt; (\n                        &lt;li key={book.id}&gt;\n                            &lt;strong&gt;Title:&lt;/strong&gt; {book.title} &lt;br /&gt;\n                            &lt;strong&gt;Year:&lt;/strong&gt; {book.publicationDate} &lt;br /&gt;\n                            &lt;strong&gt;Author:&lt;/strong&gt; {book.author.firstName + \" \" + book.author.lastName} &lt;br /&gt;\n                            &lt;strong&gt;ISBN:&lt;/strong&gt; {book.isbn} &lt;br /&gt;\n                            &lt;strong&gt;Pages:&lt;/strong&gt; {book.pages} &lt;br /&gt;\n                            &lt;strong&gt;Genre:&lt;/strong&gt; {book.genre} &lt;br /&gt;\n                        &lt;/li&gt;\n                    ))}\n                &lt;/ul&gt;\n            )}\n        &lt;/&gt;\n    );\n};\n\nexport default BookList;"
  },
  {
    "objectID": "react-exercises/labs/02-lab-re01-2.html#main-objectives",
    "href": "react-exercises/labs/02-lab-re01-2.html#main-objectives",
    "title": "React JS: Lab#RE01-2",
    "section": "Main objectives:",
    "text": "Main objectives:\nWe’ll add some styling to the React app and use JavaScript to render objects in different fashions:\n\nGrid\nCard\nImage\nJavaScript\n\nThe lab will demonstrate how to use a RESTful API with React and use Components to render objects with CSS"
  },
  {
    "objectID": "react-exercises/labs/02-lab-re01-2.html#install-dependencies",
    "href": "react-exercises/labs/02-lab-re01-2.html#install-dependencies",
    "title": "React JS: Lab#RE01-2",
    "section": "Install dependencies",
    "text": "Install dependencies\nInstall Semantic through npm\n\n\nInstall Semantic\n\nnpm install semantic-ui"
  },
  {
    "objectID": "react-exercises/labs/02-lab-re01-2.html#modify-functions",
    "href": "react-exercises/labs/02-lab-re01-2.html#modify-functions",
    "title": "React JS: Lab#RE01-2",
    "section": "Modify functions",
    "text": "Modify functions\n\nBook\nBook will provide the parameters of any stored book. Make sure that Spring Boot API provides the required information.\n\n\n\n\n\n\nDo the same for the rest of publications\n\n\n\nSame for CD and DVD\n\n\n\n\nPerson\nPerson will be used to provide the parameters of any LibraryManager. Make sure that Spring Boot API provides the required information."
  },
  {
    "objectID": "react-exercises/labs/02-lab-re01-2.html#create-new-components",
    "href": "react-exercises/labs/02-lab-re01-2.html#create-new-components",
    "title": "React JS: Lab#RE01-2",
    "section": "Create new components",
    "text": "Create new components\n\nPersonCard\nGo to Semantic CSS page and look for the Card component. Analyse what parameters the Card expects and make sure that the SpringBoot API provides them when requesting Books. Then, create your own PersonCard to format it with the available LibraryMember attributes:\n\n\nsrc/Componets/PersonCard/index.jsx\n\nimport { Card, Image } from \"semantic-ui-react\";\n\n// Props are spreaded prior to pass them to the PersonCard component\nconst PersonCard = ({image, firstName, lastName, birthDate, role}) =&gt; {\n    return (\n        &lt;&gt;\n            &lt;Card style={{ margin: \"10px\" }}&gt;\n                &lt;Image src={image} wrapped ui={false} /&gt;\n\n                {/* Define the Card contents */}\n                &lt;Card.Content&gt;\n                    &lt;Card.Header&gt;\n                        {lastName}, {firstName}\n                    &lt;/Card.Header&gt;\n                    &lt;Card.Meta&gt;Birthdate: {birthDate}&lt;/Card.Meta&gt;\n                    &lt;Card.Description&gt;{firstName} is a {role}&lt;/Card.Description&gt;\n                &lt;/Card.Content&gt;\n            &lt;/Card&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default PersonCard;"
  },
  {
    "objectID": "react-exercises/labs/01-lab-re01-1.html",
    "href": "react-exercises/labs/01-lab-re01-1.html",
    "title": "React JS: Lab#RE01-1",
    "section": "",
    "text": "Link to class page\nMain objectives:\n\nWe’ll be uusing Open Library API, which is a RESTful API, to create a React app that will display a list of books\nWe will use the Axios library to make HTTP requests to the API and retrieve the data in JSON format\nWe will display the book data in a table with four fields for each book: title, year, ISBN, pages and author\nWe will also add a loading state to show the user that the app is retrieving data from the API\n\nThe lab will demonstrate how to use a RESTful API with React to build a functional web application."
  },
  {
    "objectID": "react-exercises/labs/01-lab-re01-1.html#install-development-environment",
    "href": "react-exercises/labs/01-lab-re01-1.html#install-development-environment",
    "title": "React JS: Lab#RE01-1",
    "section": "Install development environment",
    "text": "Install development environment\nFollow this guide to install NVM and Node.js."
  },
  {
    "objectID": "react-exercises/labs/01-lab-re01-1.html#creating-a-new-react-application",
    "href": "react-exercises/labs/01-lab-re01-1.html#creating-a-new-react-application",
    "title": "React JS: Lab#RE01-1",
    "section": "Creating a new React application",
    "text": "Creating a new React application\nFirst, create a path for your React applications and execute the following command:\n\n\nCreate new React project\n\nnpx create-react-app lab-re01-1"
  },
  {
    "objectID": "react-exercises/labs/01-lab-re01-1.html#install-required-dependencies-for-the-project",
    "href": "react-exercises/labs/01-lab-re01-1.html#install-required-dependencies-for-the-project",
    "title": "React JS: Lab#RE01-1",
    "section": "Install required dependencies for the project",
    "text": "Install required dependencies for the project\nNow go to the newly created project folder and install the following dependencies:\n\n\nInstall dependencies\n\ncd lab-re01-1\nnpm install axios"
  },
  {
    "objectID": "react-exercises/labs/01-lab-re01-1.html#booklist",
    "href": "react-exercises/labs/01-lab-re01-1.html#booklist",
    "title": "React JS: Lab#RE01-1",
    "section": "BookList",
    "text": "BookList\nWe’ll create a BookList component that retrieves 100 books from the Open Library API. The logic is stored in the BookList.jsx file:\n\n\nBookList.jsx\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst BookList = () =&gt; {\n    const [books, setBooks] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    // useEffect hook ensures that the BookList component stays connected to the Open Library API while displated on the page\n    useEffect(() =&gt; {\n        // Define the fetchBooks function (?)\n        const fetchBooks = async () =&gt; {\n\n            const response = await axios.get(\n                'https://openlibrary.org/search.json?q=*&limit=100'\n            );\n            const booksData = response.data.docs;\n            setBooks(booksData);\n            setIsLoading(false);\n\n        };\n        // Invoke the fetchBooks function\n        fetchBooks();\n        // TODO: return a clean code function with cleanup code that disconnects from the Open Library API\n\n    }, []); // No dependencies required nor values from the component used inside of those functions\n\n    return (\n        &lt;&gt;\n            &lt;h1&gt;Books&lt;/h1&gt;\n            {isLoading ? (\n                &lt;p&gt;Loading...&lt;/p&gt;\n            ) : (\n                &lt;ul&gt;\n                    {books.map((book) =&gt; (\n                        &lt;li key={book.key}&gt;\n                            &lt;strong&gt;Title:&lt;/strong&gt; {book.title} &lt;br /&gt;\n                            &lt;strong&gt;Year:&lt;/strong&gt; {book.publish_year} &lt;br /&gt;\n                            &lt;strong&gt;ISBN:&lt;/strong&gt; {book.isbn} &lt;br /&gt;\n                            &lt;strong&gt;Pages:&lt;/strong&gt; {book.number_of_pages} &lt;br /&gt;\n                            &lt;strong&gt;Author:&lt;/strong&gt; {book.author_name}\n                        &lt;/li&gt;\n                    ))}\n                &lt;/ul&gt;\n            )}\n        &lt;/&gt;\n    );\n};\n\nexport default BookList;\n\nWhat it basically does is:\n\nCreate a BookList function that asynchronously makes a request to the Open Library API and saves the retrieved books into the books variable via a useState hook\nAfter that, return the HTML snipped with all books rendered as a list"
  },
  {
    "objectID": "react-exercises/labs/01-lab-re01-1.html#update-the-index.js-file",
    "href": "react-exercises/labs/01-lab-re01-1.html#update-the-index.js-file",
    "title": "React JS: Lab#RE01-1",
    "section": "Update the index.js file",
    "text": "Update the index.js file\nWith the BookList component created, we’ll add it into the index.js file, that is our app entrypoint:\n\n\nBookList.jsx\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport BookList from './BookList';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  &lt;React.StrictMode&gt;\n    &lt;App /&gt;\n    &lt;BookList /&gt;\n  &lt;/React.StrictMode&gt;\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nTwo lines are responsible of implementing the BookList component:\n\n\n\nImporting BookList component\n\nimport BookList from './BookList'\n\nThis imports the component logic into the script\n\n\nRendering BookList component\n\n&lt;React.StrictMode&gt;\n    &lt;BookList /&gt;\n&lt;/React.StrictMode&gt;\n\nThis renders the component after the &lt;App /&gt; component"
  },
  {
    "objectID": "react-exercises/labs/03-lab-re02-1.html",
    "href": "react-exercises/labs/03-lab-re02-1.html",
    "title": "React JS: Lab#RE02-1",
    "section": "",
    "text": "Link to class page\nReact Router enables “client side routing”.\nClient side routing allows your app to update the URL from a link click without making another request for another document from the server.\n\n\nLink"
  },
  {
    "objectID": "react-exercises/labs/03-lab-re02-1.html#main-concepts-of-router",
    "href": "react-exercises/labs/03-lab-re02-1.html#main-concepts-of-router",
    "title": "React JS: Lab#RE02-1",
    "section": "",
    "text": "Link"
  },
  {
    "objectID": "react-exercises/labs/03-lab-re02-1.html#install-dependencies",
    "href": "react-exercises/labs/03-lab-re02-1.html#install-dependencies",
    "title": "React JS: Lab#RE02-1",
    "section": "Install dependencies",
    "text": "Install dependencies\n\nRouter:\n\n\n\nInstalling Router dependency\n\nnpm install react-router-dom"
  },
  {
    "objectID": "react-exercises/labs/03-lab-re02-1.html#create-the-project-directory-structure",
    "href": "react-exercises/labs/03-lab-re02-1.html#create-the-project-directory-structure",
    "title": "React JS: Lab#RE02-1",
    "section": "Create the project directory structure",
    "text": "Create the project directory structure\n\n\nProject structure\n\nsrc\n├── App.css\n├── App.js\n├── App.test.js\n├── components\n│   └── PersonCard\n│       └── index.jsx\n├── index.css\n├── index.js\n├── logo.svg\n├── pages\n│   ├── contact\n│   │   └── Contact.jsx\n│   ├── home\n│   │   └── Home.jsx\n│   └── people\n├── reportWebVitals.js\n├── route\n│   ├── Footer.jsx\n│   ├── Layout.jsx\n│   └── NoPage.jsx\n└── setupTests.js\n\n\n\n\n\n\n\nTODO: Complete the lab"
  },
  {
    "objectID": "react-exercises/labs/03-lab-re02-1.html#hooks",
    "href": "react-exercises/labs/03-lab-re02-1.html#hooks",
    "title": "React JS: Lab#RE02-1",
    "section": "Hooks",
    "text": "Hooks"
  },
  {
    "objectID": "react-exercises/labs/03-lab-re02-1.html#api-rest",
    "href": "react-exercises/labs/03-lab-re02-1.html#api-rest",
    "title": "React JS: Lab#RE02-1",
    "section": "API Rest",
    "text": "API Rest\nWe’ll use the public API JSONPlaceHolder to access data through an API. We’ll use axios to send HTTP requests to the API.\n\n\n\n\n\n\nQuestion: Why do we define the setData function as the useEffect dependency?"
  },
  {
    "objectID": "react-exercises/concepts/05-hooks.html#usestate",
    "href": "react-exercises/concepts/05-hooks.html#usestate",
    "title": "05 - React JS: Using hooks",
    "section": "useState",
    "text": "useState"
  },
  {
    "objectID": "react-exercises/concepts/05-hooks.html#usereducer",
    "href": "react-exercises/concepts/05-hooks.html#usereducer",
    "title": "05 - React JS: Using hooks",
    "section": "useReducer",
    "text": "useReducer\nA reducer is a function takes in the current state of an application and an action, and returns a new state. Reducers are often used in conjunction with a state manager library like Redux, which helps manage the state of a React application.\n\nInitialization\nuseReducer is a hook with the following parameters:\nuseReducer(reducer, intialArg, init?)\n\nreducer: function that specifies how the state gets updated\n\nIt must be pure, should take the state and action as arguments, and should return the next state\nState and action can be of any types\n\ninitialArg: value from which the initial state is calculated\n\nIt can be a value of any type\nCalculation of the initial state depends on the next init argument\n\n[optional] init: initializer function that specifies how the initial state is calculated\n\nIf not specified, initial state is set to initialArg\nOtherwise, initial state is set to the result of calling init(initialArg)\n\n\nIt is very similar to useState but it lets you move the state update logic from event handlers into a single function outside of your component.\n\n\nDispatch function\nuseReducer returns an array with exactly two values:\n\nThe current state: During the first render, it’s set to init(initialArg) or initialArg (if there’s no init)\nThe dispatch function that lets you update the state to a different value and trigger a re-render\n\nYou need to pass the action as the only argument to the dispatch function\ndispatch function doesn’t return anything\n\n\n\n\nExample 1\nTake this useReducer implementation as an example:\n\n\nuseReducer example\n\nimport { useReducer } from 'react';\n\nfunction reducer(state, action) {\n  if (action.type === 'incremented_age') {\n    return {\n      age: state.age + 1\n    };\n  }\n  throw Error('Unknown action.');\n};\n\nexport default function Counter() {\n  const [state, dispatch] = useReducer(reducer, { age: 42 });\n\n  return (\n    &lt;&gt;\n      &lt;button onClick={() =&gt; {\n        dispatch({ type: 'incremented_age' })\n      }}&gt;\n        Increment age\n      &lt;/button&gt;\n      &lt;p&gt;Hello! You are {state.age}.&lt;/p&gt;\n    &lt;/&gt;\n  );\n};\n\nLet’s analyse it:\n\nreducer: the reducer manages a state object with one field, age\n\nIf the action received is incremented_age, then it update the age value of the current state and returns a whole new state (take note of the JSON object returned with the age key inside)\nElse, throw an exception as the received action is unknown to the function\n\ndispatch: the trigger of the useReducer hook\n\nIt is called upon a button onClick method\nA JSON object with a single type key is passed to the function; this is the action that the reducer receives along the current state\n\n\n\n\nExample 2\n\n\n\n\n\n\nTODO: copy the example 2 from here\n\n\n\n\n\n\n\n\nExample 3 - PersonForm\n\n\nPersonForm.jsx\n\nimport { useReducer } from \"react\";\n// First, define an initial state to work it, although it is optional\nconst initialPerson = { name: \"John\", surname: \"Smith\", age: 25};\n\n// Then define the reducer function\nfunction reducer (state, action) {\n  // Apply the changes in your state based on the provided application\n  // Usually, the decision making is coded as a switch-cas or if-else conditional\n  switch (action.type) {\n    case \"increment_age\": {\n      // Always return a new state (JSON object)\n      return {\n          name: state.name,\n          surname: state.surname,\n          age: state.age + 1\n      };\n    }\n    case \"decrement_age\": {\n      // Always return a new state (JSON object)\n      return {\n          name: state.name,\n          surname: state.surname,\n          age: state.age - 1\n      };\n    }\n    case \"change_name\": {\n      // Always return a new state (JSON object)\n      // New values are included in the \"action\" parameter\n      return {\n          name: action.nextName,\n          surname: state.surname,\n          age: state.age\n      };\n    }\n    case \"change_surname\": {\n      // Always return a new state (JSON object)\n      // New values are included in the \"action\" parameter\n      return {\n          name: state.name,\n          surname: action.nextSurname,\n          age: state.age\n      };\n    }\n    default: {\n      throw Error(\"Unknown action: \" + action.type)\n    }\n  }\n};\n\n// Now define the PersonForm function that will return the render component\nexport default function PersonForm() {\n  // Initialize the useReducer hook\n  const [state, dispatch] = useReducer(reducer, initialPerson);\n\n  // Define every \"action\" function that the reducer will use\n  // - Function that increments the age of the person (initialPerson.age)\n  function handleButtonClickIncrement() {\n    // Invoke the dispatch function with a JSON object that contains the required params --&gt; This will be the \"action\"\n    dispatch({\n      type: \"increment_age\"\n    });\n  };\n\n  // - Function that decrements the age of the person (initialPerson.age)\n  function handleButtonClickDecrement() {\n    // Invoke the dispatch function with a JSON object that contains the required params --&gt; This will be the \"action\"\n    dispatch({\n      type: \"decrement_age\"\n    });\n  };\n\n  // - Function that updates the Name in the form based on the provided value\n  function handleInputChangeName(e) {\n    // Invoke the dispatch function with a JSON object that contains the required params --&gt; This will be the \"action\"\n    dispatch({\n      type: \"change_name\",\n      nextName: e.target.value\n    });\n  };\n  // - Function that updates the Surname in the form based on the provided value\n  function handleInputChangeSurname(e) {\n    // Invoke the dispatch function with a JSON object that contains the required params --&gt; This will be the \"action\"\n    dispatch({\n      type: \"change_surname\",\n      nextSurname: e.target.value\n    });\n  };\n\n  return (\n    // Start with a fragment (empty tag)\n    &lt;&gt;\n      &lt;h2&gt;Person Form - useReduce example&lt;/h2&gt;\n      &lt;hr /&gt;\n      &lt;input value={state.name} onChange={handleInputChangeName}/&gt;\n      &lt;input value={state.surname} onChange={handleInputChangeSurname}/&gt;\n      &lt;button onClick={handleButtonClickIncrement}&gt;Increment age&lt;/button&gt;\n      &lt;button onClick={handleButtonClickDecrement}&gt;Decrement age&lt;/button&gt;\n      &lt;p&gt;&lt;strong&gt;Name: &lt;/strong&gt;{state.name}&lt;/p&gt;\n      &lt;p&gt;&lt;strong&gt;Surname: &lt;/strong&gt;{state.surname}&lt;/p&gt;\n      &lt;p&gt;&lt;strong&gt;Age: &lt;/strong&gt;{state.age}&lt;/p&gt;\n    &lt;/&gt;\n  );\n}"
  },
  {
    "objectID": "react-exercises/concepts/05-hooks.html#useref",
    "href": "react-exercises/concepts/05-hooks.html#useref",
    "title": "05 - React JS: Using hooks",
    "section": "useRef",
    "text": "useRef"
  },
  {
    "objectID": "react-exercises/concepts/05-hooks.html#useeffect",
    "href": "react-exercises/concepts/05-hooks.html#useeffect",
    "title": "05 - React JS: Using hooks",
    "section": "useEffect",
    "text": "useEffect\n\nOfficial docs:\n\nuseEffect is a hook that doesn’t depend on its component’s render lifecycle.\n\nParameters\nuseEffect accepts two arguments. The second argument is optional.\nuseEffect(setup, dependencies)\nwhere:\n\nsetup: function with the effect’s logic\n\nThis function may also optionally return a clean-up function (A function that is remembered and launched on the next re-render if dependencies have changed)\nWhen the component is first added to the DOM, React will run the setup function\nAfter every re-render with changed dependencies, React will first run the clean-up function (when provided) with the old values, and then run the setup function with the new values\n\nThis means that React remembers the clean-up function and executes it before running the effect again\n\nOnce the component is removed from the DOM, React will run your cleanup function one last time\n\n(optional) dependencies: list of all reactive values referenced inside the setup code\n\nReactive values include props, state and all the variables and functions declared directly inside your component body\nThese are the ones that trigger the useEffect: when no dependencies are defined, the useEffect is triggered…\nDependency array properties:\n\nOptional: if not specified, useEffect runs after each render\nEmpty array: then the useEffect runs once after the initial render\n\n\n\nSame explanation [from ReactJS docs:]\n\nReact calls your setup and cleanup functions whenever it’s necessary, which may happen multiple times:\n\nYour setup code runs when your component is added to the page (mounts).\nAfter every re-render of your component where the dependencies have changed:\n\n\nFirst, your cleanup code runs with the old props and state.\nThen, your setup code runs with the new props and state.\n\n\nYour cleanup code runs one final time after your component is removed from the page (unmounts).\n\n\n\n\nExample 1\nLet’s see an example:\n\n\nApp.js\n\nimport { useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n  // Define a useState to manage the serverUrl\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n  // Define a useEffect to manage connections to the ChatRoom\n  useEffect(() =&gt; {\n      const connection = createConnection(serverUrl, roomId);\n      connnection.connect();\n      // Now define the cleanup code, that will be the responsible of disconnecting when any of the dependencies change\n      // --&gt; This way we ensure that no connections are left unhandled\n      return () =&gt; {\n        connection.disconnect();\n      };\n    }, [serverUrl, roomId]); // Dependencies are both the serverUrl and roomId\n  // Do something else...\n}\n\nwhere:\n\nsetup function creates the connection to the serverUrl and a specified roomId\ndependencies here are both the serverUrl and the roomId, meaning that if any of them\n\n\n\nExample 2\nAnother example:\nimport React, { useState, useEffect } from \"react\";\n\nconst App = () =&gt; {\n  // Define a useState to control the message state\n  const [message, setMessage] = useState(\"Hi there, how are you?\");\n  // Define a useEffect to change the message value\n  useEffect(() =&gt; {\n      // Each time a dependency changes, useEffect will launch the setTimeout\n      // Wait for 6 secs and then change the message\n      setTimeout(() =&gt; {\n        setMessage(\"I'm fine, thanks!\");\n      }, 6000);\n  }, []);\n\n  return &lt;h1&gt;{message}&lt;/h1&gt;;\n};\n\nexport default App;\n\n\n\n\n\n\nTODO: explain this example\n\n\n\n\n\n\n\n\nExample 3: useEffect with dependencies\nYet another example:\nimport React, { useState, useEffect } from \"react\";\n\nconst App = () =&gt; {\n  const [message, setMessage] = useState(\"Message 1: Hi there, how are you?\");\n  const [message2, setMessage2] = useState(\"This is message 2\");\n\n  const handleClick = (event) =&gt; {\n    setMessage2(\"New message 2\");\n  };\n\n  useEffect(() =&gt; {\n    console.log(\"trigger use effect hook\");\n\n    setTimeout(() =&gt; {\n      setMessage(message2);\n    }, 6000);\n    console.log(\"end of useEffect\");\n  }, [message2]);\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;{message}&lt;/h1&gt;\n      &lt;h2&gt;New message: {message2}&lt;/h2&gt;\n      &lt;button onClick={handleClick}&gt;Update message2&lt;/button&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default App;\nIn this example, the useEffect is called once on component mounting (first render), and also with any change on the message2 state:\n\nWe can change the message2 state any time by clicking on the Update message2 button:\n\nUpdate message2 button calls handleClick\nhandleClick updates the message2 state to \"New message 2\"\nuseEffect syncs with message2 and runs again, updating the message state to the value of message2\n\n\n\n\nExample 4: combination of useReducer, useEffect and useRef hooks:\nDoc page\n\n\nTimer.jsx\n\n/*\n    Timer example: combination of useRef, useReducer, and useEffect\n*/\nimport { useRef, useReducer, useEffect } from \"react\";\n\n// Define an initialState of the timer\nconst initialTimerState = {\n    isRunning: false,\n    time: 0\n}\n\n// Define the reducer function that manages the features of the timer\nfunction reducer(state, action) {\n    switch (action.type) {\n        case \"start\":\n            // Change the 'isRunning' value to true\n            // --&gt; This will trigger the useEffect and set an interval task to update the time each second\n            return {\n                ...state,\n                isRunning: true\n            };\n        case \"stop\":\n            // Change the 'isRunning' value to false\n            // --&gt; This will trigger the useEffect again and clear the previously defined interval\n            return {\n                ...state,\n                isRunning: false\n            };\n        case \"reset\":\n            // Returns the initial state of the timer\n            // --&gt; This will trigger the useEffect if the isRunning state changes; else, it won't need\n            return initialTimerState;\n        case \"tick\":\n            // Returns the updated state.time value\n            // --&gt; This WON'T trigger the useEffect as the isRunning value won't change\n            return {\n                ...state,\n                time: state.time + 1\n            };\n        default:\n            // Throw an error for any unexpected value\n            throw new Error();\n    }\n}\n\n// Define the Timer main function\nexport default function Timer() {\n    // First off, initialize a timer state and its reducer function\n    // --&gt; The reducer will be the previously defined function that will manage the behaviour of the Timer\n    // --&gt; We also provide the desired initialTimerState\n    const [state, dispatch] = useReducer(reducer, initialTimerState);\n    // Then, define a reference value (idRef) using the `useRef` hook to handle the time value update\n    const idRef = useRef(0);\n\n    // Define the useEffect hook that updates the lifecycle of the timer\n    useEffect(() =&gt; {\n        // if 'state.isRunning' changes to false, there's no need to do anything. Reasons:\n        // --&gt; The cleanup code from the \"start\" business logic already clears the \"setInterval\"\n        // --&gt; The return here only serves to avoid executing the rest of the code\n        if (!state.isRunning) {\n            //\n            return;\n        };\n\n        // Set the idRef current value to the initialization of a new interval\n        // --&gt; This interval is the responsible of calling the useReducer hook with the 'tick' action type\n        console.log(\"Starting Timer\");\n        idRef.current = setInterval(\n            () =&gt; dispatch(\n                    {\n                        type: \"tick\"\n                    }), 1000); // Set the interval value to 1 sec\n        \n        // Define the CLEANUP code that runs on re-rendering when dependencies have changed\n        // --&gt; This function is stored in memory and when executed it uses the old props and state\n        return () =&gt; {\n            console.log(\"Stopping Timer\");\n            console.log(idRef.current);\n            clearInterval(idRef.current);\n            idRef.current = 0;\n            console.log(idRef.current);\n        }\n\n    }, [state.isRunning]); // useEffect will only run once on component creation/mount and each time the value of 'state.isRunning' changes\n\n    // Return the HTML snippet\n      // https://www.w3schools.com/colors/colors_shades.asp\n  return (\n    &lt;div style={{ backgroundColor: \"#D0D0D0\", padding: \"12px\" }}&gt;\n      &lt;h2&gt;Timer - combination of useEffect (with cleanup code), useReducer and useState hooks &lt;/h2&gt;\n      &lt;div\n        style={{\n          backgroundColor: \"#F0F0F0\",\n          boxShadow: \"0 4px 20px 0 rgba(0,0,0,0.8)\",\n          transition: \"0.3s\",\n          width: \"40%\",\n          borderRadius: \"5px\",\n          padding: \"12px\",\n          textAlign: \"center\",\n          fontSize: \"20px\"\n        }}\n      &gt;\n        {/* 'state.time' is the only state value that changes without user intervention and will trigger a re-render of this component by itself */}\n        {state.time}s\n      &lt;/div&gt;\n      &lt;br /&gt;\n      &lt;div style={{ display: \"flex\" }}&gt;\n        &lt;button\n          style={{ margin: \"8px\" }}\n          onClick={() =&gt; dispatch({ type: \"start\" })}\n        &gt;\n          Start\n        &lt;/button&gt;\n        &lt;button\n          style={{ margin: \"8px\" }}\n          onClick={() =&gt; dispatch({ type: \"stop\" })}\n        &gt;\n          Stop\n        &lt;/button&gt;\n        &lt;button\n          style={{ margin: \"8px\" }}\n          onClick={() =&gt; dispatch({ type: \"reset\" })}\n        &gt;\n          Reset\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n    \n\n\n\nSynchronizing with Effects\n\n\n\n\n\n\nSynchronize is a key-word\n\n\n\n\nThe question is not ‘when does this effect run’, the question is ‘with which state does this effect synchronize’ - Ryan Florence"
  },
  {
    "objectID": "react-exercises/concepts/05-hooks.html#usecontext",
    "href": "react-exercises/concepts/05-hooks.html#usecontext",
    "title": "05 - React JS: Using hooks",
    "section": "useContext",
    "text": "useContext"
  },
  {
    "objectID": "react-exercises/concepts/05-hooks.html#custom-hooks",
    "href": "react-exercises/concepts/05-hooks.html#custom-hooks",
    "title": "05 - React JS: Using hooks",
    "section": "Custom hooks",
    "text": "Custom hooks"
  },
  {
    "objectID": "react-exercises/concepts/05-hooks.html#only-call-hooks-at-the-top-level",
    "href": "react-exercises/concepts/05-hooks.html#only-call-hooks-at-the-top-level",
    "title": "05 - React JS: Using hooks",
    "section": "Only call hooks at the top level",
    "text": "Only call hooks at the top level"
  },
  {
    "objectID": "react-exercises/concepts/05-hooks.html#only-call-hooks-from-react-functions",
    "href": "react-exercises/concepts/05-hooks.html#only-call-hooks-from-react-functions",
    "title": "05 - React JS: Using hooks",
    "section": "Only call hooks from React Functions",
    "text": "Only call hooks from React Functions"
  },
  {
    "objectID": "react-exercises/concepts/00-principles.html",
    "href": "react-exercises/concepts/00-principles.html",
    "title": "00 - React JS: Principles",
    "section": "",
    "text": "React introduces inmutability in its code"
  },
  {
    "objectID": "react-exercises/concepts/00-principles.html#overview",
    "href": "react-exercises/concepts/00-principles.html#overview",
    "title": "00 - React JS: Principles",
    "section": "Overview",
    "text": "Overview\nMain features:\n\nSingle-page application (SPA) framework: it allows developers to create web applications that load a single HTML page and dynamically update the page in response to user actions without reloading the page\n\nThis makes React applications faster and more responsive than traditional web applications\n\nComponents: in React, everything is a component\n\nComponents are small, reusable pieces of code that can be easily combined to create complex user interfaces\n\nVirtual DOM: React uses a virtual DOM (Document Object Model) to improve the performance of components\n\nIt is a lightweight in-memory representation of the actual DOM\nIt allows React to update only the specific components that have changed, instead of re-rendering the entire page\n\nJSX: syntax extension to JavaScript that allows developers to write HTML-like code that can be compiled into JavaScript.\n\nThis allows developers to use familiar HTML tags and attributes to build React components\nIt makes it easier to write and understand React code\n\nState: React components have a built-in state object that stores the local data of a component\n\nThe state of a component can be updated in response to user actions or other events\nThe updated state will automatically be reflected in the user interface\n\nProps: In React, components can receive data from their parent components through props, which are essentially input parameters that allow components to be customized and reused\n\nProps can be used to pass data, functions, or any other type of information to a child component\n\nRouting: React Router is a popular library that provides routing capabilities to React applications\n\nIt allows developers to define the different routes of the application\nIt allows developers to map each route to a specific component\nThis makes it possible to create a single-page application with multiple pages and views, without reloading the page"
  },
  {
    "objectID": "react-exercises/concepts/00-principles.html#with-jsx-and-hooks-comes-order-in-just-one-document",
    "href": "react-exercises/concepts/00-principles.html#with-jsx-and-hooks-comes-order-in-just-one-document",
    "title": "00 - React JS: Principles",
    "section": "With JSX and Hooks comes order in just one document",
    "text": "With JSX and Hooks comes order in just one document\n\n\n\n\n\n\nNo need for classes\n\n\n\nHooks are a new feature (added in React 16.8) that allows developers to use state and other React features without writing a class.\n\n\nHooks and JSX are powerful tools for simplifying and improving the way you write React components, and they can be used to combine the HTML, CSS, business logic, model and navigation code of a component into a single, cohesive unit.\n\n\nReact example with hooks\n\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './styles.css';\n\nfunction ExampleComponent(props) {\n  const { data } = props;\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div className=\"example-component\"&gt;\n      &lt;h1&gt;Example Component&lt;/h1&gt;\n      &lt;p&gt;{data.description}&lt;/p&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Click me\n      &lt;/button&gt;\n      &lt;Link to=\"/\"&gt;Back to Home&lt;/Link&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default ExampleComponent;\n\nExplanation:\n\nThe current state is stored in the count variable\nThe function to update the state is stored in the setCount variable"
  },
  {
    "objectID": "react-exercises/concepts/03-designing-an-app.html#async",
    "href": "react-exercises/concepts/03-designing-an-app.html#async",
    "title": "03 - React JS: Designing an App",
    "section": "async",
    "text": "async"
  },
  {
    "objectID": "react-exercises/concepts/03-designing-an-app.html#events",
    "href": "react-exercises/concepts/03-designing-an-app.html#events",
    "title": "03 - React JS: Designing an App",
    "section": "Events",
    "text": "Events"
  },
  {
    "objectID": "react-exercises/concepts/03-designing-an-app.html#router",
    "href": "react-exercises/concepts/03-designing-an-app.html#router",
    "title": "03 - React JS: Designing an App",
    "section": "Router",
    "text": "Router"
  },
  {
    "objectID": "react-exercises/concepts/02-project-structure.html",
    "href": "react-exercises/concepts/02-project-structure.html",
    "title": "02 - React JS: Project structure",
    "section": "",
    "text": "Introduction\nRead this article for further insights\n\n\nHow to structure a React project?\nThe folder structure should look like this:\n\n\n\nReact - Folder structure\n\n\n\nAssets: it contains assets of our project\n\nIt consists of images and styling files\nHere we can store our global styles\nWe are centralizing the project so we can store the page-based or component-based styles over here, but we can also keep style according to the pages folder or component folder. This is up to the developer’s comfortability\n\nLayouts: it contains the available layouts of the whole project, such as header, footer, etc…\n\nStored layouts can be called from any file\n\nComponents: building blocks of any React project\n\nThis folder consists of a collection of UI components like buttons, modals, inputs, loader, etc… that can be used across various files in the project\nEach component should consist of a test file to do a unit test as it will be widely used in the project\n\nPages: each file in the pages folder represent a React contains a route\n\nA Page can contain its subfolder\nEach page has its state and is usually used to call an async operation\nA Page usually consists on various grouped components\n\nMiddleware: allows for side effects in our application\n\nredux uses it (?)\nAny custom middleware is kept here\n\nRoutes: contains all routes of the application\n\nIt consists of private, protected, and all other type of routes\nHere we can even call sub-routes\n\nConfig: configuration file where we store environment variables\n\nFilename: config.js\nThis file shall be used to set up multi-environment configurations in your application\n\nServices: included in the project if we use redux.\n\nIt contains 3 folders:\n\nactions: called in almost all the pages\nreducers: called in almost all the pages\nconstant:\n\nCreate actions, reducers and constants according to Pages name\n\nUtils: consists of some repeatedly used functions that are commonly used in the project\n\nIt should contain only common js functions and objects like dropdown options, regex condition, data formatting, etc…"
  },
  {
    "objectID": "react-exercises/concepts/01-css-semantic.html",
    "href": "react-exercises/concepts/01-css-semantic.html",
    "title": "01 - React JS: CSS Libraries - Semantic",
    "section": "",
    "text": "React has a lot of CSS libraries, being Semantic one of these."
  },
  {
    "objectID": "react-exercises/concepts/01-css-semantic.html#install-the-semantic-dependency",
    "href": "react-exercises/concepts/01-css-semantic.html#install-the-semantic-dependency",
    "title": "01 - React JS: CSS Libraries - Semantic",
    "section": "Install the Semantic dependency",
    "text": "Install the Semantic dependency\nIf you only want to use Semantic as a dependency and use the default theme, install semantic-ui-css or semantic-ui-less:\n\n\nInstalling Semantic dependencies\n\n# From the React project root\n# Install the Semantic UI dependency\nnpm install semantic-ui-react\n# Install the lightweight CSS dependency\nnpm install semantic-ui-css\n# or...\nnpm install semantic-ui-less"
  },
  {
    "objectID": "react-exercises/concepts/01-css-semantic.html#importing-components",
    "href": "react-exercises/concepts/01-css-semantic.html#importing-components",
    "title": "01 - React JS: CSS Libraries - Semantic",
    "section": "Importing components",
    "text": "Importing components\nIn the main file, import the semantic-ui-css library:\n\n\nindex.js\n\nimport \"semantic-ui-css/semantic.min.css\";\n\nImport the components that you need from the semantic-ui-react library:\n\n\nImporting components from Semantic library\n\nimport { Card, Image } from 'semantic-ui-react';\n\n// Now we can use the components from Semantic\nconst PersonCard = ({person}) =&gt; (\n    &lt;Card&gt;\n        &lt;Image src={person.image} wrapped ui={false} /&gt;\n        &lt;Card.Content&gt;\n            &lt;Card.Header&gt;{`${person.name} + \" \" + ${person.surname}`}&lt;/Card.Header&gt;\n            &lt;Card.Meta&gt;\n                &lt;span className='age'&gt;Age: {person.age}&lt;/span&gt;\n            &lt;/Card.Meta&gt;\n            &lt;Card.Description&gt;\n                Job: {person.job}\n            &lt;/Card.Description&gt;\n        &lt;/Card.Content&gt;\n        &lt;Card.Content extra&gt;\n        &lt;a&gt;\n            &lt;Icon name='user' /&gt;\n            {person.friends} friends\n        &lt;/a&gt;\n        &lt;/Card.Content&gt;\n    &lt;/Card&gt;\n);\n\n// Export the PersonCard object\nexport default PersonCard\n\nAfter that, the component PersonCard is reusable in any other React component:\n\n\nUsing the new PersonCard component\n\nReactDOM.render(\n    &lt;App&gt;\n        &lt;PersonCard\n            person = ({\n                image: \"https://i.imgur.com/MK3eW3As.jpg\",\n                name: 'Katherine',\n                surname: 'Johnson',\n                age: 101,\n                job: 'mathematician',\n                friends: 2\n            }) /&gt;\n    &lt;/App&gt;\n)"
  },
  {
    "objectID": "react-exercises/concepts/04-debugging-reactjs.html",
    "href": "react-exercises/concepts/04-debugging-reactjs.html",
    "title": "04 - React JS: Debugging an App",
    "section": "",
    "text": "Several steps to make the debugging process easier:\n\nCheck the Browser’s console: Look for any error message error in the browser’s console\n\nOften, errors will be logged in the console, which will give you an idea of where to start debugging\nYou can learn more about this here: MDN Web Docs - Console\n\nUse React Developer Tools: browser extension that provides a suite of tools for debugging and profiling React components\n\nIt allows to inspect React component hierarchies and track the flow of data between components\nLearn more about using React Developer Tools here: React Developer Tools\n\nUse console.log(): Place console.log() statements through your code to print out variables and see how they change as the code executes\n\nLearn more about using console.log() here: MDN Web Docs - Debugging JavaScript\n\nBreakpoints: Set breakpoints in your code using the browser’s developer tools or an integrated development environment (IDE) like Visual Studio Code\n\nThis allows you to pause the execution of your code and step through it line by line, inspecting variables and the state of your components\nLearn more about using breakpoints here: Chrome DevTools - Debugging JavaScript"
  },
  {
    "objectID": "react-exercises/concepts/04-debugging-reactjs.html#debugging-reactjs",
    "href": "react-exercises/concepts/04-debugging-reactjs.html#debugging-reactjs",
    "title": "04 - React JS: Debugging an App",
    "section": "",
    "text": "Several steps to make the debugging process easier:\n\nCheck the Browser’s console: Look for any error message error in the browser’s console\n\nOften, errors will be logged in the console, which will give you an idea of where to start debugging\nYou can learn more about this here: MDN Web Docs - Console\n\nUse React Developer Tools: browser extension that provides a suite of tools for debugging and profiling React components\n\nIt allows to inspect React component hierarchies and track the flow of data between components\nLearn more about using React Developer Tools here: React Developer Tools\n\nUse console.log(): Place console.log() statements through your code to print out variables and see how they change as the code executes\n\nLearn more about using console.log() here: MDN Web Docs - Debugging JavaScript\n\nBreakpoints: Set breakpoints in your code using the browser’s developer tools or an integrated development environment (IDE) like Visual Studio Code\n\nThis allows you to pause the execution of your code and step through it line by line, inspecting variables and the state of your components\nLearn more about using breakpoints here: Chrome DevTools - Debugging JavaScript"
  },
  {
    "objectID": "miscellaneous/weekly-planning/06-week-06.html",
    "href": "miscellaneous/weekly-planning/06-week-06.html",
    "title": "06 - Week 06",
    "section": "",
    "text": "Things to accomplish:\n\nCreate a REST API application with SpringBoot\nCreate the first CI/CD pipeline for a Spring Boot project\nComplete my tasks for the Team Project in Sprint 2\nDeeper understanding of the DevOps methodology\n\n\n\n\n\nCategories:\n\nClass Project (CP)\nTeam Project (TP)\nContinuous Integration/Continuous Delivery (CI/CD)\nDevOps Learning (DOL)\nPlanning & MindSet (PMS)\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\n\n\n\n\nCATEGORY\nTASK\nWEIGHT\nINTRODUCED ON\n\n\n\n\nCP\nCreate Library REST client\n5\nWeek 1\n\n\nCP\nUnify User HTML forms\n5\nWeek 1\n\n\nCP\nUnify Publications creation\n8\nWeek 1\n\n\nCP\nMigrate H2 to another DB\n13\nWeek 1\n\n\nCP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nCP\nUpdate soft. script with Postman\n8\nWeek 2\n\n\nCP\nSwagger and Mockito into Library\n8\nWeek 2\n\n\nCP\nEnable logging in Java\n8\nWeek 2\n\n\nCP\nQuarto: automate weekly planning\n13\nWeek 2\n\n\nCP\nFinish MongoDB tutorials\n8\nWeek 4\n\n\nCP\nFinish React Lab-RE01-1\n8\nWeek 5\n\n\nCP\nFinish React Lab-RE02-1\n8\nWeek 5\n\n\nCI/CD\nLearn GitHub Actions\n13\nWeek 1\n\n\nCI/CD\nInstall Jenkins\n8\nWeek 1\n\n\nCI/CD\nCreate staging environment\n13\nWeek 1\n\n\nTP\nFinish User Entity\n13\nWeek 1\n\n\nTP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nTP\nEnable logging\n5\nWeek 2\n\n\nTP\nCreate REST API\n5\nWeek 2\n\n\nTP\nFinish GamesCollection\n8\nWeek 5\n\n\nDOL\nDeploy workloads on Kubernetes\n13\nWeek 1\n\n\nDOL\nLearn about OpenStack\n21\nWeek 1\n\n\nDOL\nLearn about OKD\n21\nWeek 2\n\n\nDOL\nLearn about Argo workflows\n21\nWeek 2\n\n\nDOL\nLearn about SQL and Postgres\n21\nWeek 2\n\n\nDOL\nLearn about Terraform\n21\nWeek 3\n\n\nDOL\nLearn about Ansible\n21\nWeek 3\n\n\nDOL\nInstall a SMTP server\n13\nWeek 1\n\n\nDOL\nFinish Penpot deployment and documentation\n5\nWeek 3\n\n\nMSX\nTest wired adapter\n5\nWeek 3\n\n\nPMS\nWeekly planning\n8\nWeek 1\n\n\nPMS\nWeekly retrospective\n8\nWeek 1\n\n\nPMS\nMindSet & Lectures\n5\nWeek 1\n\n\n\n\n\n\n\nImportant and urgent:\n\nCP: Swagger and Mockito into Library (W8)\nCP: Finish MongoDB tutorials (W8)\nTP: Finish User Entity (W13)\nTP: Update functional diagrams (W8)\nDOL: Learn about OKD (21)\nDOL: Learn about Argo workflows (21)\nDOL: Learn about Terraform (21)\nDOL: Learn about Ansible (21)\nPMS: Weekly planning (W8)\n\nImportant but not urgent:\n\nCP: Create missing Unit Tests (W8)\nCP: Create Library REST client (W5)\nCP: Migrate H2 to another DB (W13)\nCP: Update soft. script with Postman (W8)\nCP: Enable logging in Java (W8)\nTP: Create missing Unit Tests (W8)\nTP: Enable logging (W5)\nTP: Create REST API (W5)\nCI/CD: Learn GitHub Actions (W13)\nCI/CD: Create staging environment (W13)\nDOL: Deploy workloads on Kubernetes (W13)\nDOL: Learn about SQL and Postgres (W21)\nDOL: Learn about OpenStack (W21)\nMSX: Test wired adapter (W5)\nPMS: Weekly retrospective (W8)\nPMS: MindSet & Lectures (W5)\n\nNot important but urgent:\n\nDOL: Install a SMTP server (W13)\nCI/CD: Install Jenkins (W8)\n\nNeither important nor urgent:\n\nDOL: Finish Penpot deployment and documentation (W5)\nCP: Unify User HTML forms (W5)\nCP: Unify Publications creation (W8)\n\n\n\n\n\nEach week, define tasks for each energy slot of the day (3 each day, 5 days a week). At the end of the week, review it to see how many of the tasks have been accomplished. Once done, plan the next week taking into account the feedback from the previous week:\n\n\n\n\n\n\n\n\n\n\n\nWEEK 3\nMONDAY (W34)\nTUESDAY (W26)\nWEDNESDAY (W32)\nTHURSDAY (W34)\nFRIDAY (W37)\n\n\n\n\nMorning\nPMS: Weekly planning (W8)\n\nCP: Enable logging in Java (W8) TP: Finish User Entity (W13)\nCP: Swagger and Mockito into Library (W8)\nTP: Update functional diagrams (W8)\n\n\nAfternoon\n\n\nDOL: Learn about Argo workflows (21)\nDOL: Learn about OKD (21)\nTP: Enable logging (W5)\n\n\nEvening\n\n\nCP: Create missing Unit Tests (W8) CP: Finish MongoDB tutorials (W8)\nTP: Create missing Unit Tests (W8)\nPMS: Weekly retrospective (W8)\n\n\n\n\n\n\nMake a retrospective of the previous week, analyse the results of the planning and take action.\n\nNumber of planned tasks per category:\n\n\n\n\n\n\n\n\n\nCATEGORY\nNUMBER OF PLANNED TASKS\nNUMBER OF COMPLETED TASKS\n\n\n\n\nClass Projects (CP)\n\n\n\n\nTeam Project (TP)\n\n\n\n\nCI/CD\n\n\n\n\nDevOps Learning (DOL)\n\n\n\n\nPlanning and MindSet (PMS)\n\n\n\n\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\nThink about the complexity of the completed tasks and if they matched the expectatives:\n\nIf the task was easier than you thought, move it to lower energies spaces\nIf the task was harder than you though, think about spitting it into less complex tasks\n\n\n\n\nMorning: BSC\nAfternoon: BSC\nEvening: Nothing done\n\n\n\n\n\nMorning: React\nAfternoon: BSC\nEvening: BSC\n\n\n\n\n\nMorning: React\nAfternoon:\nEvening:\n\n\n\n\n\nMorning:\nAfternoon:\nEvening:\n\n\n\n\n\nMorning:\nAfternoon:\nEvening:\n\n\n\n\n\nThink about the reasons why these tasks aren’t done:\n\nDid you lack some kind of resource (knowledge, tools, etc…) to even start it?\nDid you find any obstacle that slowed down your progress? The obstacle can be either internal or external, related or unrelated to the task\nIs this task something that you’ve been dragging along for some time? Is it really necessary?\n\n\n\n\nBSC\n\n\n\n\n\nBSC\n\n\n\n\n\nBSC\n\n\n\n\n\nBSC\n\n\n\n\n\nBSC\n\n\n\n\n\n\nBased on the previous analysis, identify the weak points of the previous planning, discard useless tasks, reassing new weights to pending tasks and schedule your next week:\n\nBest decision of all week\n\n\n\nAvoided pits\n\n\n\nWhat have you reorganized during this week?\n\n\n\nCore concepts learnt during this week / What have you learned?\n\nLearned about Spring Boot tests\nLearned about ReactJS hooks"
  },
  {
    "objectID": "miscellaneous/weekly-planning/06-week-06.html#roadmap-define-what-you-want-know-your-energy-and-yourself",
    "href": "miscellaneous/weekly-planning/06-week-06.html#roadmap-define-what-you-want-know-your-energy-and-yourself",
    "title": "06 - Week 06",
    "section": "",
    "text": "Things to accomplish:\n\nCreate a REST API application with SpringBoot\nCreate the first CI/CD pipeline for a Spring Boot project\nComplete my tasks for the Team Project in Sprint 2\nDeeper understanding of the DevOps methodology"
  },
  {
    "objectID": "miscellaneous/weekly-planning/06-week-06.html#to-do-list-all-the-tasks-that-you-have-to-do-by-concepts-technologies-tools-etc",
    "href": "miscellaneous/weekly-planning/06-week-06.html#to-do-list-all-the-tasks-that-you-have-to-do-by-concepts-technologies-tools-etc",
    "title": "06 - Week 06",
    "section": "",
    "text": "Categories:\n\nClass Project (CP)\nTeam Project (TP)\nContinuous Integration/Continuous Delivery (CI/CD)\nDevOps Learning (DOL)\nPlanning & MindSet (PMS)\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\n\n\n\n\nCATEGORY\nTASK\nWEIGHT\nINTRODUCED ON\n\n\n\n\nCP\nCreate Library REST client\n5\nWeek 1\n\n\nCP\nUnify User HTML forms\n5\nWeek 1\n\n\nCP\nUnify Publications creation\n8\nWeek 1\n\n\nCP\nMigrate H2 to another DB\n13\nWeek 1\n\n\nCP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nCP\nUpdate soft. script with Postman\n8\nWeek 2\n\n\nCP\nSwagger and Mockito into Library\n8\nWeek 2\n\n\nCP\nEnable logging in Java\n8\nWeek 2\n\n\nCP\nQuarto: automate weekly planning\n13\nWeek 2\n\n\nCP\nFinish MongoDB tutorials\n8\nWeek 4\n\n\nCP\nFinish React Lab-RE01-1\n8\nWeek 5\n\n\nCP\nFinish React Lab-RE02-1\n8\nWeek 5\n\n\nCI/CD\nLearn GitHub Actions\n13\nWeek 1\n\n\nCI/CD\nInstall Jenkins\n8\nWeek 1\n\n\nCI/CD\nCreate staging environment\n13\nWeek 1\n\n\nTP\nFinish User Entity\n13\nWeek 1\n\n\nTP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nTP\nEnable logging\n5\nWeek 2\n\n\nTP\nCreate REST API\n5\nWeek 2\n\n\nTP\nFinish GamesCollection\n8\nWeek 5\n\n\nDOL\nDeploy workloads on Kubernetes\n13\nWeek 1\n\n\nDOL\nLearn about OpenStack\n21\nWeek 1\n\n\nDOL\nLearn about OKD\n21\nWeek 2\n\n\nDOL\nLearn about Argo workflows\n21\nWeek 2\n\n\nDOL\nLearn about SQL and Postgres\n21\nWeek 2\n\n\nDOL\nLearn about Terraform\n21\nWeek 3\n\n\nDOL\nLearn about Ansible\n21\nWeek 3\n\n\nDOL\nInstall a SMTP server\n13\nWeek 1\n\n\nDOL\nFinish Penpot deployment and documentation\n5\nWeek 3\n\n\nMSX\nTest wired adapter\n5\nWeek 3\n\n\nPMS\nWeekly planning\n8\nWeek 1\n\n\nPMS\nWeekly retrospective\n8\nWeek 1\n\n\nPMS\nMindSet & Lectures\n5\nWeek 1"
  },
  {
    "objectID": "miscellaneous/weekly-planning/06-week-06.html#spring-goal-categorize-and-filter-them-by-importance-and-urgency-based-on-your-roadmap",
    "href": "miscellaneous/weekly-planning/06-week-06.html#spring-goal-categorize-and-filter-them-by-importance-and-urgency-based-on-your-roadmap",
    "title": "06 - Week 06",
    "section": "",
    "text": "Important and urgent:\n\nCP: Swagger and Mockito into Library (W8)\nCP: Finish MongoDB tutorials (W8)\nTP: Finish User Entity (W13)\nTP: Update functional diagrams (W8)\nDOL: Learn about OKD (21)\nDOL: Learn about Argo workflows (21)\nDOL: Learn about Terraform (21)\nDOL: Learn about Ansible (21)\nPMS: Weekly planning (W8)\n\nImportant but not urgent:\n\nCP: Create missing Unit Tests (W8)\nCP: Create Library REST client (W5)\nCP: Migrate H2 to another DB (W13)\nCP: Update soft. script with Postman (W8)\nCP: Enable logging in Java (W8)\nTP: Create missing Unit Tests (W8)\nTP: Enable logging (W5)\nTP: Create REST API (W5)\nCI/CD: Learn GitHub Actions (W13)\nCI/CD: Create staging environment (W13)\nDOL: Deploy workloads on Kubernetes (W13)\nDOL: Learn about SQL and Postgres (W21)\nDOL: Learn about OpenStack (W21)\nMSX: Test wired adapter (W5)\nPMS: Weekly retrospective (W8)\nPMS: MindSet & Lectures (W5)\n\nNot important but urgent:\n\nDOL: Install a SMTP server (W13)\nCI/CD: Install Jenkins (W8)\n\nNeither important nor urgent:\n\nDOL: Finish Penpot deployment and documentation (W5)\nCP: Unify User HTML forms (W5)\nCP: Unify Publications creation (W8)"
  },
  {
    "objectID": "miscellaneous/weekly-planning/06-week-06.html#decision-making-plan-your-week",
    "href": "miscellaneous/weekly-planning/06-week-06.html#decision-making-plan-your-week",
    "title": "06 - Week 06",
    "section": "",
    "text": "Each week, define tasks for each energy slot of the day (3 each day, 5 days a week). At the end of the week, review it to see how many of the tasks have been accomplished. Once done, plan the next week taking into account the feedback from the previous week:\n\n\n\n\n\n\n\n\n\n\n\nWEEK 3\nMONDAY (W34)\nTUESDAY (W26)\nWEDNESDAY (W32)\nTHURSDAY (W34)\nFRIDAY (W37)\n\n\n\n\nMorning\nPMS: Weekly planning (W8)\n\nCP: Enable logging in Java (W8) TP: Finish User Entity (W13)\nCP: Swagger and Mockito into Library (W8)\nTP: Update functional diagrams (W8)\n\n\nAfternoon\n\n\nDOL: Learn about Argo workflows (21)\nDOL: Learn about OKD (21)\nTP: Enable logging (W5)\n\n\nEvening\n\n\nCP: Create missing Unit Tests (W8) CP: Finish MongoDB tutorials (W8)\nTP: Create missing Unit Tests (W8)\nPMS: Weekly retrospective (W8)"
  },
  {
    "objectID": "miscellaneous/weekly-planning/06-week-06.html#ultimate-goal-metrics",
    "href": "miscellaneous/weekly-planning/06-week-06.html#ultimate-goal-metrics",
    "title": "06 - Week 06",
    "section": "",
    "text": "Make a retrospective of the previous week, analyse the results of the planning and take action.\n\nNumber of planned tasks per category:\n\n\n\n\n\n\n\n\n\nCATEGORY\nNUMBER OF PLANNED TASKS\nNUMBER OF COMPLETED TASKS\n\n\n\n\nClass Projects (CP)\n\n\n\n\nTeam Project (TP)\n\n\n\n\nCI/CD\n\n\n\n\nDevOps Learning (DOL)\n\n\n\n\nPlanning and MindSet (PMS)\n\n\n\n\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\nThink about the complexity of the completed tasks and if they matched the expectatives:\n\nIf the task was easier than you thought, move it to lower energies spaces\nIf the task was harder than you though, think about spitting it into less complex tasks\n\n\n\n\nMorning: BSC\nAfternoon: BSC\nEvening: Nothing done\n\n\n\n\n\nMorning: React\nAfternoon: BSC\nEvening: BSC\n\n\n\n\n\nMorning: React\nAfternoon:\nEvening:\n\n\n\n\n\nMorning:\nAfternoon:\nEvening:\n\n\n\n\n\nMorning:\nAfternoon:\nEvening:\n\n\n\n\n\nThink about the reasons why these tasks aren’t done:\n\nDid you lack some kind of resource (knowledge, tools, etc…) to even start it?\nDid you find any obstacle that slowed down your progress? The obstacle can be either internal or external, related or unrelated to the task\nIs this task something that you’ve been dragging along for some time? Is it really necessary?\n\n\n\n\nBSC\n\n\n\n\n\nBSC\n\n\n\n\n\nBSC\n\n\n\n\n\nBSC\n\n\n\n\n\nBSC"
  },
  {
    "objectID": "miscellaneous/weekly-planning/06-week-06.html#retrospective",
    "href": "miscellaneous/weekly-planning/06-week-06.html#retrospective",
    "title": "06 - Week 06",
    "section": "",
    "text": "Based on the previous analysis, identify the weak points of the previous planning, discard useless tasks, reassing new weights to pending tasks and schedule your next week:\n\nBest decision of all week\n\n\n\nAvoided pits\n\n\n\nWhat have you reorganized during this week?\n\n\n\nCore concepts learnt during this week / What have you learned?\n\nLearned about Spring Boot tests\nLearned about ReactJS hooks"
  },
  {
    "objectID": "miscellaneous/weekly-planning/03-week-03.html",
    "href": "miscellaneous/weekly-planning/03-week-03.html",
    "title": "03 - Week 03",
    "section": "",
    "text": "Things to accomplish:\n\nCreate a REST API application with SpringBoot\nCreate the first CI/CD pipeline for a Spring Boot project\nComplete my tasks for the Team Project in Sprint 2\nDeeper understanding of the DevOps methodology\n\n\n\n\n\nCategories:\n\nClass Project (CP)\nTeam Project (TP)\nContinuous Integration/Continuous Delivery (CI/CD)\nDevOps Learning (DOL)\nPlanning & MindSet (PMS)\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\n\n\n\n\nCATEGORY\nTASK\nWEIGHT\nINTRODUCED ON\n\n\n\n\nCP\nCreate Library REST client\n5\nWeek 1\n\n\nCP\nUnify User HTML forms\n5\nWeek 1\n\n\nCP\nUnify Publications creation\n8\nWeek 1\n\n\nCP\nMigrate H2 to another DB\n13\nWeek 1\n\n\nCP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nCP\nCreate GitHub issues\n3\nWeek 1\n\n\nCP\nComplete SonarQube GitHub action\n13\nWeek 2\n\n\nCP\nUpdate soft. script with Postman\n8\nWeek 2\n\n\nCP\nSwagger and Mockito into Library\n8\nWeek 2\n\n\nCP\nEnable logging in Java\n8\nWeek 2\n\n\nCP\nQuarto: automate weekly planning\n13\nWeek 2\n\n\nCI/CD\nLearn GitHub Actions\n13\nWeek 1\n\n\nCI/CD\nInstall Jenkins\n8\nWeek 1\n\n\nCI/CD\nCreate staging environment\n13\nWeek 1\n\n\nTP\nFinish User Entity\n13\nWeek 1\n\n\nTP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nTP\nEnable logging\n5\nWeek 2\n\n\nTP\nCreate REST API\n5\nWeek 2\n\n\nDOL\nDeploy workloads on Kubernetes\n13\nWeek 1\n\n\nDOL\nLearn about OpenStack\n21\nWeek 1\n\n\nDOL\nLearn about OKD\n21\nWeek 2\n\n\nDOL\nLearn about Python and Django\n13\nWeek 2\n\n\nDOL\nLearn about Argo workflows\n21\nWeek 2\n\n\nDOL\nLearn about SQL and Postgres\n21\nWeek 2\n\n\nDOL\nLearn about Terraform\n21\nWeek 3\n\n\nDOL\nLearn about Ansible\n21\nWeek 3\n\n\nDOL\nInstall a SMTP server\n13\nWeek 1\n\n\nMSX\nRedo 3D case for wired adapter\n8\nWeek 3\n\n\nMSX\nTest wired adapter\n5\nWeek 3\n\n\nPMS\nWeekly planning\n8\nWeek 1\n\n\nPMS\nWeekly retrospective\n8\nWeek 1\n\n\nPMS\nMindSet & Lectures\n5\nWeek 1\n\n\n\n\n\n\n34 tasks:\n\nImportant and urgent:\n\nCP: Complete SonarQube GitHub action (W13)\nCP: Swagger and Mockito into Library (W8)\nTP: Finish User Entity (W13)\nTP: Update functional diagrams (W8)\nDOL: Learn about observability (W13)\nDOL: Learn about OKD (21)\nDOL: Learn about Python and Flask (13)\nDOL: Learn about Argo workflows (21)\nDOL: Learn about Terraform (21)\nDOL: Learn about Ansible (21)\nPMS: Weekly planning (W8)\n\nImportant but not urgent:\n\nCP: Create missing Unit Tests (W8)\nCP: Unify User HTML forms (W5)\nCP: Unify Publications creation (W8)\nCP: Create GitHub issues (W3)\nCP: Create Library REST client (W5)\nCP: Migrate H2 to another DB (W13)\nCP: Update soft. script with Postman (W8)\nCP: Enable logging in Java (W8)\nTP: Create missing Unit Tests (W8)\nTP: Update UMLs (W5)\nTP: Enable logging (W5)\nTP: Create REST API (W5)\nCI/CD: Learn GitHub Actions (W13)\nCI/CD: Create staging environment (W13)\nDOL: Deploy workloads on Kubernetes (W13)\nDOL: Learn about SQL and Postgres (W21)\nDOL: Learn about OpenStack (W21)\nMSX: Redo 3D case for wired adapter (W8)\nMSX: Test wired adapter (W5)\nPMS: Weekly retrospective (W8)\nPMS: MindSet & Lectures (W5)\n\nNot important but urgent:\n\nDOL: Install a SMTP server (W13)\nCI/CD: Install Jenkins (W8)\n\nNeither important nor urgent:\n\nDOL: Finish Penpot deployment and documentation\n\n\n\n\n\nEach week, define tasks for each energy slot of the day (3 each day, 5 days a week). At the end of the week, review it to see how many of the tasks have been accomplished. Once done, plan the next week taking into account the feedback from the previous week:\n\n\n\n\n\n\n\n\n\n\n\nWEEK 3\nMONDAY (W34)\nTUESDAY (W26)\nWEDNESDAY (W32)\nTHURSDAY (W34)\nFRIDAY (W37)\n\n\n\n\nMorning\nPMS: Weekly planning (W8) CP: Create GitHub issues (W3)\nCP: Complete SonarQube GitHub action (W13)\nCP: Enable logging in Java (W8) CP: Work on REST API controllers (W8)\nCP: Swagger and Mockito into Library (W8)\nTP: Update functional diagrams (W8)\n\n\nAfternoon\nTP: Finish User Entity (W13) MSX: Redo 3D case for wired adapter (W8)\nDOL: Learn about Python and Django (13)\nDOL: Learn about Argo workflows (21)\nDOL: Learn about OKD (21)\nTP: Enable logging (W5)\n\n\nEvening\nDOL: Learn about observability (W13) MSX: Redo 3D case for wired adapter (W8)\nTP: Update UMLs (W5)\nCP: Create missing Unit Tests (W8)\nTP: Create missing Unit Tests (W8)\nPMS: Weekly retrospective (W8)\n\n\n\n\n\n\nMake a retrospective of the previous week, analyse the results of the planning and take action.\n\nNumber of planned tasks per category:\n\n\n\n\n\n\n\n\n\nCATEGORY\nNUMBER OF PLANNED TASKS\nNUMBER OF COMPLETED TASKS\n\n\n\n\nClass Projects (CP)\n\n\n\n\nTeam Project (TP)\n\n\n\n\nCI/CD\n\n\n\n\nDevOps Learning (DOL)\n\n\n\n\nPlanning and MindSet (PMS)\n\n\n\n\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\nThink about the complexity of the completed tasks and if they matched the expectatives:\n\nIf the task was easier than you thought, move it to lower energies spaces\nIf the task was harder than you though, think about spitting it into less complex tasks\n\n\n\n\nMorning: planning done and GitHub issues created\nAfternoon: redesign of MSX adapter case\n\n\n\n\n\nMorning: completed SonarQube GitHub action\n\n\n\n\n\nMorning: kept working on Library REST API controllers and services\nAfternoon and evening: started the Python CRUD Rest API with Django tutorial, pending to finish it\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThink about the reasons why these tasks aren’t done:\n\nDid you lack some kind of resource (knowledge, tools, etc…) to even start it?\nDid you find any obstacle that slowed down your progress? The obstacle can be either internal or external, related or unrelated to the task\nIs this task something that you’ve been dragging along for some time? Is it really necessary?\n\n\n\n\nReplaced afternoon and evening tasks with MSX wired 3D case redesign\n\n\n\n\n\nReplaced afternoon and evening tasks with MSX wired adaptor testing and projector repairs\n\n\n\n\n\nReplaced afternoon and evening tasks with the pending Python task from Tuesday\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBased on the previous analysis, identify the weak points of the previous planning, discard useless tasks, reassing new weights to pending tasks and schedule your next week:\n\nBest decision of all week\n\n\n\nAvoided pits\n\nI avoided spending too much time configuring a new IDE (PyCharm) for the Django tutorial\n\nWhat have you reorganized during this week?\n\nDjango tutorial instead of Argo workflows\nMSX related stuff over finishing observability course\n\nCore concepts learnt during this week / What have you learned?\n\nAPI Rest with Django (not much)\nAPI Rest with Spring Boot\nDealing with Generics in Java SE and designing factory strategies in REST APIs"
  },
  {
    "objectID": "miscellaneous/weekly-planning/03-week-03.html#roadmap-define-what-you-want-know-your-energy-and-yourself",
    "href": "miscellaneous/weekly-planning/03-week-03.html#roadmap-define-what-you-want-know-your-energy-and-yourself",
    "title": "03 - Week 03",
    "section": "",
    "text": "Things to accomplish:\n\nCreate a REST API application with SpringBoot\nCreate the first CI/CD pipeline for a Spring Boot project\nComplete my tasks for the Team Project in Sprint 2\nDeeper understanding of the DevOps methodology"
  },
  {
    "objectID": "miscellaneous/weekly-planning/03-week-03.html#to-do-list-all-the-tasks-that-you-have-to-do-by-concepts-technologies-tools-etc",
    "href": "miscellaneous/weekly-planning/03-week-03.html#to-do-list-all-the-tasks-that-you-have-to-do-by-concepts-technologies-tools-etc",
    "title": "03 - Week 03",
    "section": "",
    "text": "Categories:\n\nClass Project (CP)\nTeam Project (TP)\nContinuous Integration/Continuous Delivery (CI/CD)\nDevOps Learning (DOL)\nPlanning & MindSet (PMS)\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\n\n\n\n\nCATEGORY\nTASK\nWEIGHT\nINTRODUCED ON\n\n\n\n\nCP\nCreate Library REST client\n5\nWeek 1\n\n\nCP\nUnify User HTML forms\n5\nWeek 1\n\n\nCP\nUnify Publications creation\n8\nWeek 1\n\n\nCP\nMigrate H2 to another DB\n13\nWeek 1\n\n\nCP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nCP\nCreate GitHub issues\n3\nWeek 1\n\n\nCP\nComplete SonarQube GitHub action\n13\nWeek 2\n\n\nCP\nUpdate soft. script with Postman\n8\nWeek 2\n\n\nCP\nSwagger and Mockito into Library\n8\nWeek 2\n\n\nCP\nEnable logging in Java\n8\nWeek 2\n\n\nCP\nQuarto: automate weekly planning\n13\nWeek 2\n\n\nCI/CD\nLearn GitHub Actions\n13\nWeek 1\n\n\nCI/CD\nInstall Jenkins\n8\nWeek 1\n\n\nCI/CD\nCreate staging environment\n13\nWeek 1\n\n\nTP\nFinish User Entity\n13\nWeek 1\n\n\nTP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nTP\nEnable logging\n5\nWeek 2\n\n\nTP\nCreate REST API\n5\nWeek 2\n\n\nDOL\nDeploy workloads on Kubernetes\n13\nWeek 1\n\n\nDOL\nLearn about OpenStack\n21\nWeek 1\n\n\nDOL\nLearn about OKD\n21\nWeek 2\n\n\nDOL\nLearn about Python and Django\n13\nWeek 2\n\n\nDOL\nLearn about Argo workflows\n21\nWeek 2\n\n\nDOL\nLearn about SQL and Postgres\n21\nWeek 2\n\n\nDOL\nLearn about Terraform\n21\nWeek 3\n\n\nDOL\nLearn about Ansible\n21\nWeek 3\n\n\nDOL\nInstall a SMTP server\n13\nWeek 1\n\n\nMSX\nRedo 3D case for wired adapter\n8\nWeek 3\n\n\nMSX\nTest wired adapter\n5\nWeek 3\n\n\nPMS\nWeekly planning\n8\nWeek 1\n\n\nPMS\nWeekly retrospective\n8\nWeek 1\n\n\nPMS\nMindSet & Lectures\n5\nWeek 1"
  },
  {
    "objectID": "miscellaneous/weekly-planning/03-week-03.html#spring-goal-categorize-and-filter-them-by-importance-and-urgency-based-on-your-roadmap",
    "href": "miscellaneous/weekly-planning/03-week-03.html#spring-goal-categorize-and-filter-them-by-importance-and-urgency-based-on-your-roadmap",
    "title": "03 - Week 03",
    "section": "",
    "text": "34 tasks:\n\nImportant and urgent:\n\nCP: Complete SonarQube GitHub action (W13)\nCP: Swagger and Mockito into Library (W8)\nTP: Finish User Entity (W13)\nTP: Update functional diagrams (W8)\nDOL: Learn about observability (W13)\nDOL: Learn about OKD (21)\nDOL: Learn about Python and Flask (13)\nDOL: Learn about Argo workflows (21)\nDOL: Learn about Terraform (21)\nDOL: Learn about Ansible (21)\nPMS: Weekly planning (W8)\n\nImportant but not urgent:\n\nCP: Create missing Unit Tests (W8)\nCP: Unify User HTML forms (W5)\nCP: Unify Publications creation (W8)\nCP: Create GitHub issues (W3)\nCP: Create Library REST client (W5)\nCP: Migrate H2 to another DB (W13)\nCP: Update soft. script with Postman (W8)\nCP: Enable logging in Java (W8)\nTP: Create missing Unit Tests (W8)\nTP: Update UMLs (W5)\nTP: Enable logging (W5)\nTP: Create REST API (W5)\nCI/CD: Learn GitHub Actions (W13)\nCI/CD: Create staging environment (W13)\nDOL: Deploy workloads on Kubernetes (W13)\nDOL: Learn about SQL and Postgres (W21)\nDOL: Learn about OpenStack (W21)\nMSX: Redo 3D case for wired adapter (W8)\nMSX: Test wired adapter (W5)\nPMS: Weekly retrospective (W8)\nPMS: MindSet & Lectures (W5)\n\nNot important but urgent:\n\nDOL: Install a SMTP server (W13)\nCI/CD: Install Jenkins (W8)\n\nNeither important nor urgent:\n\nDOL: Finish Penpot deployment and documentation"
  },
  {
    "objectID": "miscellaneous/weekly-planning/03-week-03.html#decision-making-plan-your-week",
    "href": "miscellaneous/weekly-planning/03-week-03.html#decision-making-plan-your-week",
    "title": "03 - Week 03",
    "section": "",
    "text": "Each week, define tasks for each energy slot of the day (3 each day, 5 days a week). At the end of the week, review it to see how many of the tasks have been accomplished. Once done, plan the next week taking into account the feedback from the previous week:\n\n\n\n\n\n\n\n\n\n\n\nWEEK 3\nMONDAY (W34)\nTUESDAY (W26)\nWEDNESDAY (W32)\nTHURSDAY (W34)\nFRIDAY (W37)\n\n\n\n\nMorning\nPMS: Weekly planning (W8) CP: Create GitHub issues (W3)\nCP: Complete SonarQube GitHub action (W13)\nCP: Enable logging in Java (W8) CP: Work on REST API controllers (W8)\nCP: Swagger and Mockito into Library (W8)\nTP: Update functional diagrams (W8)\n\n\nAfternoon\nTP: Finish User Entity (W13) MSX: Redo 3D case for wired adapter (W8)\nDOL: Learn about Python and Django (13)\nDOL: Learn about Argo workflows (21)\nDOL: Learn about OKD (21)\nTP: Enable logging (W5)\n\n\nEvening\nDOL: Learn about observability (W13) MSX: Redo 3D case for wired adapter (W8)\nTP: Update UMLs (W5)\nCP: Create missing Unit Tests (W8)\nTP: Create missing Unit Tests (W8)\nPMS: Weekly retrospective (W8)"
  },
  {
    "objectID": "miscellaneous/weekly-planning/03-week-03.html#ultimate-goal-metrics",
    "href": "miscellaneous/weekly-planning/03-week-03.html#ultimate-goal-metrics",
    "title": "03 - Week 03",
    "section": "",
    "text": "Make a retrospective of the previous week, analyse the results of the planning and take action.\n\nNumber of planned tasks per category:\n\n\n\n\n\n\n\n\n\nCATEGORY\nNUMBER OF PLANNED TASKS\nNUMBER OF COMPLETED TASKS\n\n\n\n\nClass Projects (CP)\n\n\n\n\nTeam Project (TP)\n\n\n\n\nCI/CD\n\n\n\n\nDevOps Learning (DOL)\n\n\n\n\nPlanning and MindSet (PMS)\n\n\n\n\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\nThink about the complexity of the completed tasks and if they matched the expectatives:\n\nIf the task was easier than you thought, move it to lower energies spaces\nIf the task was harder than you though, think about spitting it into less complex tasks\n\n\n\n\nMorning: planning done and GitHub issues created\nAfternoon: redesign of MSX adapter case\n\n\n\n\n\nMorning: completed SonarQube GitHub action\n\n\n\n\n\nMorning: kept working on Library REST API controllers and services\nAfternoon and evening: started the Python CRUD Rest API with Django tutorial, pending to finish it\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThink about the reasons why these tasks aren’t done:\n\nDid you lack some kind of resource (knowledge, tools, etc…) to even start it?\nDid you find any obstacle that slowed down your progress? The obstacle can be either internal or external, related or unrelated to the task\nIs this task something that you’ve been dragging along for some time? Is it really necessary?\n\n\n\n\nReplaced afternoon and evening tasks with MSX wired 3D case redesign\n\n\n\n\n\nReplaced afternoon and evening tasks with MSX wired adaptor testing and projector repairs\n\n\n\n\n\nReplaced afternoon and evening tasks with the pending Python task from Tuesday"
  },
  {
    "objectID": "miscellaneous/weekly-planning/03-week-03.html#retrospective",
    "href": "miscellaneous/weekly-planning/03-week-03.html#retrospective",
    "title": "03 - Week 03",
    "section": "",
    "text": "Based on the previous analysis, identify the weak points of the previous planning, discard useless tasks, reassing new weights to pending tasks and schedule your next week:\n\nBest decision of all week\n\n\n\nAvoided pits\n\nI avoided spending too much time configuring a new IDE (PyCharm) for the Django tutorial\n\nWhat have you reorganized during this week?\n\nDjango tutorial instead of Argo workflows\nMSX related stuff over finishing observability course\n\nCore concepts learnt during this week / What have you learned?\n\nAPI Rest with Django (not much)\nAPI Rest with Spring Boot\nDealing with Generics in Java SE and designing factory strategies in REST APIs"
  },
  {
    "objectID": "miscellaneous/weekly-planning/00-template.html",
    "href": "miscellaneous/weekly-planning/00-template.html",
    "title": "00 - Week template",
    "section": "",
    "text": "Weight the tasks using tools like Poker Planning\n\n\n\n\n\n\nEach week, define tasks for each energy slot of the day (3 each day, 5 days a week). At the end of the week, review it to see how many of the tasks have been accomplished. Once done, plan the next week taking into account the feedback from the previous week:\n\nWeek 1:\n\n\n\n\n\n\n\n\n\n\n\n\nWEEK 1\nM\nT\nW\nT\nF\n\n\n\n\nMorning\nWeekly planning\nWeekly Scrum\nDocument class exercises\nDocument Team Project\nTBD\n\n\nAfternoon\nReview Team project status\nPractise class exercises\nWork on Team project\nPractice class exercises\nTBD\n\n\nEvening\nComplete some GitHub tasks\nStudy DevOps tools\nComplete some GitHub tasks\nStudy DevOps tools\nWeekly retrospective\n\n\n\n\n\n\nMake a retrospective of the previous week, analyse the results of the planning and take action.\n\n\nThink about the complexity of the completed tasks and if they matched the expectatives:\n\nIf the task was easier than you thought, move it to lower energies spaces\nIf the task was harder than you though, think about spitting it into less complex tasks\n\nAlso, try to identify what pits you’ve avoided during this week while completing tasks:\n\nOverload\nOverthinking\nOverdesire –&gt; fast failure due to unreachable expectations\n\n\n\n\nThink about the reasons why these tasks aren’t done:\n\nDid you lack some kind of resource (knowledge, tools, etc…) to even start it?\nDid you find any obstacle that slowed down your progress? The obstacle can be either internal or external, related or unrelated to the task\nIs this task something that you’ve been dragging along for some time? Is it really necessary?\n\n\n\n\n\nBased on the previous analysis, identify the weak points of the previous planning, discard useless tasks, reassing new weights to pending tasks and schedule your next week\n\nBest decision of all week\nAvoided pits\nCore concepts learnt during this week\nWhat have you reorganized during this week?\nWhat have you learned?"
  },
  {
    "objectID": "miscellaneous/weekly-planning/00-template.html#to-do-list-all-the-tasks-that-you-have-to-do-by-concepts-technologies-tools-etc",
    "href": "miscellaneous/weekly-planning/00-template.html#to-do-list-all-the-tasks-that-you-have-to-do-by-concepts-technologies-tools-etc",
    "title": "00 - Week template",
    "section": "",
    "text": "Weight the tasks using tools like Poker Planning"
  },
  {
    "objectID": "miscellaneous/weekly-planning/00-template.html#decision-making-plan-your-week",
    "href": "miscellaneous/weekly-planning/00-template.html#decision-making-plan-your-week",
    "title": "00 - Week template",
    "section": "",
    "text": "Each week, define tasks for each energy slot of the day (3 each day, 5 days a week). At the end of the week, review it to see how many of the tasks have been accomplished. Once done, plan the next week taking into account the feedback from the previous week:\n\nWeek 1:\n\n\n\n\n\n\n\n\n\n\n\n\nWEEK 1\nM\nT\nW\nT\nF\n\n\n\n\nMorning\nWeekly planning\nWeekly Scrum\nDocument class exercises\nDocument Team Project\nTBD\n\n\nAfternoon\nReview Team project status\nPractise class exercises\nWork on Team project\nPractice class exercises\nTBD\n\n\nEvening\nComplete some GitHub tasks\nStudy DevOps tools\nComplete some GitHub tasks\nStudy DevOps tools\nWeekly retrospective"
  },
  {
    "objectID": "miscellaneous/weekly-planning/00-template.html#ultimate-goal-metrics",
    "href": "miscellaneous/weekly-planning/00-template.html#ultimate-goal-metrics",
    "title": "00 - Week template",
    "section": "",
    "text": "Make a retrospective of the previous week, analyse the results of the planning and take action.\n\n\nThink about the complexity of the completed tasks and if they matched the expectatives:\n\nIf the task was easier than you thought, move it to lower energies spaces\nIf the task was harder than you though, think about spitting it into less complex tasks\n\nAlso, try to identify what pits you’ve avoided during this week while completing tasks:\n\nOverload\nOverthinking\nOverdesire –&gt; fast failure due to unreachable expectations\n\n\n\n\nThink about the reasons why these tasks aren’t done:\n\nDid you lack some kind of resource (knowledge, tools, etc…) to even start it?\nDid you find any obstacle that slowed down your progress? The obstacle can be either internal or external, related or unrelated to the task\nIs this task something that you’ve been dragging along for some time? Is it really necessary?"
  },
  {
    "objectID": "miscellaneous/weekly-planning/00-template.html#retrospective",
    "href": "miscellaneous/weekly-planning/00-template.html#retrospective",
    "title": "00 - Week template",
    "section": "",
    "text": "Based on the previous analysis, identify the weak points of the previous planning, discard useless tasks, reassing new weights to pending tasks and schedule your next week\n\nBest decision of all week\nAvoided pits\nCore concepts learnt during this week\nWhat have you reorganized during this week?\nWhat have you learned?"
  },
  {
    "objectID": "miscellaneous/weekly-planning/05-week-05.html",
    "href": "miscellaneous/weekly-planning/05-week-05.html",
    "title": "05 - Week 05",
    "section": "",
    "text": "Things to accomplish:\n\nCreate a REST API application with SpringBoot\nCreate the first CI/CD pipeline for a Spring Boot project\nComplete my tasks for the Team Project in Sprint 2\nDeeper understanding of the DevOps methodology\n\n\n\n\n\nCategories:\n\nClass Project (CP)\nTeam Project (TP)\nContinuous Integration/Continuous Delivery (CI/CD)\nDevOps Learning (DOL)\nPlanning & MindSet (PMS)\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\n\n\n\n\nCATEGORY\nTASK\nWEIGHT\nINTRODUCED ON\n\n\n\n\nCP\nCreate Library REST client\n5\nWeek 1\n\n\nCP\nUnify User HTML forms\n5\nWeek 1\n\n\nCP\nUnify Publications creation\n8\nWeek 1\n\n\nCP\nMigrate H2 to another DB\n13\nWeek 1\n\n\nCP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nCP\nUpdate soft. script with Postman\n8\nWeek 2\n\n\nCP\nSwagger and Mockito into Library\n8\nWeek 2\n\n\nCP\nEnable logging in Java\n8\nWeek 2\n\n\nCP\nQuarto: automate weekly planning\n13\nWeek 2\n\n\nCP\nFinish MongoDB tutorials\n8\nWeek 4\n\n\nCP\nFinish React Lab-RE01-1\n8\nWeek 5\n\n\nCP\nFinish React Lab-RE02-1\n8\nWeek 5\n\n\nCI/CD\nLearn GitHub Actions\n13\nWeek 1\n\n\nCI/CD\nInstall Jenkins\n8\nWeek 1\n\n\nCI/CD\nCreate staging environment\n13\nWeek 1\n\n\nTP\nFinish User Entity\n13\nWeek 1\n\n\nTP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nTP\nEnable logging\n5\nWeek 2\n\n\nTP\nCreate REST API\n5\nWeek 2\n\n\nTP\nFinish GamesCollection\n8\nWeek 5\n\n\nDOL\nDeploy workloads on Kubernetes\n13\nWeek 1\n\n\nDOL\nLearn about OpenStack\n21\nWeek 1\n\n\nDOL\nLearn about OKD\n21\nWeek 2\n\n\nDOL\nLearn about Argo workflows\n21\nWeek 2\n\n\nDOL\nLearn about SQL and Postgres\n21\nWeek 2\n\n\nDOL\nLearn about Terraform\n21\nWeek 3\n\n\nDOL\nLearn about Ansible\n21\nWeek 3\n\n\nDOL\nInstall a SMTP server\n13\nWeek 1\n\n\nDOL\nFinish Penpot deployment and documentation\n5\nWeek 3\n\n\nMSX\nTest wired adapter\n5\nWeek 3\n\n\nPMS\nWeekly planning\n8\nWeek 1\n\n\nPMS\nWeekly retrospective\n8\nWeek 1\n\n\nPMS\nMindSet & Lectures\n5\nWeek 1\n\n\n\n\n\n\n\nImportant and urgent:\n\nCP: Swagger and Mockito into Library (W8)\nCP: Finish MongoDB tutorials (W8)\nTP: Finish User Entity (W13)\nTP: Update functional diagrams (W8)\nDOL: Learn about OKD (21)\nDOL: Learn about Argo workflows (21)\nDOL: Learn about Terraform (21)\nDOL: Learn about Ansible (21)\nPMS: Weekly planning (W8)\n\nImportant but not urgent:\n\nCP: Create missing Unit Tests (W8)\nCP: Create Library REST client (W5)\nCP: Migrate H2 to another DB (W13)\nCP: Update soft. script with Postman (W8)\nCP: Enable logging in Java (W8)\nTP: Create missing Unit Tests (W8)\nTP: Enable logging (W5)\nTP: Create REST API (W5)\nCI/CD: Learn GitHub Actions (W13)\nCI/CD: Create staging environment (W13)\nDOL: Deploy workloads on Kubernetes (W13)\nDOL: Learn about SQL and Postgres (W21)\nDOL: Learn about OpenStack (W21)\nMSX: Test wired adapter (W5)\nPMS: Weekly retrospective (W8)\nPMS: MindSet & Lectures (W5)\n\nNot important but urgent:\n\nDOL: Install a SMTP server (W13)\nCI/CD: Install Jenkins (W8)\n\nNeither important nor urgent:\n\nDOL: Finish Penpot deployment and documentation (W5)\nCP: Unify User HTML forms (W5)\nCP: Unify Publications creation (W8)\n\n\n\n\n\nEach week, define tasks for each energy slot of the day (3 each day, 5 days a week). At the end of the week, review it to see how many of the tasks have been accomplished. Once done, plan the next week taking into account the feedback from the previous week:\n\n\n\n\n\n\n\n\n\n\n\nWEEK 3\nMONDAY (W34)\nTUESDAY (W26)\nWEDNESDAY (W32)\nTHURSDAY (W34)\nFRIDAY (W37)\n\n\n\n\nMorning\nPMS: Weekly planning (W8)\n\nCP: Enable logging in Java (W8) TP: Finish User Entity (W13)\nCP: Swagger and Mockito into Library (W8)\nTP: Update functional diagrams (W8)\n\n\nAfternoon\n\n\nDOL: Learn about Argo workflows (21)\nDOL: Learn about OKD (21)\nTP: Enable logging (W5)\n\n\nEvening\n\n\nCP: Create missing Unit Tests (W8) CP: Finish MongoDB tutorials (W8)\nTP: Create missing Unit Tests (W8)\nPMS: Weekly retrospective (W8)\n\n\n\n\n\n\nMake a retrospective of the previous week, analyse the results of the planning and take action.\n\nNumber of planned tasks per category:\n\n\n\n\n\n\n\n\n\nCATEGORY\nNUMBER OF PLANNED TASKS\nNUMBER OF COMPLETED TASKS\n\n\n\n\nClass Projects (CP)\n\n\n\n\nTeam Project (TP)\n\n\n\n\nCI/CD\n\n\n\n\nDevOps Learning (DOL)\n\n\n\n\nPlanning and MindSet (PMS)\n\n\n\n\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\nThink about the complexity of the completed tasks and if they matched the expectatives:\n\nIf the task was easier than you thought, move it to lower energies spaces\nIf the task was harder than you though, think about spitting it into less complex tasks\n\n\n\n\nMorning: BSC\nAfternoon: BSC\nEvening: Nothing done\n\n\n\n\n\nMorning: React\n\nCreated WIP project for Open Library requests\nCreated Postman API request to Open Library\n\nAfternoon: BSC\nEvening: BSC\n\n\n\n\n\nMorning:\n\nHelped Sergi with VirtualBox\n\nAfternoon:\nEvening:\n\n\n\n\n\nMorning:\nAfternoon:\nEvening:\n\n\n\n\n\nMorning:\nAfternoon:\nEvening:\n\n\n\n\n\nThink about the reasons why these tasks aren’t done:\n\nDid you lack some kind of resource (knowledge, tools, etc…) to even start it?\nDid you find any obstacle that slowed down your progress? The obstacle can be either internal or external, related or unrelated to the task\nIs this task something that you’ve been dragging along for some time? Is it really necessary?\n\n\n\n\nBSC\n\n\n\n\n\nBSC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBased on the previous analysis, identify the weak points of the previous planning, discard useless tasks, reassing new weights to pending tasks and schedule your next week:\n\nBest decision of all week\n\n\n\nAvoided pits\n\n\n\nWhat have you reorganized during this week?\n\n\n\nCore concepts learnt during this week / What have you learned?"
  },
  {
    "objectID": "miscellaneous/weekly-planning/05-week-05.html#roadmap-define-what-you-want-know-your-energy-and-yourself",
    "href": "miscellaneous/weekly-planning/05-week-05.html#roadmap-define-what-you-want-know-your-energy-and-yourself",
    "title": "05 - Week 05",
    "section": "",
    "text": "Things to accomplish:\n\nCreate a REST API application with SpringBoot\nCreate the first CI/CD pipeline for a Spring Boot project\nComplete my tasks for the Team Project in Sprint 2\nDeeper understanding of the DevOps methodology"
  },
  {
    "objectID": "miscellaneous/weekly-planning/05-week-05.html#to-do-list-all-the-tasks-that-you-have-to-do-by-concepts-technologies-tools-etc",
    "href": "miscellaneous/weekly-planning/05-week-05.html#to-do-list-all-the-tasks-that-you-have-to-do-by-concepts-technologies-tools-etc",
    "title": "05 - Week 05",
    "section": "",
    "text": "Categories:\n\nClass Project (CP)\nTeam Project (TP)\nContinuous Integration/Continuous Delivery (CI/CD)\nDevOps Learning (DOL)\nPlanning & MindSet (PMS)\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\n\n\n\n\nCATEGORY\nTASK\nWEIGHT\nINTRODUCED ON\n\n\n\n\nCP\nCreate Library REST client\n5\nWeek 1\n\n\nCP\nUnify User HTML forms\n5\nWeek 1\n\n\nCP\nUnify Publications creation\n8\nWeek 1\n\n\nCP\nMigrate H2 to another DB\n13\nWeek 1\n\n\nCP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nCP\nUpdate soft. script with Postman\n8\nWeek 2\n\n\nCP\nSwagger and Mockito into Library\n8\nWeek 2\n\n\nCP\nEnable logging in Java\n8\nWeek 2\n\n\nCP\nQuarto: automate weekly planning\n13\nWeek 2\n\n\nCP\nFinish MongoDB tutorials\n8\nWeek 4\n\n\nCP\nFinish React Lab-RE01-1\n8\nWeek 5\n\n\nCP\nFinish React Lab-RE02-1\n8\nWeek 5\n\n\nCI/CD\nLearn GitHub Actions\n13\nWeek 1\n\n\nCI/CD\nInstall Jenkins\n8\nWeek 1\n\n\nCI/CD\nCreate staging environment\n13\nWeek 1\n\n\nTP\nFinish User Entity\n13\nWeek 1\n\n\nTP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nTP\nEnable logging\n5\nWeek 2\n\n\nTP\nCreate REST API\n5\nWeek 2\n\n\nTP\nFinish GamesCollection\n8\nWeek 5\n\n\nDOL\nDeploy workloads on Kubernetes\n13\nWeek 1\n\n\nDOL\nLearn about OpenStack\n21\nWeek 1\n\n\nDOL\nLearn about OKD\n21\nWeek 2\n\n\nDOL\nLearn about Argo workflows\n21\nWeek 2\n\n\nDOL\nLearn about SQL and Postgres\n21\nWeek 2\n\n\nDOL\nLearn about Terraform\n21\nWeek 3\n\n\nDOL\nLearn about Ansible\n21\nWeek 3\n\n\nDOL\nInstall a SMTP server\n13\nWeek 1\n\n\nDOL\nFinish Penpot deployment and documentation\n5\nWeek 3\n\n\nMSX\nTest wired adapter\n5\nWeek 3\n\n\nPMS\nWeekly planning\n8\nWeek 1\n\n\nPMS\nWeekly retrospective\n8\nWeek 1\n\n\nPMS\nMindSet & Lectures\n5\nWeek 1"
  },
  {
    "objectID": "miscellaneous/weekly-planning/05-week-05.html#spring-goal-categorize-and-filter-them-by-importance-and-urgency-based-on-your-roadmap",
    "href": "miscellaneous/weekly-planning/05-week-05.html#spring-goal-categorize-and-filter-them-by-importance-and-urgency-based-on-your-roadmap",
    "title": "05 - Week 05",
    "section": "",
    "text": "Important and urgent:\n\nCP: Swagger and Mockito into Library (W8)\nCP: Finish MongoDB tutorials (W8)\nTP: Finish User Entity (W13)\nTP: Update functional diagrams (W8)\nDOL: Learn about OKD (21)\nDOL: Learn about Argo workflows (21)\nDOL: Learn about Terraform (21)\nDOL: Learn about Ansible (21)\nPMS: Weekly planning (W8)\n\nImportant but not urgent:\n\nCP: Create missing Unit Tests (W8)\nCP: Create Library REST client (W5)\nCP: Migrate H2 to another DB (W13)\nCP: Update soft. script with Postman (W8)\nCP: Enable logging in Java (W8)\nTP: Create missing Unit Tests (W8)\nTP: Enable logging (W5)\nTP: Create REST API (W5)\nCI/CD: Learn GitHub Actions (W13)\nCI/CD: Create staging environment (W13)\nDOL: Deploy workloads on Kubernetes (W13)\nDOL: Learn about SQL and Postgres (W21)\nDOL: Learn about OpenStack (W21)\nMSX: Test wired adapter (W5)\nPMS: Weekly retrospective (W8)\nPMS: MindSet & Lectures (W5)\n\nNot important but urgent:\n\nDOL: Install a SMTP server (W13)\nCI/CD: Install Jenkins (W8)\n\nNeither important nor urgent:\n\nDOL: Finish Penpot deployment and documentation (W5)\nCP: Unify User HTML forms (W5)\nCP: Unify Publications creation (W8)"
  },
  {
    "objectID": "miscellaneous/weekly-planning/05-week-05.html#decision-making-plan-your-week",
    "href": "miscellaneous/weekly-planning/05-week-05.html#decision-making-plan-your-week",
    "title": "05 - Week 05",
    "section": "",
    "text": "Each week, define tasks for each energy slot of the day (3 each day, 5 days a week). At the end of the week, review it to see how many of the tasks have been accomplished. Once done, plan the next week taking into account the feedback from the previous week:\n\n\n\n\n\n\n\n\n\n\n\nWEEK 3\nMONDAY (W34)\nTUESDAY (W26)\nWEDNESDAY (W32)\nTHURSDAY (W34)\nFRIDAY (W37)\n\n\n\n\nMorning\nPMS: Weekly planning (W8)\n\nCP: Enable logging in Java (W8) TP: Finish User Entity (W13)\nCP: Swagger and Mockito into Library (W8)\nTP: Update functional diagrams (W8)\n\n\nAfternoon\n\n\nDOL: Learn about Argo workflows (21)\nDOL: Learn about OKD (21)\nTP: Enable logging (W5)\n\n\nEvening\n\n\nCP: Create missing Unit Tests (W8) CP: Finish MongoDB tutorials (W8)\nTP: Create missing Unit Tests (W8)\nPMS: Weekly retrospective (W8)"
  },
  {
    "objectID": "miscellaneous/weekly-planning/05-week-05.html#ultimate-goal-metrics",
    "href": "miscellaneous/weekly-planning/05-week-05.html#ultimate-goal-metrics",
    "title": "05 - Week 05",
    "section": "",
    "text": "Make a retrospective of the previous week, analyse the results of the planning and take action.\n\nNumber of planned tasks per category:\n\n\n\n\n\n\n\n\n\nCATEGORY\nNUMBER OF PLANNED TASKS\nNUMBER OF COMPLETED TASKS\n\n\n\n\nClass Projects (CP)\n\n\n\n\nTeam Project (TP)\n\n\n\n\nCI/CD\n\n\n\n\nDevOps Learning (DOL)\n\n\n\n\nPlanning and MindSet (PMS)\n\n\n\n\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\nThink about the complexity of the completed tasks and if they matched the expectatives:\n\nIf the task was easier than you thought, move it to lower energies spaces\nIf the task was harder than you though, think about spitting it into less complex tasks\n\n\n\n\nMorning: BSC\nAfternoon: BSC\nEvening: Nothing done\n\n\n\n\n\nMorning: React\n\nCreated WIP project for Open Library requests\nCreated Postman API request to Open Library\n\nAfternoon: BSC\nEvening: BSC\n\n\n\n\n\nMorning:\n\nHelped Sergi with VirtualBox\n\nAfternoon:\nEvening:\n\n\n\n\n\nMorning:\nAfternoon:\nEvening:\n\n\n\n\n\nMorning:\nAfternoon:\nEvening:\n\n\n\n\n\nThink about the reasons why these tasks aren’t done:\n\nDid you lack some kind of resource (knowledge, tools, etc…) to even start it?\nDid you find any obstacle that slowed down your progress? The obstacle can be either internal or external, related or unrelated to the task\nIs this task something that you’ve been dragging along for some time? Is it really necessary?\n\n\n\n\nBSC\n\n\n\n\n\nBSC"
  },
  {
    "objectID": "miscellaneous/weekly-planning/05-week-05.html#retrospective",
    "href": "miscellaneous/weekly-planning/05-week-05.html#retrospective",
    "title": "05 - Week 05",
    "section": "",
    "text": "Based on the previous analysis, identify the weak points of the previous planning, discard useless tasks, reassing new weights to pending tasks and schedule your next week:\n\nBest decision of all week\n\n\n\nAvoided pits\n\n\n\nWhat have you reorganized during this week?\n\n\n\nCore concepts learnt during this week / What have you learned?"
  },
  {
    "objectID": "miscellaneous/weekly-planning/07-week-07.html",
    "href": "miscellaneous/weekly-planning/07-week-07.html",
    "title": "07 - Week 07",
    "section": "",
    "text": "Things to accomplish:\n\nCreate a REST API application with SpringBoot\nLearn to properly define unit tests and integration tests for REST API applications\nCreate the first CI/CD pipeline for a Spring Boot project\nComplete my tasks for the Team Project in Sprint 2\nDeeper understanding of the DevOps methodology\n\n\n\n\n\nCategories:\n\nClass Project (CP)\nTeam Project (TP)\nContinuous Integration/Continuous Delivery (CI/CD)\nDevOps Learning (DOL)\nPlanning & MindSet (PMS)\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\n\n\n\n\nCATEGORY\nTASK\nWEIGHT\nINTRODUCED ON\n\n\n\n\nCP\nCreate Library REST client\n5\nWeek 1\n\n\nCP\nUnify User HTML forms\n5\nWeek 1\n\n\nCP\nUnify Publications creation\n8\nWeek 1\n\n\nCP\nMigrate H2 to another DB\n13\nWeek 1\n\n\nCP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nCP\nUpdate soft. script with Postman\n8\nWeek 2\n\n\nCP\nSwagger and Mockito into Library\n8\nWeek 2\n\n\nCP\nEnable logging in Java\n8\nWeek 2\n\n\nCP\nQuarto: automate weekly planning\n13\nWeek 2\n\n\nCP\nFinish MongoDB tutorials\n8\nWeek 4\n\n\nCP\nFinish React Lab-RE01-1\n8\nWeek 5\n\n\nCP\nFinish React Lab-RE02-1\n8\nWeek 5\n\n\nCP\nFinish React Lab-RE03-1\n8\nWeek 7\n\n\nCI/CD\nLearn GitHub Actions\n13\nWeek 1\n\n\nCI/CD\nInstall Jenkins\n8\nWeek 1\n\n\nCI/CD\nCreate staging environment\n13\nWeek 1\n\n\nTP\nFinish User Entity\n13\nWeek 1\n\n\nTP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nTP\nEnable logging\n5\nWeek 2\n\n\nTP\nCreate REST API\n5\nWeek 2\n\n\nTP\nFinish GamesCollection\n8\nWeek 5\n\n\nDOL\nDeploy workloads on Kubernetes\n13\nWeek 1\n\n\nDOL\nLearn about OpenStack\n21\nWeek 1\n\n\nDOL\nLearn about OKD\n21\nWeek 2\n\n\nDOL\nLearn about Argo workflows\n21\nWeek 2\n\n\nDOL\nLearn about SQL and Postgres\n21\nWeek 2\n\n\nDOL\nLearn about Terraform\n21\nWeek 3\n\n\nDOL\nLearn about Ansible\n21\nWeek 3\n\n\nDOL\nInstall a SMTP server\n13\nWeek 1\n\n\nMSX\nTest wired adapter\n5\nWeek 3\n\n\nPMS\nWeekly planning\n8\nWeek 1\n\n\nPMS\nWeekly retrospective\n8\nWeek 1\n\n\nPMS\nMindSet & Lectures\n5\nWeek 1\n\n\n\n\n\n\n\nImportant and urgent:\n\nCP: Swagger and Mockito into Library (W8)\nCP: Finish MongoDB tutorials (W8)\nTP: Finish User Entity (W13)\nTP: Update functional diagrams (W8)\nDOL: Learn about OKD (21)\nDOL: Learn about Argo workflows (21)\nDOL: Learn about Terraform (21)\nDOL: Learn about Ansible (21)\nPMS: Weekly planning (W8)\n\nImportant but not urgent:\n\nCP: Create missing Unit Tests (W8)\nCP: Create Library REST client (W5)\nCP: Migrate H2 to another DB (W13)\nCP: Update soft. script with Postman (W8)\nCP: Enable logging in Java (W8)\nTP: Create missing Unit Tests (W8)\nTP: Enable logging (W5)\nTP: Create REST API (W5)\nCI/CD: Learn GitHub Actions (W13)\nCI/CD: Create staging environment (W13)\nDOL: Deploy workloads on Kubernetes (W13)\nDOL: Learn about SQL and Postgres (W21)\nDOL: Learn about OpenStack (W21)\nMSX: Test wired adapter (W5)\nPMS: Weekly retrospective (W8)\nPMS: MindSet & Lectures (W5)\n\nNot important but urgent:\n\nDOL: Install a SMTP server (W13)\nCI/CD: Install Jenkins (W8)\n\nNeither important nor urgent:\n\nDOL: Finish Penpot deployment and documentation (W5)\nCP: Unify User HTML forms (W5)\nCP: Unify Publications creation (W8)\n\n\n\n\n\nEach week, define tasks for each energy slot of the day (3 each day, 5 days a week). At the end of the week, review it to see how many of the tasks have been accomplished. Once done, plan the next week taking into account the feedback from the previous week:\n\n\n\n\n\n\n\n\n\n\n\nTIME OF DAY\nMONDAY\nTUESDAY\nWEDNESDAY\nTHURSDAY\nFRIDAY\n\n\n\n\nMorning\nHoliday\nBSC\nPMS: Weekly planning (W8) CP: Enable logging in Java (W8)\nCP: Finish React Lab-RE03-1 (8)\nTP: Update functional diagrams (W8)\n\n\nAfternoon\nHoliday\nBSC\nDOL: Learn about Argo workflows (21)\nDOL: Learn about OKD (21)\nTP: Enable logging (W5)\n\n\nEvening\nHoliday\nBSC\nCP: Create missing Unit Tests (W8) CP: Finish MongoDB tutorials (W8)\nTP: Create missing Unit Tests (W8) TP: Finish User Entity (W13)\nPMS: Weekly retrospective (W8)\n\n\n\n\n\n\nMake a retrospective of the previous week, analyse the results of the planning and take action.\n\nNumber of planned tasks per category:\n\n\n\n\n\n\n\n\n\nCATEGORY\nNUMBER OF PLANNED TASKS\nNUMBER OF COMPLETED TASKS\n\n\n\n\nClass Projects (CP)\n\n\n\n\nTeam Project (TP)\n\n\n\n\nCI/CD\n\n\n\n\nDevOps Learning (DOL)\n\n\n\n\nPlanning and MindSet (PMS)\n\n\n\n\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\nThink about the complexity of the completed tasks and if they matched the expectatives:\n\nIf the task was easier than you thought, move it to lower energies spaces\nIf the task was harder than you though, think about spitting it into less complex tasks\n\n\n\n\nHoliday\nTeam project: improved GamesCollection implementation and defined integration tests\nLecture about brain hemispheres\n\n\n\n\n\nMorning: BSC\nAfternoon: BSC\nEvening: Nothing\n\n\n\n\n\nMorning: React useEffect hook\nAfternoon: BSC\nEvening: Nothing\n\n\n\n\n\nMorning: React + BSC\nAfternoon: BSC –&gt; Docker compose insights\nEvening: Nothing\n\n\n\n\n\nMorning: Docker compose insights + ReactJS useEffect cleanup code\nAfternoon: BSC\nEvening:\n\n\n\n\n\nThink about the reasons why these tasks aren’t done:\n\nDid you lack some kind of resource (knowledge, tools, etc…) to even start it?\nDid you find any obstacle that slowed down your progress? The obstacle can be either internal or external, related or unrelated to the task\nIs this task something that you’ve been dragging along for some time? Is it really necessary?\n\n\n\n\nHoliday\n\n\n\n\n\nDidn’t follow the timetable\n\n\n\n\n\nDidn’t follow the timetable\n\n\n\n\n\nDidn’t follow the timetable\n\n\n\n\n\nDidn’t follow the timetable\n\n\n\n\n\n\nBased on the previous analysis, identify the weak points of the previous planning, discard useless tasks, reassing new weights to pending tasks and schedule your next week:\n\nBest decision of all week\n\nComing to class at 9AM and using the first hour to gear up with pending tasks (Team projects, BSC, etc…)\nFocus on SpringBoot integration tests\n\nThis will make it easier to locally test any interaction with the DB, automating any required check\n\n\nAvoided pits\n\nPits not avoided:\n\nSpringBoot integration tests\nReactJS useEffect hook\n\n\nWhat have you reorganized during this week?\n\nPriorities: energies redirected to DevOps instead of programming\n\nCore concepts learnt during this week / What have you learned?\n\nLearned about Spring Boot tests (Service and access to DB)\n\n\nHave you respected SCRUM cycles? Have you respected learning approach cycles?\n\nNo"
  },
  {
    "objectID": "miscellaneous/weekly-planning/07-week-07.html#roadmap-define-what-you-want-know-your-energy-and-yourself",
    "href": "miscellaneous/weekly-planning/07-week-07.html#roadmap-define-what-you-want-know-your-energy-and-yourself",
    "title": "07 - Week 07",
    "section": "",
    "text": "Things to accomplish:\n\nCreate a REST API application with SpringBoot\nLearn to properly define unit tests and integration tests for REST API applications\nCreate the first CI/CD pipeline for a Spring Boot project\nComplete my tasks for the Team Project in Sprint 2\nDeeper understanding of the DevOps methodology"
  },
  {
    "objectID": "miscellaneous/weekly-planning/07-week-07.html#to-do-list-all-the-tasks-that-you-have-to-do-by-concepts-technologies-tools-etc",
    "href": "miscellaneous/weekly-planning/07-week-07.html#to-do-list-all-the-tasks-that-you-have-to-do-by-concepts-technologies-tools-etc",
    "title": "07 - Week 07",
    "section": "",
    "text": "Categories:\n\nClass Project (CP)\nTeam Project (TP)\nContinuous Integration/Continuous Delivery (CI/CD)\nDevOps Learning (DOL)\nPlanning & MindSet (PMS)\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\n\n\n\n\nCATEGORY\nTASK\nWEIGHT\nINTRODUCED ON\n\n\n\n\nCP\nCreate Library REST client\n5\nWeek 1\n\n\nCP\nUnify User HTML forms\n5\nWeek 1\n\n\nCP\nUnify Publications creation\n8\nWeek 1\n\n\nCP\nMigrate H2 to another DB\n13\nWeek 1\n\n\nCP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nCP\nUpdate soft. script with Postman\n8\nWeek 2\n\n\nCP\nSwagger and Mockito into Library\n8\nWeek 2\n\n\nCP\nEnable logging in Java\n8\nWeek 2\n\n\nCP\nQuarto: automate weekly planning\n13\nWeek 2\n\n\nCP\nFinish MongoDB tutorials\n8\nWeek 4\n\n\nCP\nFinish React Lab-RE01-1\n8\nWeek 5\n\n\nCP\nFinish React Lab-RE02-1\n8\nWeek 5\n\n\nCP\nFinish React Lab-RE03-1\n8\nWeek 7\n\n\nCI/CD\nLearn GitHub Actions\n13\nWeek 1\n\n\nCI/CD\nInstall Jenkins\n8\nWeek 1\n\n\nCI/CD\nCreate staging environment\n13\nWeek 1\n\n\nTP\nFinish User Entity\n13\nWeek 1\n\n\nTP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nTP\nEnable logging\n5\nWeek 2\n\n\nTP\nCreate REST API\n5\nWeek 2\n\n\nTP\nFinish GamesCollection\n8\nWeek 5\n\n\nDOL\nDeploy workloads on Kubernetes\n13\nWeek 1\n\n\nDOL\nLearn about OpenStack\n21\nWeek 1\n\n\nDOL\nLearn about OKD\n21\nWeek 2\n\n\nDOL\nLearn about Argo workflows\n21\nWeek 2\n\n\nDOL\nLearn about SQL and Postgres\n21\nWeek 2\n\n\nDOL\nLearn about Terraform\n21\nWeek 3\n\n\nDOL\nLearn about Ansible\n21\nWeek 3\n\n\nDOL\nInstall a SMTP server\n13\nWeek 1\n\n\nMSX\nTest wired adapter\n5\nWeek 3\n\n\nPMS\nWeekly planning\n8\nWeek 1\n\n\nPMS\nWeekly retrospective\n8\nWeek 1\n\n\nPMS\nMindSet & Lectures\n5\nWeek 1"
  },
  {
    "objectID": "miscellaneous/weekly-planning/07-week-07.html#spring-goal-categorize-and-filter-them-by-importance-and-urgency-based-on-your-roadmap",
    "href": "miscellaneous/weekly-planning/07-week-07.html#spring-goal-categorize-and-filter-them-by-importance-and-urgency-based-on-your-roadmap",
    "title": "07 - Week 07",
    "section": "",
    "text": "Important and urgent:\n\nCP: Swagger and Mockito into Library (W8)\nCP: Finish MongoDB tutorials (W8)\nTP: Finish User Entity (W13)\nTP: Update functional diagrams (W8)\nDOL: Learn about OKD (21)\nDOL: Learn about Argo workflows (21)\nDOL: Learn about Terraform (21)\nDOL: Learn about Ansible (21)\nPMS: Weekly planning (W8)\n\nImportant but not urgent:\n\nCP: Create missing Unit Tests (W8)\nCP: Create Library REST client (W5)\nCP: Migrate H2 to another DB (W13)\nCP: Update soft. script with Postman (W8)\nCP: Enable logging in Java (W8)\nTP: Create missing Unit Tests (W8)\nTP: Enable logging (W5)\nTP: Create REST API (W5)\nCI/CD: Learn GitHub Actions (W13)\nCI/CD: Create staging environment (W13)\nDOL: Deploy workloads on Kubernetes (W13)\nDOL: Learn about SQL and Postgres (W21)\nDOL: Learn about OpenStack (W21)\nMSX: Test wired adapter (W5)\nPMS: Weekly retrospective (W8)\nPMS: MindSet & Lectures (W5)\n\nNot important but urgent:\n\nDOL: Install a SMTP server (W13)\nCI/CD: Install Jenkins (W8)\n\nNeither important nor urgent:\n\nDOL: Finish Penpot deployment and documentation (W5)\nCP: Unify User HTML forms (W5)\nCP: Unify Publications creation (W8)"
  },
  {
    "objectID": "miscellaneous/weekly-planning/07-week-07.html#decision-making-plan-your-week",
    "href": "miscellaneous/weekly-planning/07-week-07.html#decision-making-plan-your-week",
    "title": "07 - Week 07",
    "section": "",
    "text": "Each week, define tasks for each energy slot of the day (3 each day, 5 days a week). At the end of the week, review it to see how many of the tasks have been accomplished. Once done, plan the next week taking into account the feedback from the previous week:\n\n\n\n\n\n\n\n\n\n\n\nTIME OF DAY\nMONDAY\nTUESDAY\nWEDNESDAY\nTHURSDAY\nFRIDAY\n\n\n\n\nMorning\nHoliday\nBSC\nPMS: Weekly planning (W8) CP: Enable logging in Java (W8)\nCP: Finish React Lab-RE03-1 (8)\nTP: Update functional diagrams (W8)\n\n\nAfternoon\nHoliday\nBSC\nDOL: Learn about Argo workflows (21)\nDOL: Learn about OKD (21)\nTP: Enable logging (W5)\n\n\nEvening\nHoliday\nBSC\nCP: Create missing Unit Tests (W8) CP: Finish MongoDB tutorials (W8)\nTP: Create missing Unit Tests (W8) TP: Finish User Entity (W13)\nPMS: Weekly retrospective (W8)"
  },
  {
    "objectID": "miscellaneous/weekly-planning/07-week-07.html#ultimate-goal-metrics",
    "href": "miscellaneous/weekly-planning/07-week-07.html#ultimate-goal-metrics",
    "title": "07 - Week 07",
    "section": "",
    "text": "Make a retrospective of the previous week, analyse the results of the planning and take action.\n\nNumber of planned tasks per category:\n\n\n\n\n\n\n\n\n\nCATEGORY\nNUMBER OF PLANNED TASKS\nNUMBER OF COMPLETED TASKS\n\n\n\n\nClass Projects (CP)\n\n\n\n\nTeam Project (TP)\n\n\n\n\nCI/CD\n\n\n\n\nDevOps Learning (DOL)\n\n\n\n\nPlanning and MindSet (PMS)\n\n\n\n\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\nThink about the complexity of the completed tasks and if they matched the expectatives:\n\nIf the task was easier than you thought, move it to lower energies spaces\nIf the task was harder than you though, think about spitting it into less complex tasks\n\n\n\n\nHoliday\nTeam project: improved GamesCollection implementation and defined integration tests\nLecture about brain hemispheres\n\n\n\n\n\nMorning: BSC\nAfternoon: BSC\nEvening: Nothing\n\n\n\n\n\nMorning: React useEffect hook\nAfternoon: BSC\nEvening: Nothing\n\n\n\n\n\nMorning: React + BSC\nAfternoon: BSC –&gt; Docker compose insights\nEvening: Nothing\n\n\n\n\n\nMorning: Docker compose insights + ReactJS useEffect cleanup code\nAfternoon: BSC\nEvening:\n\n\n\n\n\nThink about the reasons why these tasks aren’t done:\n\nDid you lack some kind of resource (knowledge, tools, etc…) to even start it?\nDid you find any obstacle that slowed down your progress? The obstacle can be either internal or external, related or unrelated to the task\nIs this task something that you’ve been dragging along for some time? Is it really necessary?\n\n\n\n\nHoliday\n\n\n\n\n\nDidn’t follow the timetable\n\n\n\n\n\nDidn’t follow the timetable\n\n\n\n\n\nDidn’t follow the timetable\n\n\n\n\n\nDidn’t follow the timetable"
  },
  {
    "objectID": "miscellaneous/weekly-planning/07-week-07.html#retrospective",
    "href": "miscellaneous/weekly-planning/07-week-07.html#retrospective",
    "title": "07 - Week 07",
    "section": "",
    "text": "Based on the previous analysis, identify the weak points of the previous planning, discard useless tasks, reassing new weights to pending tasks and schedule your next week:\n\nBest decision of all week\n\nComing to class at 9AM and using the first hour to gear up with pending tasks (Team projects, BSC, etc…)\nFocus on SpringBoot integration tests\n\nThis will make it easier to locally test any interaction with the DB, automating any required check\n\n\nAvoided pits\n\nPits not avoided:\n\nSpringBoot integration tests\nReactJS useEffect hook\n\n\nWhat have you reorganized during this week?\n\nPriorities: energies redirected to DevOps instead of programming\n\nCore concepts learnt during this week / What have you learned?\n\nLearned about Spring Boot tests (Service and access to DB)\n\n\nHave you respected SCRUM cycles? Have you respected learning approach cycles?\n\nNo"
  },
  {
    "objectID": "miscellaneous/weekly-planning/04-week-04.html",
    "href": "miscellaneous/weekly-planning/04-week-04.html",
    "title": "04 - Week 04",
    "section": "",
    "text": "Things to accomplish:\n\nCreate a REST API application with SpringBoot\nCreate the first CI/CD pipeline for a Spring Boot project\nComplete my tasks for the Team Project in Sprint 2\nDeeper understanding of the DevOps methodology\n\n\n\n\n\nCategories:\n\nClass Project (CP)\nTeam Project (TP)\nContinuous Integration/Continuous Delivery (CI/CD)\nDevOps Learning (DOL)\nPlanning & MindSet (PMS)\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\n\n\n\n\nCATEGORY\nTASK\nWEIGHT\nINTRODUCED ON\n\n\n\n\nCP\nCreate Library REST client\n5\nWeek 1\n\n\nCP\nUnify User HTML forms\n5\nWeek 1\n\n\nCP\nUnify Publications creation\n8\nWeek 1\n\n\nCP\nMigrate H2 to another DB\n13\nWeek 1\n\n\nCP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nCP\nUpdate soft. script with Postman\n8\nWeek 2\n\n\nCP\nSwagger and Mockito into Library\n8\nWeek 2\n\n\nCP\nEnable logging in Java\n8\nWeek 2\n\n\nCP\nQuarto: automate weekly planning\n13\nWeek 2\n\n\nCP\nIntegrate MongoDB to project\n8\nWeek 4\n\n\nCP\nFinish MongoDB tutorials\n8\nWeek 4\n\n\nCI/CD\nLearn GitHub Actions\n13\nWeek 1\n\n\nCI/CD\nInstall Jenkins\n8\nWeek 1\n\n\nCI/CD\nCreate staging environment\n13\nWeek 1\n\n\nTP\nFinish User Entity\n13\nWeek 1\n\n\nTP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nTP\nEnable logging\n5\nWeek 2\n\n\nTP\nCreate REST API\n5\nWeek 2\n\n\nDOL\nDeploy workloads on Kubernetes\n13\nWeek 1\n\n\nDOL\nLearn about OpenStack\n21\nWeek 1\n\n\nDOL\nLearn about OKD\n21\nWeek 2\n\n\nDOL\nLearn about Python and Django\n13\nWeek 2\n\n\nDOL\nLearn about Argo workflows\n21\nWeek 2\n\n\nDOL\nLearn about SQL and Postgres\n21\nWeek 2\n\n\nDOL\nLearn about Terraform\n21\nWeek 3\n\n\nDOL\nLearn about Ansible\n21\nWeek 3\n\n\nDOL\nInstall a SMTP server\n13\nWeek 1\n\n\nDOL\nFinish Penpot deployment and documentation\n5\nWeek 3\n\n\nMSX\nTest wired adapter\n5\nWeek 3\n\n\nPMS\nWeekly planning\n8\nWeek 1\n\n\nPMS\nWeekly retrospective\n8\nWeek 1\n\n\nPMS\nMindSet & Lectures\n5\nWeek 1\n\n\n\n\n\n\n\nImportant and urgent:\n\nCP: Swagger and Mockito into Library (W8)\nCP: Integrate MongoDB to project (W8)\nCP: Finish MongoDB tutorials (W8)\nTP: Finish User Entity (W13)\nTP: Update functional diagrams (W8)\nDOL: Learn about observability (W13)\nDOL: Learn about OKD (21)\nDOL: Learn about Python and Django (13)\nDOL: Learn about Argo workflows (21)\nDOL: Learn about Terraform (21)\nDOL: Learn about Ansible (21)\nPMS: Weekly planning (W8)\n\nImportant but not urgent:\n\nCP: Create missing Unit Tests (W8)\nCP: Create Library REST client (W5)\nCP: Migrate H2 to another DB (W13)\nCP: Update soft. script with Postman (W8)\nCP: Enable logging in Java (W8)\nTP: Create missing Unit Tests (W8)\nTP: Update UMLs (W5)\nTP: Enable logging (W5)\nTP: Create REST API (W5)\nCI/CD: Learn GitHub Actions (W13)\nCI/CD: Create staging environment (W13)\nDOL: Deploy workloads on Kubernetes (W13)\nDOL: Learn about SQL and Postgres (W21)\nDOL: Learn about OpenStack (W21)\nMSX: Test wired adapter (W5)\nPMS: Weekly retrospective (W8)\nPMS: MindSet & Lectures (W5)\n\nNot important but urgent:\n\nDOL: Install a SMTP server (W13)\nCI/CD: Install Jenkins (W8)\n\nNeither important nor urgent:\n\nDOL: Finish Penpot deployment and documentation (W5)\nCP: Unify User HTML forms (W5)\nCP: Unify Publications creation (W8)\n\n\n\n\n\nEach week, define tasks for each energy slot of the day (3 each day, 5 days a week). At the end of the week, review it to see how many of the tasks have been accomplished. Once done, plan the next week taking into account the feedback from the previous week:\n\n\n\n\n\n\n\n\n\n\n\nWEEK 3\nMONDAY (W34)\nTUESDAY (W26)\nWEDNESDAY (W32)\nTHURSDAY (W34)\nFRIDAY (W37)\n\n\n\n\nMorning\n–\nPMS: Weekly planning (W8) CP: Integrate MongoDB to project (W8)\nCP: Enable logging in Java (W8) TP: Finish User Entity (W13)\nCP: Swagger and Mockito into Library (W8)\nTP: Update functional diagrams (W8)\n\n\nAfternoon\n–\nDOL: Learn about Python and Django (13) DOL: Learn about observability (W13)\nDOL: Learn about Argo workflows (21)\nDOL: Learn about OKD (21)\nTP: Enable logging (W5)\n\n\nEvening\n–\nTP: Update UMLs (W5)\nCP: Create missing Unit Tests (W8) CP: Finish MongoDB tutorials (W8)\nTP: Create missing Unit Tests (W8)\nPMS: Weekly retrospective (W8)\n\n\n\n\n\n\nMake a retrospective of the previous week, analyse the results of the planning and take action.\n\nNumber of planned tasks per category:\n\n\n\n\n\n\n\n\n\nCATEGORY\nNUMBER OF PLANNED TASKS\nNUMBER OF COMPLETED TASKS\n\n\n\n\nClass Projects (CP)\n\n\n\n\nTeam Project (TP)\n\n\n\n\nCI/CD\n\n\n\n\nDevOps Learning (DOL)\n\n\n\n\nPlanning and MindSet (PMS)\n\n\n\n\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\nThink about the complexity of the completed tasks and if they matched the expectatives:\n\nIf the task was easier than you thought, move it to lower energies spaces\nIf the task was harder than you though, think about spitting it into less complex tasks\n\n\n\n\nHoliday\n\n\n\n\n\nMorning: Weekly planning done. Started MongoDB tutorials\nAfternoon: Nothing done\nEvening: Nothing done\n\n\n\n\n\nMorning:\n\nCloud MongoDB integration into LibraryManagement project (only BookImage objects)\nFinished Python + Django REST API tutorial, endpoints tested using Postman\n\nAfternoon: Finished Practical Observability course\nEvening: Finished Practical Observability course\n\n\n\n\n\nMorning: Team meeting, compared current tasks progress and defined new workflow approaches for frontend tasks\nAfternoon: Worked on Team project tasks\nEvening: Worked on Team project tasks\n\n\n\n\n\nMorning:\nAfternoon:\nEvening:\n\n\n\n\n\nThink about the reasons why these tasks aren’t done:\n\nDid you lack some kind of resource (knowledge, tools, etc…) to even start it?\nDid you find any obstacle that slowed down your progress? The obstacle can be either internal or external, related or unrelated to the task\nIs this task something that you’ve been dragging along for some time? Is it really necessary?\n\n\n\n\nHoliday\n\n\n\n\n\nNothing done, no reason at all\n\n\n\n\n\nReplaced tasks with the pending ones from Tuesday\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBased on the previous analysis, identify the weak points of the previous planning, discard useless tasks, reassing new weights to pending tasks and schedule your next week:\n\nBest decision of all week\n\n\n\nAvoided pits\n\n\n\nWhat have you reorganized during this week?\n\nSelf-learning sessions\n\nCore concepts learnt during this week / What have you learned?\n\nBasic principles of system observability\nIntegrate MongoDB into Java projects\nPython + Django API\nTeam management (OpenProject)"
  },
  {
    "objectID": "miscellaneous/weekly-planning/04-week-04.html#roadmap-define-what-you-want-know-your-energy-and-yourself",
    "href": "miscellaneous/weekly-planning/04-week-04.html#roadmap-define-what-you-want-know-your-energy-and-yourself",
    "title": "04 - Week 04",
    "section": "",
    "text": "Things to accomplish:\n\nCreate a REST API application with SpringBoot\nCreate the first CI/CD pipeline for a Spring Boot project\nComplete my tasks for the Team Project in Sprint 2\nDeeper understanding of the DevOps methodology"
  },
  {
    "objectID": "miscellaneous/weekly-planning/04-week-04.html#to-do-list-all-the-tasks-that-you-have-to-do-by-concepts-technologies-tools-etc",
    "href": "miscellaneous/weekly-planning/04-week-04.html#to-do-list-all-the-tasks-that-you-have-to-do-by-concepts-technologies-tools-etc",
    "title": "04 - Week 04",
    "section": "",
    "text": "Categories:\n\nClass Project (CP)\nTeam Project (TP)\nContinuous Integration/Continuous Delivery (CI/CD)\nDevOps Learning (DOL)\nPlanning & MindSet (PMS)\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\n\n\n\n\nCATEGORY\nTASK\nWEIGHT\nINTRODUCED ON\n\n\n\n\nCP\nCreate Library REST client\n5\nWeek 1\n\n\nCP\nUnify User HTML forms\n5\nWeek 1\n\n\nCP\nUnify Publications creation\n8\nWeek 1\n\n\nCP\nMigrate H2 to another DB\n13\nWeek 1\n\n\nCP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nCP\nUpdate soft. script with Postman\n8\nWeek 2\n\n\nCP\nSwagger and Mockito into Library\n8\nWeek 2\n\n\nCP\nEnable logging in Java\n8\nWeek 2\n\n\nCP\nQuarto: automate weekly planning\n13\nWeek 2\n\n\nCP\nIntegrate MongoDB to project\n8\nWeek 4\n\n\nCP\nFinish MongoDB tutorials\n8\nWeek 4\n\n\nCI/CD\nLearn GitHub Actions\n13\nWeek 1\n\n\nCI/CD\nInstall Jenkins\n8\nWeek 1\n\n\nCI/CD\nCreate staging environment\n13\nWeek 1\n\n\nTP\nFinish User Entity\n13\nWeek 1\n\n\nTP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nTP\nEnable logging\n5\nWeek 2\n\n\nTP\nCreate REST API\n5\nWeek 2\n\n\nDOL\nDeploy workloads on Kubernetes\n13\nWeek 1\n\n\nDOL\nLearn about OpenStack\n21\nWeek 1\n\n\nDOL\nLearn about OKD\n21\nWeek 2\n\n\nDOL\nLearn about Python and Django\n13\nWeek 2\n\n\nDOL\nLearn about Argo workflows\n21\nWeek 2\n\n\nDOL\nLearn about SQL and Postgres\n21\nWeek 2\n\n\nDOL\nLearn about Terraform\n21\nWeek 3\n\n\nDOL\nLearn about Ansible\n21\nWeek 3\n\n\nDOL\nInstall a SMTP server\n13\nWeek 1\n\n\nDOL\nFinish Penpot deployment and documentation\n5\nWeek 3\n\n\nMSX\nTest wired adapter\n5\nWeek 3\n\n\nPMS\nWeekly planning\n8\nWeek 1\n\n\nPMS\nWeekly retrospective\n8\nWeek 1\n\n\nPMS\nMindSet & Lectures\n5\nWeek 1"
  },
  {
    "objectID": "miscellaneous/weekly-planning/04-week-04.html#spring-goal-categorize-and-filter-them-by-importance-and-urgency-based-on-your-roadmap",
    "href": "miscellaneous/weekly-planning/04-week-04.html#spring-goal-categorize-and-filter-them-by-importance-and-urgency-based-on-your-roadmap",
    "title": "04 - Week 04",
    "section": "",
    "text": "Important and urgent:\n\nCP: Swagger and Mockito into Library (W8)\nCP: Integrate MongoDB to project (W8)\nCP: Finish MongoDB tutorials (W8)\nTP: Finish User Entity (W13)\nTP: Update functional diagrams (W8)\nDOL: Learn about observability (W13)\nDOL: Learn about OKD (21)\nDOL: Learn about Python and Django (13)\nDOL: Learn about Argo workflows (21)\nDOL: Learn about Terraform (21)\nDOL: Learn about Ansible (21)\nPMS: Weekly planning (W8)\n\nImportant but not urgent:\n\nCP: Create missing Unit Tests (W8)\nCP: Create Library REST client (W5)\nCP: Migrate H2 to another DB (W13)\nCP: Update soft. script with Postman (W8)\nCP: Enable logging in Java (W8)\nTP: Create missing Unit Tests (W8)\nTP: Update UMLs (W5)\nTP: Enable logging (W5)\nTP: Create REST API (W5)\nCI/CD: Learn GitHub Actions (W13)\nCI/CD: Create staging environment (W13)\nDOL: Deploy workloads on Kubernetes (W13)\nDOL: Learn about SQL and Postgres (W21)\nDOL: Learn about OpenStack (W21)\nMSX: Test wired adapter (W5)\nPMS: Weekly retrospective (W8)\nPMS: MindSet & Lectures (W5)\n\nNot important but urgent:\n\nDOL: Install a SMTP server (W13)\nCI/CD: Install Jenkins (W8)\n\nNeither important nor urgent:\n\nDOL: Finish Penpot deployment and documentation (W5)\nCP: Unify User HTML forms (W5)\nCP: Unify Publications creation (W8)"
  },
  {
    "objectID": "miscellaneous/weekly-planning/04-week-04.html#decision-making-plan-your-week",
    "href": "miscellaneous/weekly-planning/04-week-04.html#decision-making-plan-your-week",
    "title": "04 - Week 04",
    "section": "",
    "text": "Each week, define tasks for each energy slot of the day (3 each day, 5 days a week). At the end of the week, review it to see how many of the tasks have been accomplished. Once done, plan the next week taking into account the feedback from the previous week:\n\n\n\n\n\n\n\n\n\n\n\nWEEK 3\nMONDAY (W34)\nTUESDAY (W26)\nWEDNESDAY (W32)\nTHURSDAY (W34)\nFRIDAY (W37)\n\n\n\n\nMorning\n–\nPMS: Weekly planning (W8) CP: Integrate MongoDB to project (W8)\nCP: Enable logging in Java (W8) TP: Finish User Entity (W13)\nCP: Swagger and Mockito into Library (W8)\nTP: Update functional diagrams (W8)\n\n\nAfternoon\n–\nDOL: Learn about Python and Django (13) DOL: Learn about observability (W13)\nDOL: Learn about Argo workflows (21)\nDOL: Learn about OKD (21)\nTP: Enable logging (W5)\n\n\nEvening\n–\nTP: Update UMLs (W5)\nCP: Create missing Unit Tests (W8) CP: Finish MongoDB tutorials (W8)\nTP: Create missing Unit Tests (W8)\nPMS: Weekly retrospective (W8)"
  },
  {
    "objectID": "miscellaneous/weekly-planning/04-week-04.html#ultimate-goal-metrics",
    "href": "miscellaneous/weekly-planning/04-week-04.html#ultimate-goal-metrics",
    "title": "04 - Week 04",
    "section": "",
    "text": "Make a retrospective of the previous week, analyse the results of the planning and take action.\n\nNumber of planned tasks per category:\n\n\n\n\n\n\n\n\n\nCATEGORY\nNUMBER OF PLANNED TASKS\nNUMBER OF COMPLETED TASKS\n\n\n\n\nClass Projects (CP)\n\n\n\n\nTeam Project (TP)\n\n\n\n\nCI/CD\n\n\n\n\nDevOps Learning (DOL)\n\n\n\n\nPlanning and MindSet (PMS)\n\n\n\n\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\nThink about the complexity of the completed tasks and if they matched the expectatives:\n\nIf the task was easier than you thought, move it to lower energies spaces\nIf the task was harder than you though, think about spitting it into less complex tasks\n\n\n\n\nHoliday\n\n\n\n\n\nMorning: Weekly planning done. Started MongoDB tutorials\nAfternoon: Nothing done\nEvening: Nothing done\n\n\n\n\n\nMorning:\n\nCloud MongoDB integration into LibraryManagement project (only BookImage objects)\nFinished Python + Django REST API tutorial, endpoints tested using Postman\n\nAfternoon: Finished Practical Observability course\nEvening: Finished Practical Observability course\n\n\n\n\n\nMorning: Team meeting, compared current tasks progress and defined new workflow approaches for frontend tasks\nAfternoon: Worked on Team project tasks\nEvening: Worked on Team project tasks\n\n\n\n\n\nMorning:\nAfternoon:\nEvening:\n\n\n\n\n\nThink about the reasons why these tasks aren’t done:\n\nDid you lack some kind of resource (knowledge, tools, etc…) to even start it?\nDid you find any obstacle that slowed down your progress? The obstacle can be either internal or external, related or unrelated to the task\nIs this task something that you’ve been dragging along for some time? Is it really necessary?\n\n\n\n\nHoliday\n\n\n\n\n\nNothing done, no reason at all\n\n\n\n\n\nReplaced tasks with the pending ones from Tuesday"
  },
  {
    "objectID": "miscellaneous/weekly-planning/04-week-04.html#retrospective",
    "href": "miscellaneous/weekly-planning/04-week-04.html#retrospective",
    "title": "04 - Week 04",
    "section": "",
    "text": "Based on the previous analysis, identify the weak points of the previous planning, discard useless tasks, reassing new weights to pending tasks and schedule your next week:\n\nBest decision of all week\n\n\n\nAvoided pits\n\n\n\nWhat have you reorganized during this week?\n\nSelf-learning sessions\n\nCore concepts learnt during this week / What have you learned?\n\nBasic principles of system observability\nIntegrate MongoDB into Java projects\nPython + Django API\nTeam management (OpenProject)"
  },
  {
    "objectID": "miscellaneous/weekly-planning/01-week-01.html",
    "href": "miscellaneous/weekly-planning/01-week-01.html",
    "title": "01 - Week 01",
    "section": "",
    "text": "Things to accomplish:\n\nFinish the Library Web application using Web Controller (GET/POST)\nCreate a REST API application with SpringBoot\nCreate the first CI/CD pipeline for a Spring Boot project\nComplete my tasks for the Team Project in Sprint 2\nDeeper understanding of the DevOps methodology\n\n\n\n\n\nCategories:\n\nClass Project (CP)\nTeam Project (TP)\nContinuous Integration/Continuous Delivery (CI/CD)\nDevOps Learning (DOL)\nPlanning & MindSet (PMS)\n\n\n\n\n\nCATEGORY\nTASK\nWEIGHT\n\n\n\n\nCP\nFinish Borrow Entity\n8\n\n\nCP\nAdd HTTP session login\n8\n\n\nCP\nCreate Library REST API\n8\n\n\nCP\nCreate Library REST client\n5\n\n\nCP\nUnify User HTML forms\n5\n\n\nCP\nUnify Publications creation\n8\n\n\nCP\nMigrate H2 to another DB\n13\n\n\nCP\nUpdate Quarto docs\n5\n\n\nCP\nCreate missing Unit Tests\n8\n\n\nCP\nReview GitHub issues\n3\n\n\nCP\nCreate GitHub issues\n3\n\n\nCI/CD\nLearn GitHub Actions\n13\n\n\nCI/CD\nInstall Jenkins\n8\n\n\nCI/CD\nCreate staging environment\n13\n\n\nTP\nReview Team Project status\n5\n\n\nTP\nFinish User Entity\n13\n\n\nTP\nFinish Vertical Slicing designs\n13\n\n\nTP\nCreate missing Unit Tests\n8\n\n\nTP\nDo a weekly scrum\n8\n\n\nTP\nUpdate OpenProject tasks\n8\n\n\nDOL\nLearn about observability\n13\n\n\nDOL\nDeploy workloads on Kubernetes\n13\n\n\nDOL\nLearn about OpenStack\n21\n\n\nDOL\nInstall a SMTP server\n13\n\n\nDOL\nUpdate Quarto docs\n8\n\n\nPMS\nWeekly retrospective\n8\n\n\nPMS\nWeekly planning\n8\n\n\nPMS\nMindSet & Lectures\n5\n\n\n\n\n\n\n27 tasks:\n\nImportant and urgent (6):\n\nCP: Finish Borrow Entity (W8)\nTP: Review Team project status (W5)\nTP: Finish User Entity (W13)\nTP: Update functional diagrams (W8)\nTP: Finish Vertical Slicing designs (W13)\nDOL: Learn about observability (W13)\nPMS: Weekly planning (W8)\n\nImportant but not urgent (16):\n\nCP: Create missing Unit Tests (W8)\nCP: Add HTTP Session login (W8)\nCP: Unify User HTML forms (W5)\nCP: Unify Publications creation (W8)\nCP: Review GitHub issues (W3)\nCP: Create GitHub issues (W3)\nCP: Create Library REST API (W8)\nCP: Create Library REST client (W5)\nCP: Migrate H2 to another DB (W13)\nTP: Do a weekly scrum (W8)\nTP: Create missing Unit Tests (W8)\nTP: Update UMLs (W5)\nCI/CD: Learn GitHub Actions (W13)\nCI/CD: Create staging environment (W13)\nDOL: Deploy workloads on Kubernetes (W13)\nDOL: Update Quarto docs (W3)\nPMS: Weekly retrospective (W8)\nPMS: MindSet & Lectures (W5)\n\nNot important but urgent (5):\n\nCP: Update Quarto docs (W3)\nTP: Update OpenProject tasks (W8)\nDOL: Install a SMTP server (W13)\nCI/CD: Install Jenkins (W8)\nDOL: Learn about OpenStack (W21)\n\nNeither important nor urgent:\n\n\n\n\n\n\n\nEach week, define tasks for each energy slot of the day (3 each day, 5 days a week). At the end of the week, review it to see how many of the tasks have been accomplished. Once done, plan the next week taking into account the feedback from the previous week:\n\nWeek 1:\n\n\n\n\n\n\n\n\n\n\n\n\nWEEK 1\nMONDAY (W16)\nTUESDAY (W24)\nWEDNESDAY (W24)\nTHURSDAY (W47)\nFRIDAY (W34)\n\n\n\n\nMorning\nCP: Review GitHub issues (W3)\nTP: Do a weekly scrum (W8)\nCP: Add HTTP Session login (W8)\nTP: Update OpenProject tasks (W8) TP: Finish User Entity (W13)\nCI/CD: Learn GitHub Actions (W13)\n\n\nAfternoon\nTP: Review Team project status (W5)\nCP: Update Quarto docs (W3)\nCP: Create Library REST API (W8)\nCP: Migrate H2 to another database (W13)\nDOL: Install a SMTP server (W13)\n\n\nEvening\nCP: Finish Borrow Entity (W8)\nDOL: Learn about observability (W13)\nCP: Create Library REST client (W8)\nTP: Finish Vertical Slicing designs (W13)\nPMS: Weekly retrospective (W8)\n\n\n\n\n\n\nMake a retrospective of the previous week, analyse the results of the planning and take action.\n\nNumber of planned tasks per category:\n\n\n\n\n\n\n\n\n\nCATEGORY\nNUMBER OF PLANNED TASKS\nNUMBER OF COMPLETED TASKS\n\n\n\n\nClass Projects (CP)\n7 (W51)\n\n\n\nTeam Project (TP)\n5 (W47)\n\n\n\nCI/CD\n1 (W13)\n\n\n\nDevOps Learning (DOL)\n2 (W26)\n\n\n\nPlanning and MindSet (PMS)\n1 (W8)\n\n\n\n\n\n\nThink about the complexity of the completed tasks and if they matched the expectatives:\n\nIf the task was easier than you thought, move it to lower energies spaces\nIf the task was harder than you though, think about spitting it into less complex tasks\n\nCompleted tasks:\n\nCP: Review GitHub issues (W3)\nTP: Review Team project status (W5) –&gt; Quick check on the OpenProject tasks status\nCP: Finish Borrow Entity (W8) –&gt; Completed the day after because Monday afternoon and evening I couldn’t work\nCP: Update Quarto docs (W3) –&gt; Already done during previous tasks\nCP: Add HTTP Session login (W8) –&gt; Completed on Wednesday morning instead of [TP: Finish User Entity (W13)]\nTP: Update OpenProject tasks (W8) –&gt; Rought review of the tasks status, then added [TP: Finish User Entity (W13)] task in the same slot\nTP: Do a weekly scrum (W8) –&gt; Done on Friday\n\n\n\n\nThink about the reasons why these tasks aren’t done:\n\nDid you lack some kind of resource (knowledge, tools, etc…) to even start it?\nDid you find any obstacle that slowed down your progress? The obstacle can be either internal or external, related or unrelated to the task\nIs this task something that you’ve been dragging along for some time? Is it really necessary?\nTP: Review Team project status (W5) –&gt; Monday afternoon I wasn’t available for work\nTP: Do a weekly scrum (W8) –&gt; Tuesday morning the team didn’t meet\nDOL: Learn about observability (W13) –&gt; Tuesday evening I didn’t work, no reason at all\n\n\n\n\n\nBased on the previous analysis, identify the weak points of the previous planning, discard useless tasks, reassing new weights to pending tasks and schedule your next week:\n\nAt the end of the week I had more energy in the morning, I could complete some high-energy tasks there. This week I’ll stick to the plan of doing low~mid-energy tasks in the morning, see if the pattern from previous week repeats\nOn afternoon and evenings I couldn’t get in the mood of working. This week I’ll try to get to work earlier after lunch, doing some 10-min tasks to build momentum"
  },
  {
    "objectID": "miscellaneous/weekly-planning/01-week-01.html#roadmap-define-what-you-want-know-your-energy-and-yourself",
    "href": "miscellaneous/weekly-planning/01-week-01.html#roadmap-define-what-you-want-know-your-energy-and-yourself",
    "title": "01 - Week 01",
    "section": "",
    "text": "Things to accomplish:\n\nFinish the Library Web application using Web Controller (GET/POST)\nCreate a REST API application with SpringBoot\nCreate the first CI/CD pipeline for a Spring Boot project\nComplete my tasks for the Team Project in Sprint 2\nDeeper understanding of the DevOps methodology"
  },
  {
    "objectID": "miscellaneous/weekly-planning/01-week-01.html#to-do-list-all-the-tasks-that-you-have-to-do-by-concepts-technologies-tools-etc",
    "href": "miscellaneous/weekly-planning/01-week-01.html#to-do-list-all-the-tasks-that-you-have-to-do-by-concepts-technologies-tools-etc",
    "title": "01 - Week 01",
    "section": "",
    "text": "Categories:\n\nClass Project (CP)\nTeam Project (TP)\nContinuous Integration/Continuous Delivery (CI/CD)\nDevOps Learning (DOL)\nPlanning & MindSet (PMS)\n\n\n\n\n\nCATEGORY\nTASK\nWEIGHT\n\n\n\n\nCP\nFinish Borrow Entity\n8\n\n\nCP\nAdd HTTP session login\n8\n\n\nCP\nCreate Library REST API\n8\n\n\nCP\nCreate Library REST client\n5\n\n\nCP\nUnify User HTML forms\n5\n\n\nCP\nUnify Publications creation\n8\n\n\nCP\nMigrate H2 to another DB\n13\n\n\nCP\nUpdate Quarto docs\n5\n\n\nCP\nCreate missing Unit Tests\n8\n\n\nCP\nReview GitHub issues\n3\n\n\nCP\nCreate GitHub issues\n3\n\n\nCI/CD\nLearn GitHub Actions\n13\n\n\nCI/CD\nInstall Jenkins\n8\n\n\nCI/CD\nCreate staging environment\n13\n\n\nTP\nReview Team Project status\n5\n\n\nTP\nFinish User Entity\n13\n\n\nTP\nFinish Vertical Slicing designs\n13\n\n\nTP\nCreate missing Unit Tests\n8\n\n\nTP\nDo a weekly scrum\n8\n\n\nTP\nUpdate OpenProject tasks\n8\n\n\nDOL\nLearn about observability\n13\n\n\nDOL\nDeploy workloads on Kubernetes\n13\n\n\nDOL\nLearn about OpenStack\n21\n\n\nDOL\nInstall a SMTP server\n13\n\n\nDOL\nUpdate Quarto docs\n8\n\n\nPMS\nWeekly retrospective\n8\n\n\nPMS\nWeekly planning\n8\n\n\nPMS\nMindSet & Lectures\n5"
  },
  {
    "objectID": "miscellaneous/weekly-planning/01-week-01.html#spring-goal-categorize-and-filter-them-by-importance-and-urgency-based-on-your-roadmap",
    "href": "miscellaneous/weekly-planning/01-week-01.html#spring-goal-categorize-and-filter-them-by-importance-and-urgency-based-on-your-roadmap",
    "title": "01 - Week 01",
    "section": "",
    "text": "27 tasks:\n\nImportant and urgent (6):\n\nCP: Finish Borrow Entity (W8)\nTP: Review Team project status (W5)\nTP: Finish User Entity (W13)\nTP: Update functional diagrams (W8)\nTP: Finish Vertical Slicing designs (W13)\nDOL: Learn about observability (W13)\nPMS: Weekly planning (W8)\n\nImportant but not urgent (16):\n\nCP: Create missing Unit Tests (W8)\nCP: Add HTTP Session login (W8)\nCP: Unify User HTML forms (W5)\nCP: Unify Publications creation (W8)\nCP: Review GitHub issues (W3)\nCP: Create GitHub issues (W3)\nCP: Create Library REST API (W8)\nCP: Create Library REST client (W5)\nCP: Migrate H2 to another DB (W13)\nTP: Do a weekly scrum (W8)\nTP: Create missing Unit Tests (W8)\nTP: Update UMLs (W5)\nCI/CD: Learn GitHub Actions (W13)\nCI/CD: Create staging environment (W13)\nDOL: Deploy workloads on Kubernetes (W13)\nDOL: Update Quarto docs (W3)\nPMS: Weekly retrospective (W8)\nPMS: MindSet & Lectures (W5)\n\nNot important but urgent (5):\n\nCP: Update Quarto docs (W3)\nTP: Update OpenProject tasks (W8)\nDOL: Install a SMTP server (W13)\nCI/CD: Install Jenkins (W8)\nDOL: Learn about OpenStack (W21)\n\nNeither important nor urgent:"
  },
  {
    "objectID": "miscellaneous/weekly-planning/01-week-01.html#decision-making-plan-your-week",
    "href": "miscellaneous/weekly-planning/01-week-01.html#decision-making-plan-your-week",
    "title": "01 - Week 01",
    "section": "",
    "text": "Each week, define tasks for each energy slot of the day (3 each day, 5 days a week). At the end of the week, review it to see how many of the tasks have been accomplished. Once done, plan the next week taking into account the feedback from the previous week:\n\nWeek 1:\n\n\n\n\n\n\n\n\n\n\n\n\nWEEK 1\nMONDAY (W16)\nTUESDAY (W24)\nWEDNESDAY (W24)\nTHURSDAY (W47)\nFRIDAY (W34)\n\n\n\n\nMorning\nCP: Review GitHub issues (W3)\nTP: Do a weekly scrum (W8)\nCP: Add HTTP Session login (W8)\nTP: Update OpenProject tasks (W8) TP: Finish User Entity (W13)\nCI/CD: Learn GitHub Actions (W13)\n\n\nAfternoon\nTP: Review Team project status (W5)\nCP: Update Quarto docs (W3)\nCP: Create Library REST API (W8)\nCP: Migrate H2 to another database (W13)\nDOL: Install a SMTP server (W13)\n\n\nEvening\nCP: Finish Borrow Entity (W8)\nDOL: Learn about observability (W13)\nCP: Create Library REST client (W8)\nTP: Finish Vertical Slicing designs (W13)\nPMS: Weekly retrospective (W8)"
  },
  {
    "objectID": "miscellaneous/weekly-planning/01-week-01.html#ultimate-goal-metrics",
    "href": "miscellaneous/weekly-planning/01-week-01.html#ultimate-goal-metrics",
    "title": "01 - Week 01",
    "section": "",
    "text": "Make a retrospective of the previous week, analyse the results of the planning and take action.\n\nNumber of planned tasks per category:\n\n\n\n\n\n\n\n\n\nCATEGORY\nNUMBER OF PLANNED TASKS\nNUMBER OF COMPLETED TASKS\n\n\n\n\nClass Projects (CP)\n7 (W51)\n\n\n\nTeam Project (TP)\n5 (W47)\n\n\n\nCI/CD\n1 (W13)\n\n\n\nDevOps Learning (DOL)\n2 (W26)\n\n\n\nPlanning and MindSet (PMS)\n1 (W8)\n\n\n\n\n\n\nThink about the complexity of the completed tasks and if they matched the expectatives:\n\nIf the task was easier than you thought, move it to lower energies spaces\nIf the task was harder than you though, think about spitting it into less complex tasks\n\nCompleted tasks:\n\nCP: Review GitHub issues (W3)\nTP: Review Team project status (W5) –&gt; Quick check on the OpenProject tasks status\nCP: Finish Borrow Entity (W8) –&gt; Completed the day after because Monday afternoon and evening I couldn’t work\nCP: Update Quarto docs (W3) –&gt; Already done during previous tasks\nCP: Add HTTP Session login (W8) –&gt; Completed on Wednesday morning instead of [TP: Finish User Entity (W13)]\nTP: Update OpenProject tasks (W8) –&gt; Rought review of the tasks status, then added [TP: Finish User Entity (W13)] task in the same slot\nTP: Do a weekly scrum (W8) –&gt; Done on Friday\n\n\n\n\nThink about the reasons why these tasks aren’t done:\n\nDid you lack some kind of resource (knowledge, tools, etc…) to even start it?\nDid you find any obstacle that slowed down your progress? The obstacle can be either internal or external, related or unrelated to the task\nIs this task something that you’ve been dragging along for some time? Is it really necessary?\nTP: Review Team project status (W5) –&gt; Monday afternoon I wasn’t available for work\nTP: Do a weekly scrum (W8) –&gt; Tuesday morning the team didn’t meet\nDOL: Learn about observability (W13) –&gt; Tuesday evening I didn’t work, no reason at all"
  },
  {
    "objectID": "miscellaneous/weekly-planning/01-week-01.html#retrospective",
    "href": "miscellaneous/weekly-planning/01-week-01.html#retrospective",
    "title": "01 - Week 01",
    "section": "",
    "text": "Based on the previous analysis, identify the weak points of the previous planning, discard useless tasks, reassing new weights to pending tasks and schedule your next week:\n\nAt the end of the week I had more energy in the morning, I could complete some high-energy tasks there. This week I’ll stick to the plan of doing low~mid-energy tasks in the morning, see if the pattern from previous week repeats\nOn afternoon and evenings I couldn’t get in the mood of working. This week I’ll try to get to work earlier after lunch, doing some 10-min tasks to build momentum"
  },
  {
    "objectID": "miscellaneous/weekly-planning/02-week-02.html",
    "href": "miscellaneous/weekly-planning/02-week-02.html",
    "title": "02 - Week 02",
    "section": "",
    "text": "Things to accomplish:\n\nFinish the Library Web application using Web Controller (GET/POST)\nCreate a REST API application with SpringBoot\nCreate the first CI/CD pipeline for a Spring Boot project\nComplete my tasks for the Team Project in Sprint 2\nDeeper understanding of the DevOps methodology\n\n\n\n\n\nCategories:\n\nClass Project (CP)\nTeam Project (TP)\nContinuous Integration/Continuous Delivery (CI/CD)\nDevOps Learning (DOL)\nPlanning & MindSet (PMS)\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\n\n\n\n\nCATEGORY\nTASK\nWEIGHT\nINTRODUCED ON\n\n\n\n\nCP\nCreate Library REST API\n8\nWeek 1\n\n\nCP\nCreate Library REST client\n5\nWeek 1\n\n\nCP\nUnify User HTML forms\n5\nWeek 1\n\n\nCP\nUnify Publications creation\n8\nWeek 1\n\n\nCP\nMigrate H2 to another DB\n13\nWeek 1\n\n\nCP\nUpdate Quarto docs\n5\nWeek 1\n\n\nCP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nCP\nCreate GitHub issues\n3\nWeek 1\n\n\nCP\nComplete SonarQube GitHub action\n13\nWeek 2\n\n\nCP\nUpdate soft. script with Postman\n8\nWeek 2\n\n\nCP\nSwagger and Mockito into Library\n8\nWeek 2\n\n\nCP\nEnable logging in Java\n8\nWeek 2\n\n\nCP\nQuarto: automate weekly planning\n13\nWeek 2\n\n\nCI/CD\nLearn GitHub Actions\n13\nWeek 1\n\n\nCI/CD\nInstall Jenkins\n8\nWeek 1\n\n\nCI/CD\nCreate staging environment\n13\nWeek 1\n\n\nTP\nFinish User Entity\n13\nWeek 1\n\n\nTP\nFinish Vertical Slicing designs\n13\nWeek 1\n\n\nTP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nTP\nEnable logging\n5\nWeek 2\n\n\nTP\nCreate REST API\n5\nWeek 2\n\n\nDOL\nLearn about observability\n13\nWeek 1\n\n\nDOL\nDeploy workloads on Kubernetes\n13\nWeek 1\n\n\nDOL\nLearn about OpenStack\n21\nWeek 1\n\n\nDOL\nLearn about OKD\n21\nWeek 2\n\n\nDOL\nLearn about Python and Flask\n13\nWeek 2\n\n\nDOL\nLearn about Argo workflows\n21\nWeek 2\n\n\nDOL\nLearn about SQL and Postgres\n21\nWeek 2\n\n\nDOL\nInstall a SMTP server\n13\nWeek 1\n\n\nDOL\nUpdate Quarto docs\n8\nWeek 1\n\n\nMSX\nAdapters and gamepads study\n5\nWeek 2\n\n\nMSX\nMSX-Mega v3 design\n21\nWeek 2\n\n\nPMS\nWeekly retrospective\n8\nWeek 1\n\n\nPMS\nWeekly planning\n8\nWeek 1\n\n\nPMS\nMindSet & Lectures\n5\nWeek 1\n\n\n\n\n\n\n27 tasks:\n\nImportant and urgent (9):\n\nCP: Complete SonarQube GitHub action (W13)\nCP: Swagger and Mockito into Library (W8)\nTP: Finish User Entity (W13)\nTP: Update functional diagrams (W8)\nTP: Finish Vertical Slicing designs (W13)\nDOL: Learn about observability (W13)\nDOL: Learn about OKD (21)\nDOL: Learn about Python and Flask (13)\nDOL: Learn about Argo workflows (21)\nPMS: Weekly planning (W8)\n\nImportant but not urgent (19):\n\nCP: Create missing Unit Tests (W8)\nCP: Unify User HTML forms (W5)\nCP: Unify Publications creation (W8)\nCP: Create GitHub issues (W3)\nCP: Create Library REST API (W8)\nCP: Create Library REST client (W5)\nCP: Migrate H2 to another DB (W13)\nCP: Update soft. script with Postman (W8)\nCP: Enable logging in Java (W8)\nTP: Create missing Unit Tests (W8)\nTP: Update UMLs (W5)\nTP: Enable logging (W5)\nTP: Create REST API (W5)\nCI/CD: Learn GitHub Actions (W13)\nCI/CD: Create staging environment (W13)\nDOL: Deploy workloads on Kubernetes (W13)\nDOL: Update Quarto docs (W3)\nDOL: Learn about SQL and Postgres (W21)\nMSX: Adapters and gamepads study (W5)\nMSX: MSX-Mega v3 design (W21)\nPMS: Weekly retrospective (W8)\nPMS: MindSet & Lectures (W5)\n\nNot important but urgent (5):\n\nDOL: Install a SMTP server (W13)\nCI/CD: Install Jenkins (W8)\nDOL: Learn about OpenStack (W21)\n\nNeither important nor urgent:\n\n\n\n\n\n\n\nEach week, define tasks for each energy slot of the day (3 each day, 5 days a week). At the end of the week, review it to see how many of the tasks have been accomplished. Once done, plan the next week taking into account the feedback from the previous week:\n\nWeek 2:\n\n\n\n\n\n\n\n\n\n\n\n\nWEEK 2\nMONDAY (W34)\nTUESDAY (W26)\nWEDNESDAY (W32)\nTHURSDAY (W34)\nFRIDAY (W37)\n\n\n\n\nMorning\nPMS: Weekly planning (W8)\nCP: Create Library REST API (W8)\nDOL: Update Quarto docs (W3)\nTP: Finish Vertical Slicing designs (W13)\nTP: Update functional diagrams (W8)\n\n\nAfternoon\nTP: Finish User Entity (W13) MSX: Adapters and gamepads study (W5)\nDOL: Learn about observability (W13)\nDOL: Learn about Argo workflows (21)\nDOL: Learn about Python and Flask (13)\nDOL: Learn about OKD (21)\n\n\nEvening\nCP: Complete SonarQube GitHub action (W13) MSX: MSX-Mega v3 Design (W21)\nTP: Update UMLs (W5)\nCP: Create missing Unit Tests (W8)\nTP: Create missing Unit Tests (W8)\nPMS: Weekly retrospective (W8)\n\n\n\n\n\n\nMake a retrospective of the previous week, analyse the results of the planning and take action.\n\nNumber of planned tasks per category:\n\n\n\n\n\n\n\n\n\nCATEGORY\nNUMBER OF PLANNED TASKS\nNUMBER OF COMPLETED TASKS\n\n\n\n\nClass Projects (CP)\n\n\n\n\nTeam Project (TP)\n\n\n\n\nCI/CD\n\n\n\n\nDevOps Learning (DOL)\n\n\n\n\nPlanning and MindSet (PMS)\n\n\n\n\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\nThink about the complexity of the completed tasks and if they matched the expectatives:\n\nIf the task was easier than you thought, move it to lower energies spaces\nIf the task was harder than you though, think about spitting it into less complex tasks\n\nCompleted tasks:\n\nPMS: Weekly planning (W8) –&gt; Done when planned\nCP: Complete SonarQube GitHub action (W13) –&gt; Worked on it on Monday morning, still not finished (missing JaCoCo Code coverage dependency)\nMSX: MSX-Mega v3 Design (W21) –&gt; Done instead of Monday tasks\nMSX: Adapters and gamepads study (W5) –&gt; Done instead of Monday tasks\nDOL: Learn about observability (W13) –&gt; Short introduction course from o11y\nDOL: Update Quarto docs (W3) –&gt; Updated Quarto docs related to self-hosted software deployment\n\n\n\n\nThink about the reasons why these tasks aren’t done:\n\nDid you lack some kind of resource (knowledge, tools, etc…) to even start it?\nDid you find any obstacle that slowed down your progress? The obstacle can be either internal or external, related or unrelated to the task\nIs this task something that you’ve been dragging along for some time? Is it really necessary?\nMonday:\n\nReplaced planned tasks with MSX-related stuff -Tuesday:\nLearn about Observability took me more time than expected\n\nWednesday:\n\nFamily matters kept me from doing anything in the afternoon and the evening\n\n\n\n\n\n\nBased on the previous analysis, identify the weak points of the previous planning, discard useless tasks, reassing new weights to pending tasks and schedule your next week:\n\nBest decision of all week\n\nTalk with the team members about the status of our tasks\nAdd personal project tasks to the planning (MSX)\n\nAvoided pits\n\nNo pits this week\n\nWhat have you reorganized during this week?\n\nDocumentation tasks vs Learning tasks\n\nCore concepts learnt during this week / What have you learned?\n\nKiCAD 6 schematics and PCB design\nGitHub Actions + SonarQube\nSpring REST API"
  },
  {
    "objectID": "miscellaneous/weekly-planning/02-week-02.html#roadmap-define-what-you-want-know-your-energy-and-yourself",
    "href": "miscellaneous/weekly-planning/02-week-02.html#roadmap-define-what-you-want-know-your-energy-and-yourself",
    "title": "02 - Week 02",
    "section": "",
    "text": "Things to accomplish:\n\nFinish the Library Web application using Web Controller (GET/POST)\nCreate a REST API application with SpringBoot\nCreate the first CI/CD pipeline for a Spring Boot project\nComplete my tasks for the Team Project in Sprint 2\nDeeper understanding of the DevOps methodology"
  },
  {
    "objectID": "miscellaneous/weekly-planning/02-week-02.html#to-do-list-all-the-tasks-that-you-have-to-do-by-concepts-technologies-tools-etc",
    "href": "miscellaneous/weekly-planning/02-week-02.html#to-do-list-all-the-tasks-that-you-have-to-do-by-concepts-technologies-tools-etc",
    "title": "02 - Week 02",
    "section": "",
    "text": "Categories:\n\nClass Project (CP)\nTeam Project (TP)\nContinuous Integration/Continuous Delivery (CI/CD)\nDevOps Learning (DOL)\nPlanning & MindSet (PMS)\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\n\n\n\n\nCATEGORY\nTASK\nWEIGHT\nINTRODUCED ON\n\n\n\n\nCP\nCreate Library REST API\n8\nWeek 1\n\n\nCP\nCreate Library REST client\n5\nWeek 1\n\n\nCP\nUnify User HTML forms\n5\nWeek 1\n\n\nCP\nUnify Publications creation\n8\nWeek 1\n\n\nCP\nMigrate H2 to another DB\n13\nWeek 1\n\n\nCP\nUpdate Quarto docs\n5\nWeek 1\n\n\nCP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nCP\nCreate GitHub issues\n3\nWeek 1\n\n\nCP\nComplete SonarQube GitHub action\n13\nWeek 2\n\n\nCP\nUpdate soft. script with Postman\n8\nWeek 2\n\n\nCP\nSwagger and Mockito into Library\n8\nWeek 2\n\n\nCP\nEnable logging in Java\n8\nWeek 2\n\n\nCP\nQuarto: automate weekly planning\n13\nWeek 2\n\n\nCI/CD\nLearn GitHub Actions\n13\nWeek 1\n\n\nCI/CD\nInstall Jenkins\n8\nWeek 1\n\n\nCI/CD\nCreate staging environment\n13\nWeek 1\n\n\nTP\nFinish User Entity\n13\nWeek 1\n\n\nTP\nFinish Vertical Slicing designs\n13\nWeek 1\n\n\nTP\nCreate missing Unit Tests\n8\nWeek 1\n\n\nTP\nEnable logging\n5\nWeek 2\n\n\nTP\nCreate REST API\n5\nWeek 2\n\n\nDOL\nLearn about observability\n13\nWeek 1\n\n\nDOL\nDeploy workloads on Kubernetes\n13\nWeek 1\n\n\nDOL\nLearn about OpenStack\n21\nWeek 1\n\n\nDOL\nLearn about OKD\n21\nWeek 2\n\n\nDOL\nLearn about Python and Flask\n13\nWeek 2\n\n\nDOL\nLearn about Argo workflows\n21\nWeek 2\n\n\nDOL\nLearn about SQL and Postgres\n21\nWeek 2\n\n\nDOL\nInstall a SMTP server\n13\nWeek 1\n\n\nDOL\nUpdate Quarto docs\n8\nWeek 1\n\n\nMSX\nAdapters and gamepads study\n5\nWeek 2\n\n\nMSX\nMSX-Mega v3 design\n21\nWeek 2\n\n\nPMS\nWeekly retrospective\n8\nWeek 1\n\n\nPMS\nWeekly planning\n8\nWeek 1\n\n\nPMS\nMindSet & Lectures\n5\nWeek 1"
  },
  {
    "objectID": "miscellaneous/weekly-planning/02-week-02.html#spring-goal-categorize-and-filter-them-by-importance-and-urgency-based-on-your-roadmap",
    "href": "miscellaneous/weekly-planning/02-week-02.html#spring-goal-categorize-and-filter-them-by-importance-and-urgency-based-on-your-roadmap",
    "title": "02 - Week 02",
    "section": "",
    "text": "27 tasks:\n\nImportant and urgent (9):\n\nCP: Complete SonarQube GitHub action (W13)\nCP: Swagger and Mockito into Library (W8)\nTP: Finish User Entity (W13)\nTP: Update functional diagrams (W8)\nTP: Finish Vertical Slicing designs (W13)\nDOL: Learn about observability (W13)\nDOL: Learn about OKD (21)\nDOL: Learn about Python and Flask (13)\nDOL: Learn about Argo workflows (21)\nPMS: Weekly planning (W8)\n\nImportant but not urgent (19):\n\nCP: Create missing Unit Tests (W8)\nCP: Unify User HTML forms (W5)\nCP: Unify Publications creation (W8)\nCP: Create GitHub issues (W3)\nCP: Create Library REST API (W8)\nCP: Create Library REST client (W5)\nCP: Migrate H2 to another DB (W13)\nCP: Update soft. script with Postman (W8)\nCP: Enable logging in Java (W8)\nTP: Create missing Unit Tests (W8)\nTP: Update UMLs (W5)\nTP: Enable logging (W5)\nTP: Create REST API (W5)\nCI/CD: Learn GitHub Actions (W13)\nCI/CD: Create staging environment (W13)\nDOL: Deploy workloads on Kubernetes (W13)\nDOL: Update Quarto docs (W3)\nDOL: Learn about SQL and Postgres (W21)\nMSX: Adapters and gamepads study (W5)\nMSX: MSX-Mega v3 design (W21)\nPMS: Weekly retrospective (W8)\nPMS: MindSet & Lectures (W5)\n\nNot important but urgent (5):\n\nDOL: Install a SMTP server (W13)\nCI/CD: Install Jenkins (W8)\nDOL: Learn about OpenStack (W21)\n\nNeither important nor urgent:"
  },
  {
    "objectID": "miscellaneous/weekly-planning/02-week-02.html#decision-making-plan-your-week",
    "href": "miscellaneous/weekly-planning/02-week-02.html#decision-making-plan-your-week",
    "title": "02 - Week 02",
    "section": "",
    "text": "Each week, define tasks for each energy slot of the day (3 each day, 5 days a week). At the end of the week, review it to see how many of the tasks have been accomplished. Once done, plan the next week taking into account the feedback from the previous week:\n\nWeek 2:\n\n\n\n\n\n\n\n\n\n\n\n\nWEEK 2\nMONDAY (W34)\nTUESDAY (W26)\nWEDNESDAY (W32)\nTHURSDAY (W34)\nFRIDAY (W37)\n\n\n\n\nMorning\nPMS: Weekly planning (W8)\nCP: Create Library REST API (W8)\nDOL: Update Quarto docs (W3)\nTP: Finish Vertical Slicing designs (W13)\nTP: Update functional diagrams (W8)\n\n\nAfternoon\nTP: Finish User Entity (W13) MSX: Adapters and gamepads study (W5)\nDOL: Learn about observability (W13)\nDOL: Learn about Argo workflows (21)\nDOL: Learn about Python and Flask (13)\nDOL: Learn about OKD (21)\n\n\nEvening\nCP: Complete SonarQube GitHub action (W13) MSX: MSX-Mega v3 Design (W21)\nTP: Update UMLs (W5)\nCP: Create missing Unit Tests (W8)\nTP: Create missing Unit Tests (W8)\nPMS: Weekly retrospective (W8)"
  },
  {
    "objectID": "miscellaneous/weekly-planning/02-week-02.html#ultimate-goal-metrics",
    "href": "miscellaneous/weekly-planning/02-week-02.html#ultimate-goal-metrics",
    "title": "02 - Week 02",
    "section": "",
    "text": "Make a retrospective of the previous week, analyse the results of the planning and take action.\n\nNumber of planned tasks per category:\n\n\n\n\n\n\n\n\n\nCATEGORY\nNUMBER OF PLANNED TASKS\nNUMBER OF COMPLETED TASKS\n\n\n\n\nClass Projects (CP)\n\n\n\n\nTeam Project (TP)\n\n\n\n\nCI/CD\n\n\n\n\nDevOps Learning (DOL)\n\n\n\n\nPlanning and MindSet (PMS)\n\n\n\n\nMSX-related tasks (MSX)\n\n\n\n\n\n\n\nThink about the complexity of the completed tasks and if they matched the expectatives:\n\nIf the task was easier than you thought, move it to lower energies spaces\nIf the task was harder than you though, think about spitting it into less complex tasks\n\nCompleted tasks:\n\nPMS: Weekly planning (W8) –&gt; Done when planned\nCP: Complete SonarQube GitHub action (W13) –&gt; Worked on it on Monday morning, still not finished (missing JaCoCo Code coverage dependency)\nMSX: MSX-Mega v3 Design (W21) –&gt; Done instead of Monday tasks\nMSX: Adapters and gamepads study (W5) –&gt; Done instead of Monday tasks\nDOL: Learn about observability (W13) –&gt; Short introduction course from o11y\nDOL: Update Quarto docs (W3) –&gt; Updated Quarto docs related to self-hosted software deployment\n\n\n\n\nThink about the reasons why these tasks aren’t done:\n\nDid you lack some kind of resource (knowledge, tools, etc…) to even start it?\nDid you find any obstacle that slowed down your progress? The obstacle can be either internal or external, related or unrelated to the task\nIs this task something that you’ve been dragging along for some time? Is it really necessary?\nMonday:\n\nReplaced planned tasks with MSX-related stuff -Tuesday:\nLearn about Observability took me more time than expected\n\nWednesday:\n\nFamily matters kept me from doing anything in the afternoon and the evening"
  },
  {
    "objectID": "miscellaneous/weekly-planning/02-week-02.html#retrospective",
    "href": "miscellaneous/weekly-planning/02-week-02.html#retrospective",
    "title": "02 - Week 02",
    "section": "",
    "text": "Based on the previous analysis, identify the weak points of the previous planning, discard useless tasks, reassing new weights to pending tasks and schedule your next week:\n\nBest decision of all week\n\nTalk with the team members about the status of our tasks\nAdd personal project tasks to the planning (MSX)\n\nAvoided pits\n\nNo pits this week\n\nWhat have you reorganized during this week?\n\nDocumentation tasks vs Learning tasks\n\nCore concepts learnt during this week / What have you learned?\n\nKiCAD 6 schematics and PCB design\nGitHub Actions + SonarQube\nSpring REST API"
  },
  {
    "objectID": "miscellaneous/00-mind-management-getting-things-done.html#define-your-goal",
    "href": "miscellaneous/00-mind-management-getting-things-done.html#define-your-goal",
    "title": "00 - Mind Management and Getting Things Done",
    "section": "Define your goal",
    "text": "Define your goal\n\nWhere do you want to focus your attention?\nWhere do you have your open-loops?\nWhat do you need to practice? Decision-making to be able to adapt to changes (SCRUM)\n\nEisenhower Matrix: define your tasks based on its urgency and its importance. Combine it with your energy management to decide when to execute them \nDecision-making: if tasks can be done in less than 10 minutes, do them! Else, put them on the backlog\n\nFight the FUD (Fear, Uncertainty, and Doubt) and also Anxiety. This can be fought by closing commitments and gaining the sense of accomplishment, even with the smallest tasks\nDon’t forget to rest and feed your soul\nCreate a good inertia law"
  },
  {
    "objectID": "miscellaneous/00-mind-management-getting-things-done.html#understand-your-available-tools",
    "href": "miscellaneous/00-mind-management-getting-things-done.html#understand-your-available-tools",
    "title": "00 - Mind Management and Getting Things Done",
    "section": "Understand your available tools",
    "text": "Understand your available tools\n\nWhen do you think a task is DONE?\nWhat tasks are you DOING?\n\nAvoid being the turkey in Taleb’s problem and be prepared for Black Swan Events (Related article)\n\nHow many TASKS can you manage at the same time?\nHow much ENERGY do you have to accomplish these TASKS?"
  },
  {
    "objectID": "miscellaneous/00-mind-management-getting-things-done.html#reach-your-ultimate-goal",
    "href": "miscellaneous/00-mind-management-getting-things-done.html#reach-your-ultimate-goal",
    "title": "00 - Mind Management and Getting Things Done",
    "section": "Reach your ultimate goal",
    "text": "Reach your ultimate goal\n\nCreate metrics to understand the real problems and analyse them\nReview the status of your tasks and iterate over your planning based on these metrics"
  },
  {
    "objectID": "miscellaneous/00-mind-management-getting-things-done.html#plan-your-week",
    "href": "miscellaneous/00-mind-management-getting-things-done.html#plan-your-week",
    "title": "00 - Mind Management and Getting Things Done",
    "section": "Plan your week",
    "text": "Plan your week\nEach week, define tasks for each energy slot of the day (3 each day, 5 days a week). At the end of the week, review it to see how many of the tasks have been accomplished. Once done, plan the next week taking into account the feedback from the previous week.\nUse your decision-making tools (Eisenhower Matrix, your own roadmap, your capabilities…) to filter tasks to do and organize them into the planning table:\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\nWEEK 1\nM\nT\nW\nT\nF\n\n\n\n\nMorning\nReview GitHub tasks\nWeekly Scrum\nDocument class exercises\nDocument Team Project\n\n\n\nAfternoon\nReview Team project status\nPractise class exercises\nWork on Team project\nPractice class exercises\n\n\n\nEvening\nComplete some GitHub tasks\nStudy DevOps tools\nComplete some GitHub tasks\nStudy DevOps tools\nDocument weekly progress"
  },
  {
    "objectID": "miscellaneous/00-mind-management-getting-things-done.html#ultimate-goal-metrics",
    "href": "miscellaneous/00-mind-management-getting-things-done.html#ultimate-goal-metrics",
    "title": "00 - Mind Management and Getting Things Done",
    "section": "Ultimate goal: metrics",
    "text": "Ultimate goal: metrics\nMake a retrospective of the previous week, analyse the results of the planning and take action.\n\nCompleted tasks\nThink about the complexity of the completed tasks and if they matched the expectatives:\n\nIf the task was easier than you thought, move it to lower energies spaces\nIf the task was harder than you though, think about spitting it into less complex tasks\n\n\n\nUnfinished tasks\nThink about the reasons why these tasks aren’t done:\n\nDid you lack some kind of resource (knowledge, tools, etc…) to even start it?\nDid you find any obstacle that slowed down your progress? The obstacle can be either internal or external, related or unrelated to the task\nIs this task something that you’ve been dragging along for some time? Is it really necessary?"
  },
  {
    "objectID": "miscellaneous/00-mind-management-getting-things-done.html#retrospective",
    "href": "miscellaneous/00-mind-management-getting-things-done.html#retrospective",
    "title": "00 - Mind Management and Getting Things Done",
    "section": "Retrospective",
    "text": "Retrospective\nBased on the previous analysis, identify the weak points of the previous planning, discard useless tasks, reassing new weights to pending tasks and schedule your next week"
  },
  {
    "objectID": "miscellaneous/00-mind-management-getting-things-done.html#treat-with-other-humans",
    "href": "miscellaneous/00-mind-management-getting-things-done.html#treat-with-other-humans",
    "title": "00 - Mind Management and Getting Things Done",
    "section": "Treat with other humans",
    "text": "Treat with other humans"
  },
  {
    "objectID": "miscellaneous/00-mind-management-getting-things-done.html#learn-new-things",
    "href": "miscellaneous/00-mind-management-getting-things-done.html#learn-new-things",
    "title": "00 - Mind Management and Getting Things Done",
    "section": "Learn new things",
    "text": "Learn new things"
  },
  {
    "objectID": "miscellaneous/00-mind-management-getting-things-done.html#planning",
    "href": "miscellaneous/00-mind-management-getting-things-done.html#planning",
    "title": "00 - Mind Management and Getting Things Done",
    "section": "Planning",
    "text": "Planning"
  },
  {
    "objectID": "walkthrough/walkthrough.html",
    "href": "walkthrough/walkthrough.html",
    "title": "Hello, Quarto",
    "section": "",
    "text": "Markdown is an easy to read and write text format:\n\nIt’s plain text so works well with version control\nIt can be rendered into HTML, PDF, and more\nLearn more at: https://quarto.org/docs/authoring/"
  },
  {
    "objectID": "walkthrough/walkthrough.html#markdown",
    "href": "walkthrough/walkthrough.html#markdown",
    "title": "Hello, Quarto",
    "section": "",
    "text": "Markdown is an easy to read and write text format:\n\nIt’s plain text so works well with version control\nIt can be rendered into HTML, PDF, and more\nLearn more at: https://quarto.org/docs/authoring/"
  },
  {
    "objectID": "walkthrough/walkthrough.html#code-cell",
    "href": "walkthrough/walkthrough.html#code-cell",
    "title": "Hello, Quarto",
    "section": "Code Cell",
    "text": "Code Cell\nHere is a Python code cell.\nInstall the VS Code Python Extension to enable running this cell interactively.\n\nimport os\nos.cpu_count()\n\n2"
  },
  {
    "objectID": "walkthrough/walkthrough.html#equation",
    "href": "walkthrough/walkthrough.html#equation",
    "title": "Hello, Quarto",
    "section": "Equation",
    "text": "Equation\nUse LaTeX to write equations:\n\\[\n\\chi' = \\sum_{i=1}^n k_i s_i^2\n\\]"
  },
  {
    "objectID": "walkthrough/walkthrough.html#observable-js",
    "href": "walkthrough/walkthrough.html#observable-js",
    "title": "Hello, Quarto",
    "section": "Observable JS",
    "text": "Observable JS\nYou can insert Observable code snippets in your Quarto document.\n\nRepresenting data\nWith Observable you can easily draw data representations, such as this histogram:\n\nheight = 250\nnumbers = Float64Array.from({length: 1000}, d3.randomNormal())\nimport {chart as histogram} with {numbers as data, height} from \"@d3/histogram@261\"\n\nhistogram\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nManipulating data\nFirst, load the data with the FileAttachment method. We’ll be using a dataset from the New Zealand’s official data agency, specifically the Occupied and unoccupaied dwellings census:\n\n\n\n\n\n\nCorrectly format your data!\n\n\n\nRight now, integer columns are formatted as string, they should converted to a number. For the sake of simplicity, we’ll be applying the {typed: true} option when parsing the CSV files.\n\n\n\ndata = FileAttachment(\"../data/Data8278.csv\").csv({typed: true})\n// Print the data columns\ndata.columns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can represent the data based on its columns. We can have a look a its data as a Table by invoking the Inputs.table method. Also, as Tables are view-compatible, we can store it in a viewof variable for further usage:\n\n// Create the view-compatible object. This will automatically render it\nviewof data_table = Inputs.table(data)\n\n\n\n\n\n\nCalling the previous viewof object will show the info related to the selected rows in the table:\n\n// Call the viewof object and select some rows from the previous table\ndata_table\n\n\n\n\n\n\nRight now the available fields aren’t very descriptive, they are just IDs of some other lookup tables. We can use join operations to overwrite them.\nFirst load in separate tables each lookup table:\n\ndwell_rec_type_lookup = FileAttachment(\"../data/DimenLookupDwellRecType8278.csv\").csv({typed: true})\n\n// Load the DwellStatus lookup table\ndwell_status_lookup = FileAttachment(\"../data/DimenLookupDwellStatus8278.csv\").csv({typed: true})\n\n// Load the Area lookup Table\narea_lookup = FileAttachment(\"../data/DimenLookupArea8278.csv\").csv({typed: true})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheck its contents:\n\nDwell Rec Type lookup:\n\n\nviewof dwell_rec_type_lookup_table = Inputs.table(dwell_rec_type_lookup)\n\n\n\n\n\n\n\nDwell Status lookup:\n\n\nviewof dwell_status_lookup_table = Inputs.table(dwell_status_lookup)\n\n\n\n\n\n\n\nArea lookup:\n\n\nviewof area_lookup_table = Inputs.table(area_lookup)\n\n\n\n\n\n\nAs explained in the official ObservableHQ page, we can use a more performant form of join:\n\n// create the join function\nfunction join(lookupTable, mainTable, lookupKey, mainKey, select) {\n    var l = lookupTable.length,\n        m = mainTable.length,\n        lookupIndex = [],\n        output = [];\n    for (var i = 0; i &lt; l; i++) { // loop through the lookupTable items\n        var row = lookupTable[i];\n        lookupIndex[row[lookupKey]] = row; // create an index for lookup table\n    }\n\n    for (var j = 0; j &lt; m; j++) { // loop through the mainTable items\n        var y = mainTable[j];\n        var x = lookupIndex[y[mainKey]]; // get corresponding row from lookupTable\n        output.push(select(y, x)); // select only the columns you need\n    }\n    return output;\n}\n\n\n\n\n\n\nLet’s try it with a simple example first, as shown in the page:\n\narticles = [{\n    \"id\": 1,\n    \"name\": \"vacuum cleaner\",\n    \"weight\": 9.9,\n    \"price\": 89.9,\n    \"brand_id\": 2\n}, {\n    \"id\": 2,\n    \"name\": \"washing machine\",\n    \"weight\": 540,\n    \"price\": 230,\n    \"brand_id\": 1\n}, {\n    \"id\": 3,\n    \"name\": \"hair dryer\",\n    \"weight\": 1.2,\n    \"price\": 24.99,\n    \"brand_id\": 2\n}, {\n    \"id\": 4,\n    \"name\": \"super fast laptop\",\n    \"weight\": 400,\n    \"price\": 899.9,\n    \"brand_id\": 3\n}]\n\n// Create a brands lookup table\nbrands = [{\n    \"id\": 1,\n    \"name\": \"SuperKitchen\"\n}, {\n    \"id\": 2,\n    \"name\": \"HomeSweetHome\"\n}]\n\n// Call the join function\njoin(brands, articles, \"id\", \"brand_id\", function(article, brand) {\n    return {\n        id: article.id,\n        name: article.name,\n        weight: article.weight,\n        price: article.price,\n        brand: (brand !== undefined) ? brand.name : null\n    };\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow that we know that the function works, we join each lookup table with the main data table one at a time:\n\nfirst_join_table = join(dwell_rec_type_lookup, data, \"Code\", \"DwellRecType\", function(item, dwell_rec_type) {\n    return {\n        Year: item.Year,\n        DwellRecType: item.DwellRecType,\n        DwellRec: dwell_rec_type.Description,\n        DwellStatus: item.DwellStatus,\n        Area: item.Area,\n        Count: item.Count\n    };\n})\n\n// Join Dwell Status with first join\nstatus_join_table = join(dwell_status_lookup, first_join_table, \"Code\", \"DwellStatus\", function(item, dwell_status) {\n    return {\n        Year: item.Year,\n        DwellRecType: item.DwellRecType,\n        DwellRec: item.DwellRec,\n        DwellStatus: item.DwellStatus,\n        DwellStatusDesc: dwell_status.Description,\n        Area: item.Area,\n        Count: item.Count\n    };\n})\n\n// Join Area description with second join\narea_join_table = join(area_lookup, status_join_table, \"Code\", \"Area\", function(item, area) {\n    return {\n        Year: item.Year,\n        DwellRecType: item.DwellRecType,\n        DwellRec: item.DwellRec,\n        DwellStatus: item.DwellStatus,\n        DwellStatusDesc: item.DwellStatusDesc,\n        Area: item.Area,\n        AreaDesc: area.Description,\n        Count: item.Count\n    };\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith that done, we can show the resulting table:\n\nInputs.table(area_join_table)\n\n\n\n\n\n\nData needs to be further manipulated to be plottable. First we’ll start by getting the unique values of some of the columns:\n\nunique_areas = [...new Set(area_join_table\n    .flatMap((entry) =&gt; entry.AreaDesc))]\n\n// Get the unique Dwell Recs\nunique_dwell_recs = [...new Set(area_join_table\n    .flatMap((entry) =&gt; entry.DwellRec))]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAfter that, define some inputs to filter what results will be shown in the graph:\n\n\n\n\n\n\nOutput cell disabled due to high list of areas\n\n\n\n\n\n\n\nviewof area_select = Inputs.checkbox(\n    unique_areas,\n    {\n        label: \"Area:\"\n    }\n)\n\n// Define a checkbox input for the Dwell Recs\nviewof dwell_rec_select = Inputs.checkbox(\n    unique_dwell_recs,\n    {\n        label: \"Dwell Rec:\"\n    }\n)\n\n// Write the filtering function\nfiltered = data.filter(function(entry) {\n    return area_select.includes(entry.AreaDesc) && dwell_rec_select.includes(entry.DwellRec);\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTODO: Do some more data engineering on data\n\n\n\nRight now there’s no simple way to represent the data as is, some aggregation/grouping should be done before\nCheck official ObservableHQ documentation to finish this example"
  },
  {
    "objectID": "devops-guides/self-hosted-project/docker-software-deployment.html",
    "href": "devops-guides/self-hosted-project/docker-software-deployment.html",
    "title": "Docker software deployment",
    "section": "",
    "text": "This post includes instructions on how to deploy self-hosted software via Docker containers\n\n\n\n\n\n\nCareful with web domains!\n\n\n\nIn this examples, we are using example.com as our web domain. Change it to your own domain where the applications are accessed from."
  },
  {
    "objectID": "devops-guides/self-hosted-project/docker-software-deployment.html#communication",
    "href": "devops-guides/self-hosted-project/docker-software-deployment.html#communication",
    "title": "Docker software deployment",
    "section": "Communication",
    "text": "Communication\n\nNextCloud\n\nInstallation\nFollow the Docker deployment installation guide for a quick nextCloud deployment. After that, create the required configurations to ensure persistence.\nFor a quick test, just run:\ndocker run -d -p 8081:80 nextcloud:stable-apache\nConnect to http://&lt;nextcloud-server&gt;:8081 and follow the instructions. Install the recommended apps to try the Online Office feature.\n\n\n\n\n\n\nData is not persistent!\n\n\n\nBe aware that if no volume binding has been made, when stopping the containers the volumes become dandling, not reattached to the next started container. Make sure to define pertinent volume attachments when deploying to production.\n\n\n\n\n\n\n\n\nEnabling NextCloud office features\n\n\n\nNextCloud can make use of a built-in document server named Collabora, based on LibreOffice that allows to modify several types of documents online.\nOn a testing environment, if documents aren’t opened online, try to go to the Administration Parameters –&gt; Administration –&gt; Office. Even though the second option is selected, the built-in CODE isn’t accessible due to using an insecure protocol (HTTP) (just try to click again on the button and the verification will fail). As a workaround, click on the first option Use your own server and just tick the Disable certificate verification checkbox; Now the notification regarding Collabora Online accessibility should be OK.\n\n\n\n\n\n\n\n\nSome features are unavailable without an SSL certificate\n\n\n\nFeatures like video conferences in Talk are disabled. When using a service like Cloudflare that creates an HTTPS tunnel towards the application, then this problem is solved.\n\n\n\n\n\n\n\n\nOnlyOffice + NextCloud integration\n\n\n\nAs an alternative to the built-in Collabora/CODE document server, if you want to easily deploy both the OnlyOffice Document Server and the NextCloud at the same time, follow this installation guide. It contains a docker-compose.yml file for the deployment.\n\n\n\n\nConfiguration\nTry to create a docker-compose.yml file to ease the nextCloud deployment, the steps are defined in the installation guide. You’ll also have to provide secrets for both the nextcloud and postgres admin credentials:\n\n\ndocker-compose.yml\n\nversion: '3.2'\nname: nextcloud\nservices:\n  db:\n    image: postgres\n    #container_name: nextcloud_db\n    hostname: nextcloud_db\n    restart: always\n    ports:\n      - 5432:5432\n    volumes:\n      - db:/var/lib/postgresql/data\n    environment:\n      - TZ=Europe/Madrid\n      - POSTGRES_DB_FILE=/run/secrets/postgres_db\n      - POSTGRES_USER_FILE=/run/secrets/postgres_user\n      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password\n    secrets:\n      - postgres_db\n      - postgres_password\n      - postgres_user\n\n  app:\n    image: nextcloud:stable-apache\n    #container_name: nextcloud_app\n    restart: always\n    ports:\n      - 8081:80\n    volumes:\n      - data:/var/www/html\n    environment:\n      - TZ=Europe/Madrid\n      - POSTGRES_HOST=nextcloud_db\n      - POSTGRES_DB_FILE=/run/secrets/postgres_db\n      - POSTGRES_USER_FILE=/run/secrets/postgres_user\n      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password\n      - NEXTCLOUD_ADMIN_PASSWORD_FILE=/run/secrets/nextcloud_admin_password\n      - NEXTCLOUD_ADMIN_USER_FILE=/run/secrets/nextcloud_admin_user\n      - NEXTCLOUD_TRUSTED_DOMAINS=&lt;nextcloud.server.ip&gt; nextcloud.example.com localhost\n      # Required fields for Cloudflare HTTPS access\n      - OVERWRITEPROTOCOL=https\n      #- APACHE_DISABLE_REWRITE_IP=1\n      #- TRUSTED_PROXIES=nextcloud.example.com\n      # Additional memory increase for both clients and uploads\n      #- PHP_MEMORY_LIMIT=1024M\n      #- PHP_UPLOAD_LIMIT=1024M\n    depends_on:\n      - db\n    secrets:\n      - nextcloud_admin_password\n      - nextcloud_admin_user\n      - postgres_db\n      - postgres_password\n      - postgres_user\n\nvolumes:\n  db:\n  data:\n\nsecrets:\n  nextcloud_admin_password:\n    file: $PWD/secrets/nextcloud_admin_password.txt # put admin password in this file\n  nextcloud_admin_user:\n    file: $PWD/secrets/nextcloud_admin_user.txt # put admin username in this file\n  postgres_db:\n    file: $PWD/secrets/postgres_db.txt # put postgresql db name in this file\n  postgres_password:\n    file: $PWD/secrets/postgres_password.txt # put postgresql password in this file\n  postgres_user:\n    file: $PWD/secrets/postgres_user.txt # put postgresql username in this file"
  },
  {
    "objectID": "devops-guides/self-hosted-project/docker-software-deployment.html#collaborative-tools",
    "href": "devops-guides/self-hosted-project/docker-software-deployment.html#collaborative-tools",
    "title": "Docker software deployment",
    "section": "Collaborative tools",
    "text": "Collaborative tools"
  },
  {
    "objectID": "devops-guides/self-hosted-project/docker-software-deployment.html#productivity-tools",
    "href": "devops-guides/self-hosted-project/docker-software-deployment.html#productivity-tools",
    "title": "Docker software deployment",
    "section": "Productivity tools",
    "text": "Productivity tools\n\nOpenProject\nOpenProject is a project management suite. It has the required tools to manage Scrum projects.\n\nInstallation\nOpenProject can be deployed as docker containers. Follow the installation guide to do it. They have a GitHub repository with the docker-compose configuration to easily deploy it.\n\n\n\n\n\n\nBe patient with the OpenProject initialization\n\n\n\nIt takes some time for the OpenProject Web GUI to be available, just wait at least 5 minutes. If something goes wrong, check logs. From the same docker-compose.yml dir:\ndocker compose logs\n\n\nOnce up, access the Web GUI at http://&lt;openproject-ip&gt;:8080\n\n\nConfiguration\nThings to consider configuring:\n\nUser creation activation: by default, the admin user is responsible of manually activate any new account. This can be changed to automatically activate accounts either instantly or by sending an e-mail\n\nThe e-mail option requires OpenProject to have an SMTP server available to send mails\n\nUse a docker-compose.override.yml file to replace values of docker-compose.yml, don’t modify it:\n\n\n\ndocker-compose.override.yml\n\nversion: \"3.7\"\n\nservices:\n  web:\n    environment:\n      #OPENPROJECT_HTTPS: \"false\"\n      OPENPROJECT_HOST__NAME: \"openproject.example.com\"\n      OPENPROJECT_LDAP__USERS__SYNC__STATUS: true"
  },
  {
    "objectID": "devops-guides/self-hosted-project/docker-software-deployment.html#user-database-and-authentication",
    "href": "devops-guides/self-hosted-project/docker-software-deployment.html#user-database-and-authentication",
    "title": "Docker software deployment",
    "section": "User database and authentication",
    "text": "User database and authentication\n\nOpenLDAP + phpLDAPadmin + Self-Service-Password\nWe’ll be using a bitnami/openldap docker image as it runs as non-privileged user, providing an additional layer of security. You’ll need to provide the following files:\n\nA conf/config.inc.local.php to override default openldap config\nA secrets/ldap_admin_password.txt file containing the ldap admin user password (just the password in plain text, no key-value format)\nA .env file containing key-value fields for the SSP_KEYPHRASE and the LDAP_BIND_PASSWORD required for the Self-Service-Password docker image. LDAP_BIND_PASSWORD must match the ldap admin password of OpenLDAP\n\n\n\ndocker-compose.yml\n\nversion: '2'\nname: ldap-service\nservices:\n  # LDAP server\n  openldap:\n    image: docker.io/bitnami/openldap:2.6\n    container_name: openldap\n    hostname: openldap\n    restart: always\n    ports:\n      - '1389:1389'\n      - '1636:1636'\n    environment:\n      # Default LDAP_ROOT: dc=example,dc=org\n      - LDAP_ROOT=dc=cifojava,dc=local\n      - LDAP_ADMIN_PASSWORD_FILE=/run/secrets/ldap_admin_password\n      - LDAP_USERS=\n      - LDAP_PASSWORDS=\n      - LDAP_ENABLE_TLS=no\n    volumes:\n      - 'openldap_data:/bitnami/openldap'\n    networks:\n      - network\n    secrets:\n      - ldap_admin_password\n\n  # LDAP administrator via web interface\n  phpldapadmin:\n    image: osixia/phpldapadmin:latest\n    container_name: phpldapadmin\n    restart: always\n    # Don't know why this link attribute started to fail\n    #link:\n    #  openldap: ldap-server\n    environment:\n      # bitnami/openldap uses non-privileged port as default\n      PHPLDAPADMIN_LDAP_HOSTS: \"#PYTHON2BASH:[{'openldap': [{'server': [{ 'port': 1389 }]}]}]\"\n      #PHPLDAPADMIN_LDAP_HOSTS: ldap-host\n      PHPLDAPADMIN_HTTPS: \"false\"\n      PHPLDAPADMIN_LDAP_CLIENT_TLS: \"false\"\n    networks:\n      - network\n    ports:\n      - \"8080:80\"\n    depends_on:\n      - openldap\n\n  # Simple web service for password restart\n  self-service-password:\n    image: ltbproject/self-service-password:latest\n    container_name: self-service-password\n    environment:\n      LDAP_BIND_PASSWORD: ${LDAP_BIND_PASSWORD}\n      SSP_KEYPHRASE: ${SSP_KEYPHRASE}\n    volumes:\n      - '$PWD/conf/config.inc.local.php:/var/www/conf/config.inc.local.php'\n    ports:\n      - \"8081:80\"\n    networks:\n      - network\n    depends_on:\n      - openldap\n\nnetworks:\n  network:\n    driver: bridge\n\nvolumes:\n  openldap_data:\n    driver: local\n\nsecrets:\n  ldap_admin_password:\n    file: secrets/ldap_admin_password.txt\n\n\n\nFreeIPA\nFollow this tutorial:"
  },
  {
    "objectID": "devops-guides/self-hosted-project/docker-software-deployment.html#code-analysis",
    "href": "devops-guides/self-hosted-project/docker-software-deployment.html#code-analysis",
    "title": "Docker software deployment",
    "section": "Code analysis",
    "text": "Code analysis\n\nSonarQube\n\nUse the following docker-compose.yml as a starting point.\nSonarqube uses ElasticSearch, and it requires some system params changes, we have to change it inside the docker container. We’ll use an init container for that:\n\nAdd the following code snippet as a service inside the docker-compose.yml:\n\n\n\ndocker-compose.yml\n\nservice:\n    [...]\n    # Init container for system parameter changes\n    init:\n        image: bash\n        privileged: true\n        user: root\n        volumes:\n        - ./scripts/init.sh:/mnt/init.sh\n        command: [\"sh\", \"-e\", \"/mnt/init.sh\"]\n\n\nCreate a scripts/init.sh file that changes some limits:\n\n\n\nscripts/init.sh\n\nsysctl -w vm.max_map_count=524288\nsysctl -w fs.file-max=131072\n\nIf we want SonarQube to use LDAP authentication, we need to add custom config properties:\n\nWe must edit its properties file $SONARQUBE_HOME/conf/sonar.properties (change the values according to your LDAP server):\n\n\n\n$SONARQUBE_HOME/conf/sonar.properties\n\n# LDAP configuration\n\n# General Configuration\nsonar.security.realm=LDAP\nldap.url=ldap://myserver.mycompany.com:[port]\nldap.bindDn=my_bind_dn # i.e: cn=admin,dc=mycompany,dc=com\nldap.bindPassword=my_bind_password\n\n# User Configuration\nldap.user.baseDn=ou=Users,dc=mycompany,dc=com\nldap.user.request=(&(objectClass=inetOrgPerson)(uid={login}))\nldap.user.realNameAttribute=displayName\nldap.user.emailAttribute=mail\n\n# Group Configuration\nldap.group.baseDn=ou=Groups,dc=sonarsource,dc=com\nldap.group.request=(&(objectClass=groupOfUniqueNames)(uniqueMember={dn}))\n\n\nAdd both a conf volume and the sonar.properties inside the SonarQube docker-compose file:\n\n\n\n$PWD/docker-compose.yml\n\nservices:\n    sonarqube:\n        [...]\n        volumes:\n        - sonarqube_conf:/opt/sonarqube/conf\n        - $PWD/conf/sonar.properties:/opt/sonarqube/conf/sonar.properties\n\nvolumes:\n    [...]\n    sonarqube_conf:\n\n\n\n\n\n\n\n\nTODO\n\n\n\nObfuscate LDAP credentials somehow!"
  },
  {
    "objectID": "devops-guides/virtualization/proxmox.html",
    "href": "devops-guides/virtualization/proxmox.html",
    "title": "Proxmox VE",
    "section": "",
    "text": "From Proxmox page:\n\nProxmox Virtual Environment (Proxmox VE from now on) is a complete, opensouce server management platform for enterprise virtualization. It tightly integrates the KVM hypervisor and Linux Containers (LXC), software-defined storage and networking functionality, on a single platform. With the integrated web-based user interface you can manage VMs and containers, high availability for clusters, or the integrated disaster recovery tools with ease."
  },
  {
    "objectID": "devops-guides/virtualization/proxmox.html#download-iso",
    "href": "devops-guides/virtualization/proxmox.html#download-iso",
    "title": "Proxmox VE",
    "section": "Download ISO",
    "text": "Download ISO\nLatest available ISOs: Link"
  },
  {
    "objectID": "devops-guides/virtualization/proxmox.html#installation-steps",
    "href": "devops-guides/virtualization/proxmox.html#installation-steps",
    "title": "Proxmox VE",
    "section": "Installation steps",
    "text": "Installation steps\nLatest documentation: Link\nJust follow the steps defined in the Installing Proxmox VE section. Remember to keep the root password in a safe place."
  },
  {
    "objectID": "devops-guides/virtualization/proxmox.html#configuration",
    "href": "devops-guides/virtualization/proxmox.html#configuration",
    "title": "Proxmox VE",
    "section": "Configuration",
    "text": "Configuration\nOnce the installation has finished and the machine is restarted, access the Proxmox web interface in the following URL:\nhttps://proxmox.ip.address:8006\nCredentials are root and the password provided during installation.\n\n\n\n\n\n\nIgnore the server subscription\n\n\n\n\n\n The above message can be ignored as it is related to Enterprise subscriptions that include Proxmox support. All Proxmox VE features are available without any subscription.\nYou can remove it by following the steps described in this link, or just executing the following bash command from the node terminal:\nsed -Ezi.bak \"s/(Ext.Msg.show\\(\\{\\s+title: gettext\\('No valid sub)/void\\(\\{ \\/\\/\\1/g\" /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js && systemctl restart pveproxy.service"
  },
  {
    "objectID": "devops-guides/virtualization/proxmox.html#creating-vms-using-a-template-and-cloud-init",
    "href": "devops-guides/virtualization/proxmox.html#creating-vms-using-a-template-and-cloud-init",
    "title": "Proxmox VE",
    "section": "Creating VMs using a template and Cloud-Init",
    "text": "Creating VMs using a template and Cloud-Init\n\nWhat is Cloud-Init?\nCloud-Init is a feature that allows zero-touch OS installations in VM. Cloud-Init allows to define an initial username and password as well as use SSH keys for external logging. It also allows the user to define Network configurations and other things.\nThis is very useful as an auto-provisioning tool!\n\n\nInstallation instructions\nFollow this guide and its corresponding video:\n\nPerfect Proxmox Template with Cloud Image and Cloud Init\n\n\n\n\nNotes on configuring Cloud-Init\n\n\n\n\n\n\nConfigure the network interface!\n\n\n\n\n\n\nProxmox VM - Cloud-Init parameters\n\n\nBy default, Cloud-Init leaves the config of the Network as static and empty, so you must configure it or else there won’t be any network ready:\n\n\n\nProxmox VM - Cloud-Init network default values\n\n\n\n\n\n\n\n\n\n\nNever start the Template VM machine!\n\n\n\nThis VM shall act as a template for other Ubuntu Cloud VMs, and if it is started, then it will be bootstrapped and assigned to an ID that will pass along any VM created from this one.\n\n\n\n\n\n\n\n\nCreating clones with the Cloud-Init VM template\n\n\n\nFor this, you can use the WebUI and right-click on the VM template, or you can use pvesh commands to do it from the terminal. Read this article for more info:\n\nRapid Topology deployment with Proxmox\n\nYou can also use the qm clone command, but make sure to configure unique hardware configs for each one, such as network parameters:\nqm set &lt;vmid&gt; --ipconfig0 ip=&lt;new-ip&gt;,gw=&lt;new-gw&gt;"
  },
  {
    "objectID": "devops-guides/documentation/quarto-quick-guide.html",
    "href": "devops-guides/documentation/quarto-quick-guide.html",
    "title": "Quarto - Quick guide",
    "section": "",
    "text": "Here we’ll describe some useful tips to reduce time and resources when creating Quarto projects"
  },
  {
    "objectID": "devops-guides/documentation/quarto-quick-guide.html#render-current-file",
    "href": "devops-guides/documentation/quarto-quick-guide.html#render-current-file",
    "title": "Quarto - Quick guide",
    "section": "Render current file",
    "text": "Render current file\nquarto render ${quarto_file.qmd}"
  },
  {
    "objectID": "devops-guides/documentation/quarto-quick-guide.html#preview-current-.qmd-file-and-enable-live-changes",
    "href": "devops-guides/documentation/quarto-quick-guide.html#preview-current-.qmd-file-and-enable-live-changes",
    "title": "Quarto - Quick guide",
    "section": "Preview current .qmd file and enable live changes",
    "text": "Preview current .qmd file and enable live changes\nquarto preview ${quarto_file.qmd} --no-browser --no-watch-inputs\nThen, open the provided URL in a new browser tab/window"
  },
  {
    "objectID": "devops-guides/documentation/quarto-quick-guide.html#ensure-that-any-.qmd-file-within-the-quarto-project-is-rendered-on-save",
    "href": "devops-guides/documentation/quarto-quick-guide.html#ensure-that-any-.qmd-file-within-the-quarto-project-is-rendered-on-save",
    "title": "Quarto - Quick guide",
    "section": "Ensure that any .qmd file within the Quarto project is rendered on save",
    "text": "Ensure that any .qmd file within the Quarto project is rendered on save\nIn _quarto.yml file, add the following lines:\neditor:\n    render-on-save: true"
  },
  {
    "objectID": "devops-guides/documentation/quarto-quick-guide.html#when-publishing-dont-render-again-the-.qmd-files-already-rendered-on-save",
    "href": "devops-guides/documentation/quarto-quick-guide.html#when-publishing-dont-render-again-the-.qmd-files-already-rendered-on-save",
    "title": "Quarto - Quick guide",
    "section": "When publishing, don’t render again the .qmd files (already rendered on save)",
    "text": "When publishing, don’t render again the .qmd files (already rendered on save)\nquarto publish gh-pages --no-render"
  },
  {
    "objectID": "devops-guides/software-installation.html",
    "href": "devops-guides/software-installation.html",
    "title": "Software installation",
    "section": "",
    "text": "This page explains the automation procedure for the software installation required for the CIFO courses"
  },
  {
    "objectID": "devops-guides/software-installation.html#ides",
    "href": "devops-guides/software-installation.html#ides",
    "title": "Software installation",
    "section": "IDEs",
    "text": "IDEs\n\nVisual Studio Code\nUsed mainly for any type of development or documentation maintenance; its plugins allow to easily manage Git and GitHub repositories, create Quarto/Markdown files and publish them as static websites, and many more things.\n\nInstallation page: Running Visual Code on Linux\n\n\n\nIntelliJ IDEA\nIts main purpose is to ease Java applications development. It also has a nice Git and GitHub repository manager, so it’s easy to keep track of the updates and latest changes on our code.\n\nInstallation page: JetBrains Toolbox App\n\nIt’s recommended to install any JetBrains application through their Toolbox, as it also manages any available update of them\n\n\n\n\nVim\nOne of the most popular terminal IDEs for Linux, useful when no Desktop application is available or quick changes on files have to be done from a terminal.\n\nInstallation command:\n\nsudo apt-get install vim\n\n\nSublime Text\nA good text editor which features can be expanded by installing additional extensions/packages. With the correct configuration it can also compile and test projects from within the application.\n\nInstallation page: Linux Package Manager Repositories"
  },
  {
    "objectID": "devops-guides/software-installation.html#version-control-software",
    "href": "devops-guides/software-installation.html#version-control-software",
    "title": "Software installation",
    "section": "Version Control Software",
    "text": "Version Control Software\n\nGit\nThis is the main tool to manage git repositories, any other software uses it on background or includes it within the app. Available by default in the default Linux Package Repositories.\n\nInstallation command:\n\nsudo apt-get install git\n\n\nGitHub\nThe CLI tool to interact with GitHub repositories, very useful to manage your own repositories, branches, etc… It can also create and solve Pull Requests from the CLI.\n\nInstallation page: Installing gh on Linux and BSD\n\n\n\nGitHub Desktop\nThe Desktop app to interact with GitHub repositories, more user-friendly than the CLI version. There’s no official linux release, but GitHub themselves redirect users to a trusted fork (Community Releases).\n\nInstallation page: GitHub Desktop - The Linux Fork"
  },
  {
    "objectID": "devops-guides/software-installation.html#documentation",
    "href": "devops-guides/software-installation.html#documentation",
    "title": "Software installation",
    "section": "Documentation",
    "text": "Documentation\n\nObsidian\nA Markdown editor with many more features. The installation packages for Linux are available in their GitHub releases repository.\n\nInstallation page: Obsidian releases\n\n\n\nQuarto CLI\nA Markdown framework that expands the language by adding compatibily with other documentation tools, such as Medusa for diagrams. The installation packages for Linux are available in their GitHub repository.\n\nInstallation page: Quarto releases"
  },
  {
    "objectID": "devops-guides/software-installation.html#debugging",
    "href": "devops-guides/software-installation.html#debugging",
    "title": "Software installation",
    "section": "Debugging",
    "text": "Debugging\n\nPostman\nPostman is a tool to analyse HTTP requests and responses. Follow this guide or this other guide to install Postman."
  },
  {
    "objectID": "devops-guides/software-installation.html#software-installation-script",
    "href": "devops-guides/software-installation.html#software-installation-script",
    "title": "Software installation",
    "section": "Software installation script",
    "text": "Software installation script\nThe script software_install.sh is a shell script that automates all the installation process. As some steps require a more complex parsing logic, the script invokes extra scripts that act as tools. The script is split into the following steps:\n\nInstall pre-required programs (wget, curl, apt-transport-https, etc…)\nAdd both GPG keys and package repositories for the software that has them.\n\nThe sources lists are stored in /etc/apt/sources.list.d.\nThe GPG keys are stored in different paths depending on the app creator instructions\n\nInstall software from newly-added repositories\nInstall software that comes with its own installation scripts\n\nJetbrains Toolbox: tools/jetbrains-toolbox.sh\n\nRetrieve and install .deb packages of software maintained as GitHub repositories\n\nThis step uses the tools/retrieve_latest_release.py script\n\n\n\n\n\n\n\n\nsoftware_installation.sh\n\n\n\n\n\n#!/bin/bash\n#   CIFO Web Applications - Software installation\n#   - This script install the required software for the course\n#   - Categories:\n#       - IDEs\n#       - Version Control Sofware\n#       - Documentation\n\n# Check that the user has enough privileges to install software\nif [[ $EUID -ne 0 ]]; then\n    echo \"This script must be run with administrator privileges. Please execute it with 'sudo' or as root user\"\n    exit 1\nfi\n\n# Define the installation command\n# -qq flag prior to the install command reduces the output messages except for errors\n# -y after the install command is for non-interactive/unattended installations\nINSTALL=\"apt-get -qq install -y\"\nUPDATE=\"apt-get -qq update\"\n\n# Pre-requisites:\n# - Install download and GPG binaries\n# - Apt installation via HTTPS paths must also be installed\n# - FUSE (libfuse2) for AppImages (jetbrains-toolbox) --&gt; Required on Ubuntu 22.04 with FUSE3 installed by default\n#sudo apt-get install -y wget gpg curl apt-transport-https\n$INSTALL wget gpg curl apt-transport-https libfuse2\n\n# Additional repositories installation\n# ====================================\n# IDEs:\necho \"Configuring repositories for IDEs...\"\necho \"====================================\"\n# - Microsoft: Visual Studio Code\necho \"- Visual Studio Code\"\n# Retrieve the Microsoft GPG key and install it\nwget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; packages.microsoft.gpg\ninstall -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg\n# Add the Microsoft Visual Studio Code repository to the apt sources list\nsh -c 'echo \"deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\" &gt; /etc/apt/sources.list.d/vscode.list'\n# Delete the already installed GPG key\nrm -f packages.microsoft.gpg\necho \"\"\n# - Sublime Text\necho \"- Sublime Text\"\n# Retrieve and install GPG key\nwget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | gpg --dearmor &gt; sublimehq-pub.gpg\ninstall -D -o root -g root -m 644 sublimehq-pub.gpg /usr/share/keyrings/sublimehq-pub.gpg\n# Add Sublime Text repository to apt sources list\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/sublimehq-pub.gpg] https://download.sublimetext.com/ apt/stable/\" | tee /etc/apt/sources.list.d/sublime-text.list &gt; /dev/null\n# Delete the already installed GPG key\nrm -f sublimehq-pub.gpg\necho \"\"\n# VCS:\necho \"Configuring repositories for VCS:\"\necho \"=================================\"\n# - GitHub:\necho \"- GitHub\"\n# Install CURL to retrieve GitHub GPG key\n#type -p curl &gt;/dev/null || sudo apt install curl -y\n# Retrieve the GPG key and install it\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg\nchmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg\n# Add GitHub CLI repository to apt sources list\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | tee /etc/apt/sources.list.d/github-cli.list &gt; /dev/null\necho \"\"\n# Browsers:\necho \"Configuring repositories for browsers:\"\necho \"======================================\"\n# - Google Chrome\necho \"- Google Chrome\"\n# Retrieve and install the public key\nwget -q -O - https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor &gt; google-chrome-pub.gpg\ninstall -D -o root -g root -m 644 google-chrome-pub.gpg /usr/share/keyrings/google-chrome-pub.gpg\n# Add Google Chrome repository to apt sources list\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/google-chrome-pub.gpg] http://dl.google.com/linux/chrome/deb/ stable main\" | tee /etc/apt/sources.list.d/google-chrome.list &gt; /dev/null\n# Delete the already installed GPG key\nrm -f google-chrome-pub.gpg\necho \"\"\n# Repositories update\necho \"Updating repositories packages lists...\"\necho \"=======================================\"\n$UPDATE\necho \"Done\"\necho \"\"\n# Software installation\necho \"Installing software from repositories:\"\necho \"======================================\"\n# - IDEs: Visual Studio Code, vim, Sublime Text\necho \"Installing IDEs...\"\n$INSTALL code vim sublime-text\necho \"\"\n# - VCS: Git, GitHub\necho \"Installing VCS...\"\n$INSTALL git gh\necho \"\"\n# - Browsers: Google Chrome (stable)\necho \"Installing browsers...\"\n$INSTALL google-chrome-stable\necho \"\"\n# - Documentation: TBD\necho \"Installing Documentation software... TBD\"\necho \"\"\n# - Desktop tools\necho \"Installing Desktop tools...\"\n$INSTALL flameshot\necho \"\"\n\n# External software\necho \"Installing software not in repositories:\"\necho \"========================================\"\n# Jetbrains Toolbox: once installed, use it to install IntelliJ IDEA\necho \"- Jetbrains Toolbox\"\nif ! [ $(command -v jetbrains-toolbox) ] && [ -f tools/jetbrains-toolbox.sh ]; then\n    # Install toolbox as ROOT and execute it as the current user\n    # This is required as jetbrains toolbox configures the installation paths based on the 'home' folder of the user that executes it\n    ./tools/jetbrains-toolbox.sh && su -c jetbrains-toolbox $SUDO_USER\n    echo \"Toolbox installed, now install IntelliJ IDEA from there\"\nelse\n    echo \"WARNING: Either jetbrains-toolbox.sh script not found or already installed. Skipping installation\"\nfi\necho \"\"\n\n# Install from latest releases of GitHub repositories\necho \"Install from GitHub repositories latest releases\"\necho \"================================================\"\nif [[ -f tools/retrieve_latest_release.py ]]; then\n    # VCS:\n    # - GitHub Desktop\n    echo \"- GitHub Desktop\"\n    ./tools/retrieve_latest_release.py --gh-user shiftkey --gh-repo desktop --pattern .deb\n    echo \"\"\n    # Documentation:\n    # - Obsidian\n    echo \"- Obsidian\"\n    ./tools/retrieve_latest_release.py --gh-user obsidianmd --gh-repo obsidian-releases --pattern .deb\n    echo \"\"\n    # - Quarto\n    echo \"- Quarto\"\n    ./tools/retrieve_latest_release.py --gh-user quarto-dev --gh-repo quarto-cli --pattern .deb\n    echo \"\"\n    echo \"Installing all downloaded packages...\"\n    $INSTALL ./*.deb\n    echo \"Deleting already installed packages...\"\n    rm -r *.deb\nelse\n    echo \"ERROR: retrieve_latest_release.py script not found!! Aborting installation\"\nfi\n\necho \"DONE!!\""
  },
  {
    "objectID": "devops-guides/software-installation.html#tools-scripts",
    "href": "devops-guides/software-installation.html#tools-scripts",
    "title": "Software installation",
    "section": "Tools scripts",
    "text": "Tools scripts\nTools scripts are scripts that help the main script with more complex tasks or simply have all the installation process for a single software:\n\nJetBrains Toolbox\n\n\n\n\n\n\njetbrains-toolbox.sh\n\n\n\n\n\n#!/bin/bash\n\n[ $(id -u) != \"0\" ] && exec sudo \"$0\" \"$@\"\necho -e \" \\e[94mInstalling Jetbrains Toolbox\\e[39m\"\necho \"\"\n\nfunction getLatestUrl() {\nUSER_AGENT=('User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36')\n\nURL=$(curl 'https://data.services.jetbrains.com/products/releases?code=TBA&latest=true&type=release' -H 'Origin: https://www.jetbrains.com' -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept-Language: en-US,en;q=0.8' -H \"${USER_AGENT[@]}\" -H 'Accept: application/json, text/javascript, */*; q=0.01' -H 'Referer: https://www.jetbrains.com/toolbox/download/' -H 'Connection: keep-alive' -H 'DNT: 1' --compressed | grep -Po '\"linux\":.*?[^\\\\]\",' | awk -F ':' '{print $3,\":\"$4}'| sed 's/[\", ]//g')\necho $URL\n}\ngetLatestUrl\n\nFILE=$(basename ${URL})\nDEST=$PWD/$FILE\n\necho \"\"\necho -e \"\\e[94mDownloading Toolbox files \\e[39m\"\necho \"\"\nwget -cO  ${DEST} ${URL} --read-timeout=5 --tries=0\necho \"\"\necho -e \"\\e[32mDownload complete!\\e[39m\"\necho \"\"\nDIR=\"/opt/jetbrains-toolbox\"\necho \"\"\necho  -e \"\\e[94mInstalling to $DIR\\e[39m\"\necho \"\"\nif mkdir ${DIR}; then\n    tar -xzf ${DEST} -C ${DIR} --strip-components=1\nfi\n\nchmod -R +rwx ${DIR}\n\nln -s ${DIR}/jetbrains-toolbox /usr/local/bin/jetbrains-toolbox\nchmod -R +rwx /usr/local/bin/jetbrains-toolbox\necho \"\"\nrm ${DEST}\necho  -e \"\\e[32mDone.\\e[39m\"\n\n\n\n\n\nRetrieve latest package released from GitHub repositories\nIf the GitHub CLI package is installed, then this can be used to retrieve the latest .deb release of any reachable repository:\n\n\n\n\n\n\ngh releases download\n\n\n\n\n\n# Download the latest release\ngh release download --repo ${GH_USER}/${GH_REPO} --pattern '*.deb'\nExample:\ngh release download --repo quarto-dev/quarto-cli --pattern '*.deb'\n\n\n\nIf gh cli is not available, then the following python script has been created for the same purpose:\n\n\n\n\n\n\nretrieve_latest_release.py\n\n\n\n\n\n#!/usr/bin/python3\n# GitHub latest release package retrieval\nimport json\nimport requests\nfrom argparse import ArgumentParser\n\ndef parse_arguments():\n    parser = ArgumentParser(\n        prog=\"retrieve_latest_release\",\n        description=\"Retrieves latest release from a GitHub repository\",\n        epilog=\"GitHub user and repository name are mandatory, as well as the file pattern (.deb, .tar.gz, etc...)\"\n    )\n\n    parser.add_argument('--gh-user', dest='gh_user', type=str, help='The GitHub username', required=True)\n    parser.add_argument('--gh-repo', dest='gh_repo', help='The GitHub repository', required=True)\n    parser.add_argument('--pattern', dest='pattern', help='The pattern of the asst to download', default='.deb', required=False)\n\n    return parser.parse_args()\n\n\ndef main():\n    args = parse_arguments()\n    print(f\"Requesting latest release from {args.gh_user}/{args.gh_repo}, ({args.pattern} format)\")\n    gh_api_url=f\"https://api.github.com/repos/{args.gh_user}/{args.gh_repo}/releases/latest\"\n    r = requests.get(gh_api_url)\n    response_text = json.loads(r.content)\n    #print(json.dumps(response_text, indent=2))\n\n    # Search fot the first asset that matches the file pattern\n    if \"assets\" in response_text:\n        for asset in response_text[\"assets\"]:\n            if \"name\" in asset and asset[\"name\"].endswith(args.pattern):\n                print(f'Downloading {asset[\"browser_download_url\"]}...')\n                filename = asset[\"name\"]\n                download = requests.get(asset[\"browser_download_url\"])\n                print(f\"Saving content into {filename}\")\n                open(filename, \"wb\").write(download.content)\n                break\n\nif __name__ == '__main__':\n    # Execute the main program\n    main()\n\n\n\n\n\nInstall additional extensions for VSCode\nVisual Studio Code comes with a CLI that allows the user to install/uninstall extensions from the terminal. More info can be found in the official documentation.\n\n\n\n\n\n\nPending to create a list of useful extensions and a shell script to install them\n\n\n\n\n\nInstall additional extensions for IntelliJ IDEA\n\n\n\n\n\n\nPending to see if IntelliJ IDEA has any CLI to automate the process"
  },
  {
    "objectID": "devops-guides/mint-vm-provisioning.html",
    "href": "devops-guides/mint-vm-provisioning.html",
    "title": "Virtual Machine Provisioning",
    "section": "",
    "text": "In this page we’re going to define the steps to create and install all the required software for the CIFO Web Application course. At the end of the process we’ll have created a fully functional environment for software development, documentation and deployment, and we’ll also have some scripts that automate the installation of the required software and dependencies in case they have to be installed again"
  },
  {
    "objectID": "devops-guides/mint-vm-provisioning.html#linux-mint-installation",
    "href": "devops-guides/mint-vm-provisioning.html#linux-mint-installation",
    "title": "Virtual Machine Provisioning",
    "section": "Linux Mint installation",
    "text": "Linux Mint installation\n\nWhen initializing the VM, GRUB will greet us with some options. Select Start Linux Mint &lt;version&gt; &lt;desktop-flavour&gt; 64-bit to launch the Live Mint version that lets you test the OS prior to installing it as well as install it onto the virtual disk \nOnce inside the Linux Mint desktop, double-click the Install Linux Mint icon and follow the step-by-step installation process: \n\n\nInstallation steps\n\nLanguage selection: It’s the system language and will be used to also configure any installed software default language\nKeyboard Layout: Select the same one as your host machine, else the keyboard inputs won’t match the inputs shown in the VM (Select Spanish - Spanish)\nMultimedia coders: Skip, unrequired for this course and can always be installed later on\nInstallation type: As we’re installing the OS for the first time, just leave the default Erase disk and install Linux Mint option selected\nInstall now: Accept all changes regarding disk writing\nWhere are you?: This option sets both the timezone of the VM as well as the nearest package repositories to your location that will be used\nWho are you?: Here you define your name (used in other programs as the author of mails, files, projects, etc…), the host name (VM internal name), the username and its password (the process creates a user account based on this information)\n\n\nAfter that, the installation process continues by installing all the required files and stock programs for that distribution and desktop manager\n\n\n\n\n\n\n\nTip\n\n\n\nAt this point there’s no need for any additional input from the user, so you can go grab a coffee or something else as this will take a while to complete\n\n\n\nOnce done, just restart the machine as asked"
  },
  {
    "objectID": "devops-guides/mint-vm-provisioning.html#virtualbox-additional-configurations",
    "href": "devops-guides/mint-vm-provisioning.html#virtualbox-additional-configurations",
    "title": "Virtual Machine Provisioning",
    "section": "VirtualBox additional configurations",
    "text": "VirtualBox additional configurations\nNow VirtualBox is rendering the VM to the native resolution defined within our Linux Mint OS (guest machine). In order to dinamically change the resolution based on the window size, we must install the VirtualBox Guest Additions inside it\n\nWhat does Guest Additions enable?\n\nEnable users to seamlessly move mouse pointer between host and guest OS.\nAllow guest OS to have read and write access to hard drives on the host OS, so you can transfer files between them.\nPower up the graphics/video ability of the guest OS. The screen resolution of guest OS can be automatically adjusted and 3D graphics can be accelerated.\nEnable bidirectional shared clipboard between host and guest OS, so you can copy and paste stuff between them.\n\n\n\nInstallation steps\n\nOn the Devices drop-down menu, select Insert Guest Additions CD image \nVirtual Box prompts if we want to download the ISO file. Accept all warnings regarding this:\n\n\n\n\n\n\n\n\n(a) Virtual Box - Download Guest Additions\n\n\n\n\n\n\n\n\n\n(b) Virtual Box - Accept Download Guest Additions\n\n\n\n\n\n\n\n\n\n(c) Virtual Box - Mount Guest Additions\n\n\n\n\nFigure 1: Guest Additions warnings\n\n\n\nOnce the ISO is mounted inside the guest OS, it should try to execute the VBoxLinuxAdditions.run file in the ISO root; if not, open a terminal and execute\n\nsudo /media/cifo-web/VBox_GAs_&lt;version&gt;/VBoxLinuxAdditions.run\n\n\n\n\n\n\nWarning\n\n\n\nIf the autoexec function didn’t launch, this doesn’t mean there’s something wrong with your guest OS; it might mean that it has this feature disabled by default. Check your Desktop manager options.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe mount path of the Guest Additions ISO may be different depending on the username and the ISO version, so you might have to change it.\n\n\nThe output should be like this:\ncifo-web@cifoweb-VirtualBox:/media/cifo-web/VBox_GAs_6.1.40$ sudo ./VBoxLinuxAdditions.run\nVerifying archive integrity... All good.\nUncompressing VirtualBox 6.1.40 Guest Additions for Linux........\nVirtualBox Guest Additions installer\nCopying additional installer modules ...\nInstalling additional modules ...\nVirtualBox Guest Additions: Starting.\nVirtualBox Guest Additions: Setting up modules\nVirtualBox Guest Additions: Building the VirtualBox Guest Additions kernel \nmodules.  This may take a while.\nVirtualBox Guest Additions: To build modules for other installed kernels, run\nVirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup &lt;version&gt;\nVirtualBox Guest Additions: or\nVirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup all\nVirtualBox Guest Additions: Building the modules for kernel 5.15.0-41-generic.\nupdate-initramfs: Generating /boot/initrd.img-5.15.0-41-generic\nVirtualBox Guest Additions: Running kernel modules will not be replaced until \nthe system is restarted\n\nRestart your guest OS\n\n\n\n\n\n\n\nNote\n\n\n\nSee this video if you have any more doubts regarding Guest Additions in Linux Mint:\n\n\n\n\n\nGuest Additions configurations\n\nEnable fluid window\nFluid mode is automatically enabled after the guest OS restart. If not, you can always enable it with the shortcut Right Ctrl + L.\n\n\nEnable bidirectional clipboard\nMake sure the clipboard is set to bidirectional; after that, copy-paste commands should work between Host and Guest machines."
  },
  {
    "objectID": "devops-guides/version-control-software/github-credentials.html",
    "href": "devops-guides/version-control-software/github-credentials.html",
    "title": "GitHub - Configuring SSH credentials",
    "section": "",
    "text": "This page explains how to configure your development environment to authenticate against GitHub using SSH keys. This removes the need of entering the username and password each time we want to push our changes to the remote repositories."
  },
  {
    "objectID": "devops-guides/version-control-software/github-credentials.html#setting-username-and-email",
    "href": "devops-guides/version-control-software/github-credentials.html#setting-username-and-email",
    "title": "GitHub - Configuring SSH credentials",
    "section": "Setting username and email",
    "text": "Setting username and email\nFrom Linuxize:\nOur commits should appear in the repository history with the same username and email as our GitHub user. In order to do so, we can globally change these like so:\n\n\nGit username and email global config\n\n$ git config --global user.name \"Your GitHub Username\"\n$ git config --global user.email \"YourPrivateGitHubMail@users.noreply.github.com\"\n\nwhere:\n\nuser.name: use your GitHub username\nuser.email: is the email that GitHub assigns to each user for web-based Git operations, like edits and merges\n\nYou can find it in your GitHub account -&gt; Settings -&gt; Access/Emails. It appears both in the Primary email address and the Keep my email addresses private sections, and it matches the following format:\n\n&lt;random-number-sequence&gt;+&lt;Your-GitHub-username&gt;@users.noreply.github.com\n\nThese changes are stored in your home directory, inside the ~/.gitconfig file\nIf you only want to use this configuration for a single repository, execute the same commands without the --global\n\n\nGit username and email config for single repository\n\n$ git config user.name \"Your GitHub Username\"\n$ git config user.email \"YourPrivateGitHubMail@users.noreply.github.com\"\n\nIn this case, these config changes are stored in the .git/config file within the repository."
  },
  {
    "objectID": "devops-guides/version-control-software/github-credentials.html#check-for-existing-ssh-keys",
    "href": "devops-guides/version-control-software/github-credentials.html#check-for-existing-ssh-keys",
    "title": "GitHub - Configuring SSH credentials",
    "section": "Check for existing SSH keys",
    "text": "Check for existing SSH keys\nIf you’re using a shared machine or a cloned VM, it’s always safer to create new SSH keys, but you can check if you already have some by looking at the following path:\n\n\n~/.ssh\n\n$ ls -la ~/.ssh\n\nGitHub supports the following public keys’ filenames:\n\nid_rsa.pub\nid_ecdsa.pub\nid_ed25519.pub"
  },
  {
    "objectID": "devops-guides/version-control-software/github-credentials.html#generate-a-new-ssh-key",
    "href": "devops-guides/version-control-software/github-credentials.html#generate-a-new-ssh-key",
    "title": "GitHub - Configuring SSH credentials",
    "section": "Generate a new SSH key",
    "text": "Generate a new SSH key\nLaunch the following command, replacing the email value with the GitHub mail:\n\n\nSSH key generation, ed25519\n\n$ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n\nJust accept everything, and don’t enter a passphrase or you’ll be prompted to enter it each time you git something.\nThe new SSH key is stored in ~/.ssh/id_ed25519 and ~/.ssh/id_ed25519.pub. The second one is the public key that we’ll share with GitHub."
  },
  {
    "objectID": "devops-guides/version-control-software/github-credentials.html#add-the-new-ssh-key-to-the-ssh-agent",
    "href": "devops-guides/version-control-software/github-credentials.html#add-the-new-ssh-key-to-the-ssh-agent",
    "title": "GitHub - Configuring SSH credentials",
    "section": "Add the new SSH key to the ssh-agent",
    "text": "Add the new SSH key to the ssh-agent\nThis allows your local ssh client to make use of this key to authenticate against GitHub. Just launch the following commands:\n\n\nStart the ssh-agent in the background\n\n$ eval \"$(ssh-agent -s)\"\n&gt; Agent pid 59566\n\n\n\nAdd your SSH private key to the ssh-agent\n\n$ ssh-add ~/.ssh/id_ed25519"
  },
  {
    "objectID": "devops-guides/version-control-software/github-credentials.html#add-the-ssh-public-key-to-your-github-account",
    "href": "devops-guides/version-control-software/github-credentials.html#add-the-ssh-public-key-to-your-github-account",
    "title": "GitHub - Configuring SSH credentials",
    "section": "Add the SSH public key to your GitHub account",
    "text": "Add the SSH public key to your GitHub account\nLink to this step\nFirst, we need the content of the public key:\n\n\nGet the public key value\n\n$ cat ~/.ssh/id_ed25519.pub\n  # It will output the content of the file\n\nThen go to your GitHub account via browser to:\n\nSettings –&gt; Access –&gt; SSH and GPG keys\n\nThen, click New SSH key or Add SSH key:\n\nIn “Title”, add a descriptive label for the new key (i.e: “Personal laptop”)\nLeave the Key type as Authentication Key\nPaste your public key into the Key field\nFinish by clicking the Add SSH key button\nIf prompted, confirm access to your account on GitHub"
  },
  {
    "objectID": "devops-guides/version-control-software/github-credentials.html#testing-your-ssh-connection",
    "href": "devops-guides/version-control-software/github-credentials.html#testing-your-ssh-connection",
    "title": "GitHub - Configuring SSH credentials",
    "section": "Testing your SSH connection",
    "text": "Testing your SSH connection\nThe last thing to do is test that we can authenticate against github using ssh:\n\n\nGitHub SSh connection test\n\n$ ssh -T git@github.com\n# This attempts to ssh to GitHub and a warning related to an unknown host appears\n&gt; The authenticity of host 'github.com (IP ADDRESS)' can\\'t be established.\n&gt; RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\n&gt; Are you sure you want to continue connecting (yes/no)?\n\n# Just Accept the connection by typing 'yes'\n\nHi USERNAME! You\\'ve successfully authenticated, but GitHub does not\nprovide shell access.\n# This message proves that the connection has been successful!"
  },
  {
    "objectID": "devops-guides/version-control-software/git-useful-tips.html#remote-repository",
    "href": "devops-guides/version-control-software/git-useful-tips.html#remote-repository",
    "title": "GIT useful tips",
    "section": "Remote repository",
    "text": "Remote repository\n\nGet a copy of a remote repository\ngit clone &lt;git-repository-url&gt;\nWhen authenticating with SSH, use the appropriate SSH url.\n\n\nUpdate list of repository’s remote branches\ngit remote update &lt;remote-repo&gt; --prune\n\n--prune removes any local reference to non-existing remote branches\n\nIf we have other remotes, just repeat the process changing the remote name:\ngit remote update &lt;another-remote-repo&gt; --prune\n\n\nSet the remote repository branch to track\ngit branch -u &lt;remote-repo&gt;/&lt;remote-branch&gt;\n\n\nCheck repository tracking config\nYou can always check what branches are tracked for each local branch in the .git/config file:\n[core]\n        repositoryformatversion = 0\n        filemode = false\n        bare = false\n        logallrefupdates = true\n[remote \"origin\"]\n        url = git@github.com:ProtossGP32/gameBoardStats.git\n        fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"main\"]\n        remote = origin\n        merge = refs/heads/main\n[remote \"upstream\"]\n        url = git@github.com:cifoteam/gameBoardStats.git\n        fetch = +refs/heads/main:refs/remotes/upstream/main\n[branch \"task/59-create-gamescollectionmanager-class\"]\n        remote = origin\n        merge = refs/heads/task/59-create-gamescollectionmanager-class\n[branch \"task/66-modify-gamescollection-class-to-include-info-related-to-the-games-usage\"]\n        remote = origin\n        merge = refs/heads/task/66-modify-gamescollection-class-to-include-info-related-to-the-games-usage"
  },
  {
    "objectID": "devops-guides/version-control-software/git-useful-tips.html#branches",
    "href": "devops-guides/version-control-software/git-useful-tips.html#branches",
    "title": "GIT useful tips",
    "section": "Branches",
    "text": "Branches\n\nShow available branches\ngit branch\n\nAlso show remote branches:\n\ngit branch -a\n\n\nClone an existing branch\ngit checkout &lt;branch-name&gt;\nIf you want to checkout a branch from another remote repository, do the following:\n\n\n\nCreate a new branch\ngit checkout -b &lt;new-branch-name&gt;\n\n\nDelete a local branch\ngit branch --delete &lt;branch-name&gt;\n\n\nDelete a remote branch\ngit push origin --delete feature/login"
  },
  {
    "objectID": "devops-guides/version-control-software/git-useful-tips.html#updating-local-checkouts",
    "href": "devops-guides/version-control-software/git-useful-tips.html#updating-local-checkouts",
    "title": "GIT useful tips",
    "section": "Updating local checkouts",
    "text": "Updating local checkouts\n\nRetrieve latest changes in remote repositories\ngit fetch\n\nThis command downloads the git objects (blobs, trees and commits), it doesn’t merge the changes into the local checkouts.\n\nThis means that the files in local branches are still behind the latest commits, they must be merged or fast-forwarded\n\n\n\n\nUpdate local branches\ngit merge &lt;remote-branch&gt; &lt;local-branch&gt;\n\n\nOverwrite local branches with remote repositories\ngit pull"
  },
  {
    "objectID": "devops-guides/version-control-software/git-useful-tips.html#pushing-local-checkouts",
    "href": "devops-guides/version-control-software/git-useful-tips.html#pushing-local-checkouts",
    "title": "GIT useful tips",
    "section": "Pushing local checkouts",
    "text": "Pushing local checkouts\n\nPush a local branch to a remote repository\nWhen pushing a branch for the first time, it has to be created in the remote repository. This is done during push with the following command:\ngit push --set-upstream &lt;remote-repo&gt; &lt;local-branch&gt;\n\n--set-upstream automatically sets up the tracking information for that branch\n\nIf the branch is already created in the remote repository or you’re pushing to a different remote (and don’t want it as the following repository), you can simply push it to the desired remote by executing:\ngit push &lt;remote-repo&gt;\nBe aware that for this to work, a remote repository must be already configured as the following one. I.e: you already told Git that you’re following the same branch in origin repo and now you want to simply push it to the upstream repository."
  }
]