[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Index",
    "section": "",
    "text": "CIFO Web Applications course documentation"
  },
  {
    "objectID": "project-management/decision-making.html",
    "href": "project-management/decision-making.html",
    "title": "Decision Making",
    "section": "",
    "text": "From UMass Darthmouth:\n\nDecision making is the process of making choices by identifying a decision, gathering information, and assessing alternative resolutions.\nUsing a step-by-step decision-making process can help you make more deliberate, thoughtful decisions by organizing relevant information and defining alternatives. This approach increases the chances that you will choose the most satisfying alternative possible.\n\n\n\n\n7 Steps to Effective Decision Making"
  },
  {
    "objectID": "project-management/decision-making.html#step-0-go-for-small-iterations-of-work",
    "href": "project-management/decision-making.html#step-0-go-for-small-iterations-of-work",
    "title": "Decision Making",
    "section": "Step 0: Go for small iterations of work",
    "text": "Step 0: Go for small iterations of work\nFocusing on small, feasable units of work allows the team to quickly identify problems."
  },
  {
    "objectID": "project-management/decision-making.html#step-1-identify-the-decision",
    "href": "project-management/decision-making.html#step-1-identify-the-decision",
    "title": "Decision Making",
    "section": "Step 1: Identify the decision",
    "text": "Step 1: Identify the decision\nYou realize that you need to make a decision. Try to clearly define the nature of the decision you must make. This first step is very important"
  },
  {
    "objectID": "project-management/decision-making.html#step-2-gather-relevant-information",
    "href": "project-management/decision-making.html#step-2-gather-relevant-information",
    "title": "Decision Making",
    "section": "Step 2: Gather relevant information",
    "text": "Step 2: Gather relevant information\nCollect some pertinent information before you make your decision: what information is neeede, the best sources of information, and how to get it. This step involves both internal and external “work”. Some information is internal: you’ll seek it through a process of self-assessment. Other information is external: you’ll find it online, in books, from other people, and from other sources."
  },
  {
    "objectID": "project-management/decision-making.html#step-3-identify-the-alternatives",
    "href": "project-management/decision-making.html#step-3-identify-the-alternatives",
    "title": "Decision Making",
    "section": "Step 3: Identify the alternatives",
    "text": "Step 3: Identify the alternatives\nAs you collect information, you will probably identify several possible paths of action, or alternatives. You can also use your imagination and additional information to construct new alternatives. In this step, you will list all possible and desirable alternatives."
  },
  {
    "objectID": "project-management/decision-making.html#step-4-weigh-the-evidence",
    "href": "project-management/decision-making.html#step-4-weigh-the-evidence",
    "title": "Decision Making",
    "section": "Step 4: Weigh the evidence",
    "text": "Step 4: Weigh the evidence\nDraw on your information and emotions to imagine whati it would be like if you carried out each of the alternatives to the end. Evaluate whether the need identified in Step 1 would be met or resolved through the use of each alternative. As you go through this difficult internal process, you’ll begin to favor certain alternatives: those that seem to have a higher potential for reaching your goal. Finally, place the alternatives in a priority order, based upon your own value system."
  },
  {
    "objectID": "project-management/decision-making.html#step-5-choose-among-alternatives",
    "href": "project-management/decision-making.html#step-5-choose-among-alternatives",
    "title": "Decision Making",
    "section": "Step 5: Choose among alternatives",
    "text": "Step 5: Choose among alternatives\nOnce you have weighed all the evidence, you are ready to select the alternative that seems to be best one for you. You may even choose a combination of alternatives. Your choice in Step 5 may very likely be the same or similar to the alternative you placed at the top of your list at the end of Step 4."
  },
  {
    "objectID": "project-management/decision-making.html#step-6-take-action",
    "href": "project-management/decision-making.html#step-6-take-action",
    "title": "Decision Making",
    "section": "Step 6: Take action",
    "text": "Step 6: Take action\nYou’re now ready to take some positive action by beginning to implement the alternative you chose in Step 5."
  },
  {
    "objectID": "project-management/decision-making.html#step-7-review-your-decision-its-consequences",
    "href": "project-management/decision-making.html#step-7-review-your-decision-its-consequences",
    "title": "Decision Making",
    "section": "Step 7: Review your decision & its consequences",
    "text": "Step 7: Review your decision & its consequences\nIn this final step, consider the results of your decision and evaluate whether or not it has resolved the need you identified in Step 1. If the decision has not met the identified need, you may want to repeat certain steps of the process to make a new decision. For example, you might want to gather more detailed or somewhat different information or explore additional alternatives."
  },
  {
    "objectID": "project-management/project-life-cycle.html",
    "href": "project-management/project-life-cycle.html",
    "title": "What is the project lifecycle?",
    "section": "",
    "text": "The software development lifecycle (SDLC) is a process that describes the stages involved in creating and deployng software."
  },
  {
    "objectID": "project-management/project-life-cycle.html#planning",
    "href": "project-management/project-life-cycle.html#planning",
    "title": "What is the project lifecycle?",
    "section": "Planning",
    "text": "Planning\nThis stage involves identifying the goals and objectives of the software, as well as determining the resources and timelines required to develop it."
  },
  {
    "objectID": "project-management/project-life-cycle.html#design",
    "href": "project-management/project-life-cycle.html#design",
    "title": "What is the project lifecycle?",
    "section": "Design",
    "text": "Design\nIn this stage, the software’s architecture and user interface are created, and the functional and non-functional requirements are defined."
  },
  {
    "objectID": "project-management/project-life-cycle.html#test",
    "href": "project-management/project-life-cycle.html#test",
    "title": "What is the project lifecycle?",
    "section": "Test",
    "text": "Test\nThis stage involves the implementation of test-driven development (TDD). It starts by writing automated test cases based on the requirements and design of the software. The developer then writes the minimum amount of code needed to pass the test, and repeat this process until all the requirements are met."
  },
  {
    "objectID": "project-management/project-life-cycle.html#develop",
    "href": "project-management/project-life-cycle.html#develop",
    "title": "What is the project lifecycle?",
    "section": "Develop",
    "text": "Develop\nThe actual coding of the software takes place during this stage. This may involve writing code in a specific programming language or using certain development tools."
  },
  {
    "objectID": "project-management/project-life-cycle.html#maintain",
    "href": "project-management/project-life-cycle.html#maintain",
    "title": "What is the project lifecycle?",
    "section": "Maintain",
    "text": "Maintain\nOnce the software is tested and developed, it will be integrated into the primary source code through developer efforts, usually by leveraging training environments to detect further errors or defects."
  },
  {
    "objectID": "project-management/project-life-cycle.html#deploy",
    "href": "project-management/project-life-cycle.html#deploy",
    "title": "What is the project lifecycle?",
    "section": "Deploy",
    "text": "Deploy\nThe final stage is deployment, where the software is made available to users. This may involve installing the software on individual computers or deploying it to a server for multiple users to access."
  },
  {
    "objectID": "project-management/useful-questions.html",
    "href": "project-management/useful-questions.html",
    "title": "Useful questions",
    "section": "",
    "text": "Answering the useful (right?) questions\nQuestions that begin with the words why, who, what and how are necessary and paramount because they help to clarify information, to seek additional details, and to better understand a situation. Besides, they play a crucial role in facilitating communication and understanding.\nThese words are often used to ask open-ended questions, which are questions that cannot be answered with a simple yes or no. Asking open-ended questions allows for more in-depth conversation and debate and can help to uncover important information or insights.\n\n\n\n\n\n\nOverall, asking why, who, what and how can help to imporve communication, to facilitate decision-making, and to deepen understanding.\n\n\n\n\n\n\n\nflowchart\n    id1{Why: programming} --> id1a[You love it]\n    id1 --> id1b[You need it]\n    id1a --> id2{Who: profiles}\n    id1c[Here you need some kind of guidance] --> id2\n    id1b --> id2\n    id2 -->|Teacher? Senior?\\nElse, a coder| id3[What: sylabus]\n    id3 -->|The what is helpless\\nif you don't know the for| id4[For what: skills]\n    id4 -->|The second most important step\\nafter the 'why': the 'how'.\\nA bad 'how' may destroy your 'why'| id5[How: learning techniques]"
  },
  {
    "objectID": "project-management/scrum-management.html",
    "href": "project-management/scrum-management.html",
    "title": "Scrum management",
    "section": "",
    "text": "Here we’ll discuss some key topics regarding Scrum management of projects"
  },
  {
    "objectID": "project-management/scrum-management.html#sprints",
    "href": "project-management/scrum-management.html#sprints",
    "title": "Scrum management",
    "section": "Sprints",
    "text": "Sprints\n\nSprint 0 (It doesn’t exist, really!!)\nWhat this sprint isn’t:\n\nIt is not the phase in which the team is put together\n\nIn order to conduct a Sprint in the first place, a team must already be in place\n\nIt is not the phase for setting up infrastructure which should already be implemented or easily implemented on demand, but not as part of a Sprint Zero\nIt should not involve adding products to a backlog or Consider Planning as classical project with Gantt Diagrams plannings\n\nThe main goal of a Sprint Zero is to deliver some usable value that can be built upon by the next team.\nSprint Zeroes are required to:\n\nCreate the project’s skeleton, including research spikes\nKeep design minimal\nDevelop a small number of stories to completion\nBe low velocity and lightweight\n\nMore specifically, the deliverables of a Sprint Zero should be as follows:\n\nA usable piece of code, however small\nA minimal environment for writing code\nA prioritization of features or a list of stories\nA release plan assigning each story to a Sprint\nA plan for the most likely implementation of features\n\n\nKeywords of a Sprint Zero:\nLet’s take the example of the Library Laboratory SE03-01\n\n\n\n\n\n\n\nsprintZero\n\n Sprint Zero  \n\nSprint Zero\n\n Sprint Zero   \n\n1 - Project\n\n 1 - Project   \n\nSprint Zero–1 - Project\n\n   \n\n2 - DDD\n\n 2 - DDD   \n\nSprint Zero–2 - DDD\n\n   \n\n3 - UML\n\n 3 - UML   \n\nSprint Zero–3 - UML\n\n   \n\n4 - Code\n\n 4 - Code   \n\nSprint Zero–4 - Code\n\n   \n\nUse Case\n\n Use Case   \n\n1 - Project–Use Case\n\n   \n\nDocumentation\n\n Documentation   \n\n1 - Project–Documentation\n\n   \n\nMock-up\n\n Mock-up   \n\n1 - Project–Mock-up\n\n   \n\nOpen?\n\n Open Project?   \n\n1 - Project–Open?\n\n   \n\nVocabulary\n\n Vocabulary   \n\n2 - DDD–Vocabulary\n\n   \n\nPackages\n\n Packages   \n\n2 - DDD–Packages\n\n   \n\nModel\n\n Model   \n\n2 - DDD–Model\n\n   \n\nController\n\n Controller   \n\n2 - DDD–Controller\n\n   \n\nRefactor\n\n Refactor Domain   \n\n2 - DDD–Refactor\n\n   \n\nRelationships\n\n Relationships   \n\n3 - UML–Relationships\n\n   \n\nUtilities\n\n Utilities   \n\n4 - Code–Utilities\n\n   \n\nCore model\n\n Core model   \n\n4 - Code–Core model\n\n   \n\nManagers\n\n Managers   \n\n4 - Code–Managers\n\n   \n\nDependencies\n\n Dependencies   \n\n4 - Code–Dependencies\n\n   \n\nMaven\n\n Maven   \n\n4 - Code–Maven\n\n   \n\nRefactor\n\n Refactor Code   \n\n4 - Code–Refactor\n\n   \n\nTest\n\n Test   \n\n4 - Code–Test\n\n   \n\nGit\n\n Git   \n\n4 - Code–Git\n\n   \n\nUser Stories\n\n User Stories   \n\nUse Case–User Stories\n\n   \n\nQuarto\n\n Quarto   \n\nDocumentation–Quarto\n\n   \n\nObsidian\n\n Obsidian   \n\nDocumentation–Obsidian\n\n   \n\nNew Feature\n\n New Feature   \n\nMock-up–New Feature\n\n   \n\nCommon\n\n Common Language   \n\nVocabulary–Common\n\n   \n\nController–Managers\n\n   \n\nIf there isCode\n\n If there is Legacy Code   \n\nRefactor–If there isCode\n\n   \n\nRefactor–Refactor\n\n   \n\nComposition\n\n Composition   \n\nRelationships–Composition\n\n   \n\nInheritance\n\n Inheritance   \n\nRelationships–Inheritance\n\n   \n\nMultiplicity\n\n Multiplicity   \n\nRelationships–Multiplicity\n\n   \n\nBook\n\n Book   \n\nCore model–Book\n\n   \n\nBorrow\n\n Borrow   \n\nCore model–Borrow\n\n   \n\nUser\n\n User   \n\nCore model–User\n\n   \n\nlombok\n\n lombok   \n\nDependencies–lombok\n\n   \n\nJUnit\n\n JUnit   \n\nDependencies–JUnit\n\n   \n\nJupiter\n\n Jupiter   \n\nDependencies–Jupiter\n\n   \n\nfaker\n\n faker   \n\nDependencies–faker\n\n   \n\nMake Borrow\n\n Make Borrow   \n\nTest–Make Borrow\n\n   \n\nGitHub\n\n GitHub   \n\nGit–GitHub\n\n   \n\nCreate\n\n Create   \n\nfaker–Create\n\n   \n\n100 books\n\n 100 books   \n\nCreate–100 books\n\n   \n\n100 users\n\n 100 users   \n\nCreate–100 users"
  },
  {
    "objectID": "devops-guides/self-hosted-project/docker-software-deployment.html#communication",
    "href": "devops-guides/self-hosted-project/docker-software-deployment.html#communication",
    "title": "Docker software deployment",
    "section": "Communication",
    "text": "Communication\n\nNextCloud\n\nInstallation\nFollow the Docker deployment installation guide for a quick nextCloud deployment. After that, create the required configurations to ensure persistence.\nFor a quick test, just run:\ndocker run -d -p 8081:80 nextcloud:stable-apache\nConnect to http://<nextcloud-server>:8081 and follow the instructions. Install the recommended apps to try the Online Office feature.\n\n\n\n\n\n\nData is not persistent!\n\n\n\nBe aware that if no volume binding has been made, when stopping the containers the volumes become dandling, not reattached to the next started container. Make sure to define pertinent volume attachments when deploying to production.\n\n\n\n\n\n\n\n\nEnabling NextCloud office features\n\n\n\nNextCloud can make use of a built-in document server named Collabora, based on LibreOffice that allows to modify several types of documents online.\nOn a testing environment, if documents aren’t opened online, try to go to the Administration Parameters –> Administration –> Office. Even though the second option is selected, the built-in CODE isn’t accessible due to using an insecure protocol (HTTP) (just try to click again on the button and the verification will fail). As a workaround, click on the first option Use your own server and just tick the Disable certificate verification checkbox; Now the notification regarding Collabora Online accessibility should be OK.\n\n\n\n\n\n\n\n\nSome features are unavailable without an SSL certificate\n\n\n\nFeatures like video conferences in Talk are disabled. When using a service like Cloudflare that creates an HTTPS tunnel towards the application, then this problem is solved.\n\n\n\n\n\n\n\n\nOnlyOffice + NextCloud integration\n\n\n\nAs an alternative to the built-in Collabora/CODE document server, if you want to easily deploy both the OnlyOffice Document Server and the NextCloud at the same time, follow this installation guide. It contains a docker-compose.yml file for the deployment.\n\n\n\n\nConfiguration\nTry to create a docker-compose.yml file to ease the nextCloud deployment. The steps are defined in the installation guide:\n\n\n\n\n\n\nTODO\n\n\n\nUpload the docker-compose.yml of NextCloud and render it here"
  },
  {
    "objectID": "devops-guides/self-hosted-project/docker-software-deployment.html#collaborative-tools",
    "href": "devops-guides/self-hosted-project/docker-software-deployment.html#collaborative-tools",
    "title": "Docker software deployment",
    "section": "Collaborative tools",
    "text": "Collaborative tools"
  },
  {
    "objectID": "devops-guides/self-hosted-project/docker-software-deployment.html#productivity-tools",
    "href": "devops-guides/self-hosted-project/docker-software-deployment.html#productivity-tools",
    "title": "Docker software deployment",
    "section": "Productivity tools",
    "text": "Productivity tools\n\nOpenProject\nOpenProject is a project management suite. It has the required tools to manage Scrum projects.\n\nInstallation\nOpenProject can be deployed as docker containers. Follow the installation guide to do it. They have a GitHub repository with the docker-compose configuration to easily deploy it.\n\n\n\n\n\n\nBe patient with the OpenProject initialization\n\n\n\nIt takes some time for the OpenProject Web GUI to be available, just wait at least 5 minutes. If something goes wrong, check logs. From the same docker-compose.yml dir:\ndocker compose logs\n\n\nOnce up, access the Web GUI at http://<openproject-ip>:8080\n\n\nConfiguration\nThings to consider configuring:\n\nUser creation activation: by default, the admin user is responsible of manually activate any new account. This can be changed to automatically activate accounts either instantly or by sending an e-mail\n\nThe e-mail option requires OpenProject to have an SMTP server available to send mails\n\n\n\n\n\n\n\n\nTODO\n\n\n\nUpload the docker-compose.yml and docker-compose.override.yml files and render them here."
  },
  {
    "objectID": "devops-guides/self-hosted-project/docker-software-deployment.html#user-database-and-authentication",
    "href": "devops-guides/self-hosted-project/docker-software-deployment.html#user-database-and-authentication",
    "title": "Docker software deployment",
    "section": "User database and authentication",
    "text": "User database and authentication\n\nOpenLDAP + phpLDAPadmin\nWe’ll be using a bitnami/openldap docker image as it runs as non-privileged user, providing an additional layer of security.\n\n\n\n\n\n\nTODO\n\n\n\nUpload the docker-compose.yml file and render it here.\n\n\n\n\nFreeIPA\nFollow this tutorial:"
  },
  {
    "objectID": "devops-guides/self-hosted-project/docker-software-deployment.html#code-analysis",
    "href": "devops-guides/self-hosted-project/docker-software-deployment.html#code-analysis",
    "title": "Docker software deployment",
    "section": "Code analysis",
    "text": "Code analysis\n\nSonarQube\n\nUse the following docker-compose.yml as a starting point.\nSonarqube uses ElasticSearch, and it requires some system params changes, we have to change it inside the docker container. We’ll use an init container for that:\n\nAdd the following code snippet as a service inside the docker-compose.yml:\n\n\n\ndocker-compose.yml\n\nservice:\n    [...]\n    # Init container for system parameter changes\n    init:\n        image: bash\n        privileged: true\n        user: root\n        volumes:\n        - ./scripts/init.sh:/mnt/init.sh\n        command: [\"sh\", \"-e\", \"/mnt/init.sh\"]\n\n\nCreate a scripts/init.sh file that changes some limits:\n\n\n\nscripts/init.sh\n\nsysctl -w vm.max_map_count=524288\nsysctl -w fs.file-max=131072\n\nIf we want SonarQube to use LDAP authentication, we need to add custom config properties:\n\nWe must edit its properties file $SONARQUBE_HOME/conf/sonar.properties (change the values according to your LDAP server):\n\n\n\n$SONARQUBE_HOME/conf/sonar.properties\n\n# LDAP configuration\n\n# General Configuration\nsonar.security.realm=LDAP\nldap.url=ldap://myserver.mycompany.com\nldap.bindDn=my_bind_dn # i.e: cn=admin,dc=mycompany,dc=com\nldap.bindPassword=my_bind_password\n\n# User Configuration\nldap.user.baseDn=ou=Users,dc=mycompany,dc=com\nldap.user.request=(&(objectClass=inetOrgPerson)(uid={login}))\nldap.user.realNameAttribute=displayName\nldap.user.emailAttribute=mail\n\n# Group Configuration\nldap.group.baseDn=ou=Groups,dc=sonarsource,dc=com\nldap.group.request=(&(objectClass=groupOfUniqueNames)(uniqueMember={dn}))\n\n\nAdd both a conf volume and the sonar.properties inside the SonarQube docker-compose file:\n\n\n\n$PWD/docker-compose.yml\n\nservices:\n    sonarqube:\n        [...]\n        volumes:\n        - sonarqube_conf:/opt/sonarqube/conf\n        - $PWD/conf/sonar.properties:/opt/sonarqube/conf/sonar.properties\n\nvolumes:\n    [...]\n    sonarqube_conf:\n\n\n\n\n\n\n\n\nTODO\n\n\n\nObfuscate LDAP credentials somehow!"
  },
  {
    "objectID": "devops-guides/version-control-software/git-useful-tips.html#remote-repository",
    "href": "devops-guides/version-control-software/git-useful-tips.html#remote-repository",
    "title": "GIT useful tips",
    "section": "Remote repository",
    "text": "Remote repository\n\nGet a copy of a remote repository\ngit clone <git-repository-url>\n\n\nUpdate list of repository’s remote branches\ngit remote update origin --prune\n\n--prune removes any local reference to non-existing remote branches"
  },
  {
    "objectID": "devops-guides/version-control-software/git-useful-tips.html#branches",
    "href": "devops-guides/version-control-software/git-useful-tips.html#branches",
    "title": "GIT useful tips",
    "section": "Branches",
    "text": "Branches\n\nShow available branches\ngit branch\n\nAlso show remote branches:\n\ngit branch -a\n\n\nClone an existing branch\ngit checkout <branch-name>\n\n\nCreate a new branch\ngit checkout -b <new-branch-name>\n\n\nDelete a local branch\ngit branch --delete <branch-name>\n\n\nDelete a remote branch\ngit push origin --delete feature/login"
  },
  {
    "objectID": "devops-guides/version-control-software/git-useful-tips.html#updating-local-checkouts",
    "href": "devops-guides/version-control-software/git-useful-tips.html#updating-local-checkouts",
    "title": "GIT useful tips",
    "section": "Updating local checkouts",
    "text": "Updating local checkouts\n\nRetrieve latest changes in remote repositories\ngit fetch\n\nThis command downloads the git objects (blobs, trees and commits), it doesn’t merge the changes into the local checkouts.\n\nThis means that the files in local branches are still behind the latest commits, they must be merged or fast-forwarded\n\n\n\n\nUpdate local branches\ngit merge <remote-branch> <local-branch>\n\n\nOverwrite local branches with remote repositories\ngit pull"
  },
  {
    "objectID": "devops-guides/mint-vm-provisioning.html",
    "href": "devops-guides/mint-vm-provisioning.html",
    "title": "Virtual Machine Provisioning",
    "section": "",
    "text": "In this page we’re going to define the steps to create and install all the required software for the CIFO Web Application course. At the end of the process we’ll have created a fully functional environment for software development, documentation and deployment, and we’ll also have some scripts that automate the installation of the required software and dependencies in case they have to be installed again"
  },
  {
    "objectID": "devops-guides/mint-vm-provisioning.html#linux-mint-installation",
    "href": "devops-guides/mint-vm-provisioning.html#linux-mint-installation",
    "title": "Virtual Machine Provisioning",
    "section": "Linux Mint installation",
    "text": "Linux Mint installation\n\nWhen initializing the VM, GRUB will greet us with some options. Select Start Linux Mint <version> <desktop-flavour> 64-bit to launch the Live Mint version that lets you test the OS prior to installing it as well as install it onto the virtual disk \nOnce inside the Linux Mint desktop, double-click the Install Linux Mint icon and follow the step-by-step installation process: \n\n\nInstallation steps\n\nLanguage selection: It’s the system language and will be used to also configure any installed software default language\nKeyboard Layout: Select the same one as your host machine, else the keyboard inputs won’t match the inputs shown in the VM (Select Spanish - Spanish)\nMultimedia coders: Skip, unrequired for this course and can always be installed later on\nInstallation type: As we’re installing the OS for the first time, just leave the default Erase disk and install Linux Mint option selected\nInstall now: Accept all changes regarding disk writing\nWhere are you?: This option sets both the timezone of the VM as well as the nearest package repositories to your location that will be used\nWho are you?: Here you define your name (used in other programs as the author of mails, files, projects, etc…), the host name (VM internal name), the username and its password (the process creates a user account based on this information)\n\n\nAfter that, the installation process continues by installing all the required files and stock programs for that distribution and desktop manager\n\n\n\n\n\n\n\nTip\n\n\n\nAt this point there’s no need for any additional input from the user, so you can go grab a coffee or something else as this will take a while to complete\n\n\n\nOnce done, just restart the machine as asked"
  },
  {
    "objectID": "devops-guides/mint-vm-provisioning.html#virtualbox-additional-configurations",
    "href": "devops-guides/mint-vm-provisioning.html#virtualbox-additional-configurations",
    "title": "Virtual Machine Provisioning",
    "section": "VirtualBox additional configurations",
    "text": "VirtualBox additional configurations\nNow VirtualBox is rendering the VM to the native resolution defined within our Linux Mint OS (guest machine). In order to dinamically change the resolution based on the window size, we must install the VirtualBox Guest Additions inside it\n\nWhat does Guest Additions enable?\n\nEnable users to seamlessly move mouse pointer between host and guest OS.\nAllow guest OS to have read and write access to hard drives on the host OS, so you can transfer files between them.\nPower up the graphics/video ability of the guest OS. The screen resolution of guest OS can be automatically adjusted and 3D graphics can be accelerated.\nEnable bidirectional shared clipboard between host and guest OS, so you can copy and paste stuff between them.\n\n\n\nInstallation steps\n\nOn the Devices drop-down menu, select Insert Guest Additions CD image \nVirtual Box prompts if we want to download the ISO file. Accept all warnings regarding this:\n\n\n\n\n\n\n\n\n(a) Virtual Box - Download Guest Additions\n\n\n\n\n\n\n\n\n\n(b) Virtual Box - Accept Download Guest Additions\n\n\n\n\n\n\n\n\n\n(c) Virtual Box - Mount Guest Additions\n\n\n\n\nFigure 1: Guest Additions warnings\n\n\n\nOnce the ISO is mounted inside the guest OS, it should try to execute the VBoxLinuxAdditions.run file in the ISO root; if not, open a terminal and execute\n\nsudo /media/cifo-web/VBox_GAs_<version>/VBoxLinuxAdditions.run\n\n\n\n\n\n\nWarning\n\n\n\nIf the autoexec function didn’t launch, this doesn’t mean there’s something wrong with your guest OS; it might mean that it has this feature disabled by default. Check your Desktop manager options.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe mount path of the Guest Additions ISO may be different depending on the username and the ISO version, so you might have to change it.\n\n\nThe output should be like this:\ncifo-web@cifoweb-VirtualBox:/media/cifo-web/VBox_GAs_6.1.40$ sudo ./VBoxLinuxAdditions.run\nVerifying archive integrity... All good.\nUncompressing VirtualBox 6.1.40 Guest Additions for Linux........\nVirtualBox Guest Additions installer\nCopying additional installer modules ...\nInstalling additional modules ...\nVirtualBox Guest Additions: Starting.\nVirtualBox Guest Additions: Setting up modules\nVirtualBox Guest Additions: Building the VirtualBox Guest Additions kernel \nmodules.  This may take a while.\nVirtualBox Guest Additions: To build modules for other installed kernels, run\nVirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup <version>\nVirtualBox Guest Additions: or\nVirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup all\nVirtualBox Guest Additions: Building the modules for kernel 5.15.0-41-generic.\nupdate-initramfs: Generating /boot/initrd.img-5.15.0-41-generic\nVirtualBox Guest Additions: Running kernel modules will not be replaced until \nthe system is restarted\n\nRestart your guest OS\n\n\n\n\n\n\n\nNote\n\n\n\nSee this video if you have any more doubts regarding Guest Additions in Linux Mint:\n\n\n\n\n\nGuest Additions configurations\n\nEnable fluid window\nFluid mode is automatically enabled after the guest OS restart. If not, you can always enable it with the shortcut Right Ctrl + L.\n\n\nEnable bidirectional clipboard\nMake sure the clipboard is set to bidirectional; after that, copy-paste commands should work between Host and Guest machines."
  },
  {
    "objectID": "devops-guides/software-installation.html",
    "href": "devops-guides/software-installation.html",
    "title": "Software installation",
    "section": "",
    "text": "This page explains the automation procedure for the software installation required for the CIFO courses"
  },
  {
    "objectID": "devops-guides/software-installation.html#ides",
    "href": "devops-guides/software-installation.html#ides",
    "title": "Software installation",
    "section": "IDEs",
    "text": "IDEs\n\nVisual Studio Code\nUsed mainly for any type of development or documentation maintenance; its plugins allow to easily manage Git and GitHub repositories, create Quarto/Markdown files and publish them as static websites, and many more things.\n\nInstallation page: Running Visual Code on Linux\n\n\n\nIntelliJ IDEA\nIts main purpose is to ease Java applications development. It also has a nice Git and GitHub repository manager, so it’s easy to keep track of the updates and latest changes on our code.\n\nInstallation page: JetBrains Toolbox App\n\nIt’s recommended to install any JetBrains application through their Toolbox, as it also manages any available update of them\n\n\n\n\nVim\nOne of the most popular terminal IDEs for Linux, useful when no Desktop application is available or quick changes on files have to be done from a terminal.\n\nInstallation command:\n\nsudo apt-get install vim\n\n\nSublime Text\nA good text editor which features can be expanded by installing additional extensions/packages. With the correct configuration it can also compile and test projects from within the application.\n\nInstallation page: Linux Package Manager Repositories"
  },
  {
    "objectID": "devops-guides/software-installation.html#version-control-software",
    "href": "devops-guides/software-installation.html#version-control-software",
    "title": "Software installation",
    "section": "Version Control Software",
    "text": "Version Control Software\n\nGit\nThis is the main tool to manage git repositories, any other software uses it on background or includes it within the app. Available by default in the default Linux Package Repositories.\n\nInstallation command:\n\nsudo apt-get install git\n\n\nGitHub\nThe CLI tool to interact with GitHub repositories, very useful to manage your own repositories, branches, etc… It can also create and solve Pull Requests from the CLI.\n\nInstallation page: Installing gh on Linux and BSD\n\n\n\nGitHub Desktop\nThe Desktop app to interact with GitHub repositories, more user-friendly than the CLI version. There’s no official linux release, but GitHub themselves redirect users to a trusted fork (Community Releases).\n\nInstallation page: GitHub Desktop - The Linux Fork"
  },
  {
    "objectID": "devops-guides/software-installation.html#documentation",
    "href": "devops-guides/software-installation.html#documentation",
    "title": "Software installation",
    "section": "Documentation",
    "text": "Documentation\n\nObsidian\nA Markdown editor with many more features. The installation packages for Linux are available in their GitHub releases repository.\n\nInstallation page: Obsidian releases\n\n\n\nQuarto CLI\nA Markdown framework that expands the language by adding compatibily with other documentation tools, such as Medusa for diagrams. The installation packages for Linux are available in their GitHub repository.\n\nInstallation page: Quarto releases"
  },
  {
    "objectID": "devops-guides/software-installation.html#software-installation-script",
    "href": "devops-guides/software-installation.html#software-installation-script",
    "title": "Software installation",
    "section": "Software installation script",
    "text": "Software installation script\nThe script software_install.sh is a shell script that automates all the installation process. As some steps require a more complex parsing logic, the script invokes extra scripts that act as tools. The script is split into the following steps:\n\nInstall pre-required programs (wget, curl, apt-transport-https, etc…)\nAdd both GPG keys and package repositories for the software that has them.\n\nThe sources lists are stored in /etc/apt/sources.list.d.\nThe GPG keys are stored in different paths depending on the app creator instructions\n\nInstall software from newly-added repositories\nInstall software that comes with its own installation scripts\n\nJetbrains Toolbox: tools/jetbrains-toolbox.sh\n\nRetrieve and install .deb packages of software maintained as GitHub repositories\n\nThis step uses the tools/retrieve_latest_release.py script\n\n\n\n\n\n\n\n\nsoftware_installation.sh\n\n\n\n\n\n#!/bin/bash\n#   CIFO Web Applications - Software installation\n#   - This script install the required software for the course\n#   - Categories:\n#       - IDEs\n#       - Version Control Sofware\n#       - Documentation\n\n# Check that the user has enough privileges to install software\nif [[ $EUID -ne 0 ]]; then\n    echo \"This script must be run with administrator privileges. Please execute it with 'sudo' or as root user\"\n    exit 1\nfi\n\n# Define the installation command\n# -qq flag prior to the install command reduces the output messages except for errors\n# -y after the install command is for non-interactive/unattended installations\nINSTALL=\"apt-get -qq install -y\"\nUPDATE=\"apt-get -qq update\"\n\n# Pre-requisites:\n# - Install download and GPG binaries\n# - Apt installation via HTTPS paths must also be installed\n#sudo apt-get install -y wget gpg curl apt-transport-https\n$INSTALL wget gpg curl apt-transport-https\n\n# Additional repositories installation\n# ====================================\n# IDEs:\necho \"Configuring repositories for IDEs...\"\necho \"====================================\"\n# - Microsoft: Visual Studio Code\necho \"- Visual Studio Code\"\n# Retrieve the Microsoft GPG key and install it\nwget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg\ninstall -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg\n# Add the Microsoft Visual Studio Code repository to the apt sources list\nsh -c 'echo \"deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\" > /etc/apt/sources.list.d/vscode.list'\n# Delete the already installed GPG key\nrm -f packages.microsoft.gpg\necho \"\"\n# - Sublime Text\necho \"- Sublime Text\"\n# Retrieve and install GPG key\nwget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | gpg --dearmor > sublimehq-pub.gpg\ninstall -D -o root -g root -m 644 sublimehq-pub.gpg /usr/share/keyrings/sublimehq-pub.gpg\n# Add Sublime Text repository to apt sources list\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/sublimehq-pub.gpg] https://download.sublimetext.com/ apt/stable/\" | tee /etc/apt/sources.list.d/sublime-text.list > /dev/null\n# Delete the already installed GPG key\nrm -f sublimehq-pub.gpg\necho \"\"\n# VCS:\necho \"Configuring repositories for VCS:\"\necho \"=================================\"\n# - GitHub:\necho \"- GitHub\"\n# Install CURL to retrieve GitHub GPG key\n#type -p curl >/dev/null || sudo apt install curl -y\n# Retrieve the GPG key and install it\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg\nchmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg\n# Add GitHub CLI repository to apt sources list\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null\necho \"\"\n# Browsers:\necho \"Configuring repositories for browsers:\"\necho \"======================================\"\n# - Google Chrome\necho \"- Google Chrome\"\n# Retrieve and install the public key\nwget -q -O - https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor > google-chrome-pub.gpg\ninstall -D -o root -g root -m 644 google-chrome-pub.gpg /usr/share/keyrings/google-chrome-pub.gpg\n# Add Google Chrome repository to apt sources list\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/google-chrome-pub.gpg] http://dl.google.com/linux/chrome/deb/ stable main\" | tee /etc/apt/sources.list.d/google-chrome.list > /dev/null\n# Delete the already installed GPG key\nrm -f google-chrome-pub.gpg\necho \"\"\n# Repositories update\necho \"Updating repositories packages lists...\"\necho \"=======================================\"\n$UPDATE\necho \"Done\"\necho \"\"\n# Software installation\necho \"Installing software from repositories:\"\necho \"======================================\"\n# - IDEs: Visual Studio Code, vim, Sublime Text\necho \"Installing IDEs...\"\n$INSTALL code vim sublime-text\necho \"\"\n# - VCS: Git, GitHub\necho \"Installing VCS...\"\n$INSTALL git gh\necho \"\"\n# - Browsers: Google Chrome (stable)\necho \"Installing browsers...\"\n$INSTALL google-chrome-stable\necho \"\"\n# - Documentation: TBD\necho \"Installing Documentation software... TBD\"\necho \"\"\n# - Desktop tools\necho \"Installing Desktop tools...\"\n$INSTALL flameshot\necho \"\"\n\n# External software\necho \"Installing software not in repositories:\"\necho \"========================================\"\n# Jetbrains Toolbox: once installed, use it to install IntelliJ IDEA\necho \"- Jetbrains Toolbox\"\nif [ $(command -v jetbrains-toolbox) ] && [ -f tools/jetbrains-toolbox.sh ]; then\n    # Install toolbox as ROOT and execute it as the current user\n    # This is required as jetbrains toolbox configures the installation paths based on the 'home' folder of the user that executes it\n    ./tools/jetbrains-toolbox.sh && su -c jetbrains-toolbox $SUDO_USER\n    echo \"Toolbox installed, now install IntelliJ IDEA from there\"\nelse\n    echo \"WARNING: Either jetbrains-toolbox.sh script not found or already installed. Skipping installation\"\nfi\necho \"\"\n\n# Install from latest releases of GitHub repositories\necho \"Install from GitHub repositories latest releases\"\necho \"================================================\"\nif [[ -f tools/retrieve_latest_release.py ]]; then\n    # VCS:\n    # - GitHub Desktop\n    echo \"- GitHub Desktop\"\n    ./tools/retrieve_latest_release.py --gh-user shiftkey --gh-repo desktop --pattern .deb\n    echo \"\"\n    # Documentation:\n    # - Obsidian\n    echo \"- Obsidian\"\n    ./tools/retrieve_latest_release.py --gh-user obsidianmd --gh-repo obsidian-releases --pattern .deb\n    echo \"\"\n    # - Quarto\n    echo \"- Quarto\"\n    ./tools/retrieve_latest_release.py --gh-user quarto-dev --gh-repo quarto-cli --pattern .deb\n    echo \"\"\n    echo \"Installing all downloaded packages...\"\n    $INSTALL ./*.deb\n    echo \"Deleting already installed packages...\"\n    rm -r *.deb\nelse\n    echo \"ERROR: retrieve_latest_release.py script not found!! Aborting installation\"\nfi\n\necho \"DONE!!\""
  },
  {
    "objectID": "devops-guides/software-installation.html#tools-scripts",
    "href": "devops-guides/software-installation.html#tools-scripts",
    "title": "Software installation",
    "section": "Tools scripts",
    "text": "Tools scripts\nTools scripts are scripts that help the main script with more complex tasks or simply have all the installation process for a single software:\n\nJetBrains Toolbox\n\n\n\n\n\n\njetbrains-toolbox.sh\n\n\n\n\n\n#!/bin/bash\n\n[ $(id -u) != \"0\" ] && exec sudo \"$0\" \"$@\"\necho -e \" \\e[94mInstalling Jetbrains Toolbox\\e[39m\"\necho \"\"\n\nfunction getLatestUrl() {\nUSER_AGENT=('User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36')\n\nURL=$(curl 'https://data.services.jetbrains.com/products/releases?code=TBA&latest=true&type=release' -H 'Origin: https://www.jetbrains.com' -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept-Language: en-US,en;q=0.8' -H \"${USER_AGENT[@]}\" -H 'Accept: application/json, text/javascript, */*; q=0.01' -H 'Referer: https://www.jetbrains.com/toolbox/download/' -H 'Connection: keep-alive' -H 'DNT: 1' --compressed | grep -Po '\"linux\":.*?[^\\\\]\",' | awk -F ':' '{print $3,\":\"$4}'| sed 's/[\", ]//g')\necho $URL\n}\ngetLatestUrl\n\nFILE=$(basename ${URL})\nDEST=$PWD/$FILE\n\necho \"\"\necho -e \"\\e[94mDownloading Toolbox files \\e[39m\"\necho \"\"\nwget -cO  ${DEST} ${URL} --read-timeout=5 --tries=0\necho \"\"\necho -e \"\\e[32mDownload complete!\\e[39m\"\necho \"\"\nDIR=\"/opt/jetbrains-toolbox\"\necho \"\"\necho  -e \"\\e[94mInstalling to $DIR\\e[39m\"\necho \"\"\nif mkdir ${DIR}; then\n    tar -xzf ${DEST} -C ${DIR} --strip-components=1\nfi\n\nchmod -R +rwx ${DIR}\n\nln -s ${DIR}/jetbrains-toolbox /usr/local/bin/jetbrains-toolbox\nchmod -R +rwx /usr/local/bin/jetbrains-toolbox\necho \"\"\nrm ${DEST}\necho  -e \"\\e[32mDone.\\e[39m\"\n\n\n\n\n\nRetrieve latest package released from GitHub repositories\nIf the GitHub CLI package is installed, then this can be used to retrieve the latest .deb release of any reachable repository:\n\n\n\n\n\n\ngh releases download\n\n\n\n\n\n# Download the latest release\ngh release download --repo ${GH_USER}/${GH_REPO} --pattern '*.deb'\nExample:\ngh release download --repo quarto-dev/quarto-cli --pattern '*.deb'\n\n\n\nIf gh cli is not available, then the following python script has been created for the same purpose:\n\n\n\n\n\n\nretrieve_latest_release.py\n\n\n\n\n\n#!/usr/bin/python3\n# GitHub latest release package retrieval\nimport json\nimport requests\nfrom argparse import ArgumentParser\n\ndef parse_arguments():\n    parser = ArgumentParser(\n        prog=\"retrieve_latest_release\",\n        description=\"Retrieves latest release from a GitHub repository\",\n        epilog=\"GitHub user and repository name are mandatory, as well as the file pattern (.deb, .tar.gz, etc...)\"\n    )\n\n    parser.add_argument('--gh-user', dest='gh_user', type=str, help='The GitHub username', required=True)\n    parser.add_argument('--gh-repo', dest='gh_repo', help='The GitHub repository', required=True)\n    parser.add_argument('--pattern', dest='pattern', help='The pattern of the asst to download', default='.deb', required=False)\n\n    return parser.parse_args()\n\n\ndef main():\n    args = parse_arguments()\n    print(f\"Requesting latest release from {args.gh_user}/{args.gh_repo}, ({args.pattern} format)\")\n    gh_api_url=f\"https://api.github.com/repos/{args.gh_user}/{args.gh_repo}/releases/latest\"\n    r = requests.get(gh_api_url)\n    response_text = json.loads(r.content)\n    #print(json.dumps(response_text, indent=2))\n\n    # Search fot the first asset that matches the file pattern\n    if \"assets\" in response_text:\n        for asset in response_text[\"assets\"]:\n            if \"name\" in asset and asset[\"name\"].endswith(args.pattern):\n                print(f'Downloading {asset[\"browser_download_url\"]}...')\n                filename = asset[\"name\"]\n                download = requests.get(asset[\"browser_download_url\"])\n                print(f\"Saving content into {filename}\")\n                open(filename, \"wb\").write(download.content)\n                break\n\nif __name__ == '__main__':\n    # Execute the main program\n    main()\n\n\n\n\n\nInstall additional extensions for VSCode\nVisual Studio Code comes with a CLI that allows the user to install/uninstall extensions from the terminal. More info can be found in the official documentation.\n\n\n\n\n\n\nPending to create a list of useful extensions and a shell script to install them\n\n\n\n\n\nInstall additional extensions for IntelliJ IDEA\n\n\n\n\n\n\nPending to see if IntelliJ IDEA has any CLI to automate the process"
  },
  {
    "objectID": "devops-guides/virtualization/proxmox.html",
    "href": "devops-guides/virtualization/proxmox.html",
    "title": "Proxmox VE",
    "section": "",
    "text": "From Proxmox page:\n\nProxmox Virtual Environment (Proxmox VE from now on) is a complete, opensouce server management platform for enterprise virtualization. It tightly integrates the KVM hypervisor and Linux Containers (LXC), software-defined storage and networking functionality, on a single platform. With the integrated web-based user interface you can manage VMs and containers, high availability for clusters, or the integrated disaster recovery tools with ease."
  },
  {
    "objectID": "devops-guides/virtualization/proxmox.html#download-iso",
    "href": "devops-guides/virtualization/proxmox.html#download-iso",
    "title": "Proxmox VE",
    "section": "Download ISO",
    "text": "Download ISO\nLatest available ISOs: Link"
  },
  {
    "objectID": "devops-guides/virtualization/proxmox.html#installation-steps",
    "href": "devops-guides/virtualization/proxmox.html#installation-steps",
    "title": "Proxmox VE",
    "section": "Installation steps",
    "text": "Installation steps\nLatest documentation: Link\nJust follow the steps defined in the Installing Proxmox VE section. Remember to keep the root password in a safe place."
  },
  {
    "objectID": "devops-guides/virtualization/proxmox.html#configuration",
    "href": "devops-guides/virtualization/proxmox.html#configuration",
    "title": "Proxmox VE",
    "section": "Configuration",
    "text": "Configuration\nOnce the installation has finished and the machine is restarted, access the Proxmox web interface in the following URL:\nhttps://proxmox.ip.address:8006\nCredentials are root and the password provided during installation.\n\n\n\n\n\n\nIgnore the server subscription\n\n\n\n\n\n The above message can be ignored as it is related to Enterprise subscriptions that include Proxmox support. All Proxmox VE features are available without any subscription.\nYou can remove it by following the steps described in this link, or just executing the following bash command from the node terminal:\nsed -Ezi.bak \"s/(Ext.Msg.show\\(\\{\\s+title: gettext\\('No valid sub)/void\\(\\{ \\/\\/\\1/g\" /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js && systemctl restart pveproxy.service"
  },
  {
    "objectID": "devops-guides/virtualization/proxmox.html#creating-vms-using-a-template-and-cloud-init",
    "href": "devops-guides/virtualization/proxmox.html#creating-vms-using-a-template-and-cloud-init",
    "title": "Proxmox VE",
    "section": "Creating VMs using a template and Cloud-Init",
    "text": "Creating VMs using a template and Cloud-Init\n\nWhat is Cloud-Init?\nCloud-Init is a feature that allows zero-touch OS installations in VM. Cloud-Init allows to define an initial username and password as well as use SSH keys for external logging. It also allows the user to define Network configurations and other things.\nThis is very useful as an auto-provisioning tool!\n\n\nInstallation instructions\nFollow this guide and its corresponding video:\n\nPerfect Proxmox Template with Cloud Image and Cloud Init\n\n\n\n\nNotes on configuring Cloud-Init\n\n\n\n\n\n\nConfigure the network interface!\n\n\n\n\n\n\nProxmox VM - Cloud-Init parameters\n\n\nBy default, Cloud-Init leaves the config of the Network as static and empty, so you must configure it or else there won’t be any network ready:\n\n\n\nProxmox VM - Cloud-Init network default values\n\n\n\n\n\n\n\n\n\n\nNever start the Template VM machine!\n\n\n\nThis VM shall act as a template for other Ubuntu Cloud VMs, and if it is started, then it will be bootstrapped and assigned to an ID that will pass along any VM created from this one.\n\n\n\n\n\n\n\n\nCreating clones with the Cloud-Init VM template\n\n\n\nFor this, you can use the WebUI and right-click on the VM template, or you can use pvesh commands to do it from the terminal. Read this article for more info:\n\nRapid Topology deployment with Proxmox\n\nYou can also use the qm clone command, but make sure to configure unique hardware configs for each one, such as network parameters:\nqm set <vmid> --ipconfig0 ip=<new-ip>,gw=<new-gw>"
  },
  {
    "objectID": "devops-guides/documentation/quarto-quick-guide.html",
    "href": "devops-guides/documentation/quarto-quick-guide.html",
    "title": "Quarto - Quick guide",
    "section": "",
    "text": "Here we’ll describe some useful tips to reduce time and resources when creating Quarto projects"
  },
  {
    "objectID": "devops-guides/documentation/quarto-quick-guide.html#render-current-file",
    "href": "devops-guides/documentation/quarto-quick-guide.html#render-current-file",
    "title": "Quarto - Quick guide",
    "section": "Render current file",
    "text": "Render current file\nquarto render ${quarto_file.qmd}"
  },
  {
    "objectID": "devops-guides/documentation/quarto-quick-guide.html#preview-current-.qmd-file-and-enable-live-changes",
    "href": "devops-guides/documentation/quarto-quick-guide.html#preview-current-.qmd-file-and-enable-live-changes",
    "title": "Quarto - Quick guide",
    "section": "Preview current .qmd file and enable live changes",
    "text": "Preview current .qmd file and enable live changes\nquarto preview ${quarto_file.qmd} --no-browser --no-watch-inputs\nThen, open the provided URL in a new browser tab/window"
  },
  {
    "objectID": "devops-guides/documentation/quarto-quick-guide.html#ensure-that-any-.qmd-file-within-the-quarto-project-is-rendered-on-save",
    "href": "devops-guides/documentation/quarto-quick-guide.html#ensure-that-any-.qmd-file-within-the-quarto-project-is-rendered-on-save",
    "title": "Quarto - Quick guide",
    "section": "Ensure that any .qmd file within the Quarto project is rendered on save",
    "text": "Ensure that any .qmd file within the Quarto project is rendered on save\nIn _quarto.yml file, add the following lines:\neditor:\n    render-on-save: true"
  },
  {
    "objectID": "devops-guides/documentation/quarto-quick-guide.html#when-publishing-dont-render-again-the-.qmd-files-already-rendered-on-save",
    "href": "devops-guides/documentation/quarto-quick-guide.html#when-publishing-dont-render-again-the-.qmd-files-already-rendered-on-save",
    "title": "Quarto - Quick guide",
    "section": "When publishing, don’t render again the .qmd files (already rendered on save)",
    "text": "When publishing, don’t render again the .qmd files (already rendered on save)\nquarto publish gh-pages --no-render"
  },
  {
    "objectID": "java-exercises/Principles/03-polymorphism.html",
    "href": "java-exercises/Principles/03-polymorphism.html",
    "title": "Polymorphism",
    "section": "",
    "text": "Class notes definition\n\n\n\nPolymorphism is a fundamental concept in object-oriented programming. It is the ability of an object to take on different forms.\nIn other words, it is the ability of a single object to behave differently in different context.\n\n\n\n\n\n\n\n\nTODO\n\n\n\nCreate your own definition of polymorphism\n\n\nThe main purpose of polymorphism is to impersonate another inherited class."
  },
  {
    "objectID": "java-exercises/Principles/01-abstraction.html",
    "href": "java-exercises/Principles/01-abstraction.html",
    "title": "Abstraction",
    "section": "",
    "text": "Class notes definition\n\n\n\nAbstraction is the process of focusing on the essential characteristics of an object, while ignoring the non-essential details.\n\n\n\n\n\n\n\n\nTODO\n\n\n\nCreate your own definition of abstraction\n\n\nThe main purpose of abstraction it to sort."
  },
  {
    "objectID": "java-exercises/Principles/00-encapsulation.html",
    "href": "java-exercises/Principles/00-encapsulation.html",
    "title": "Encapsulation",
    "section": "",
    "text": "Class notes definition\n\n\n\nEncapsulation is the process of wrapping data and methods that operate on a data into a single unit. In other words, it is the process of hiding the implementation details of an object from the outside world.\nIn Java, encapsulation is achieved through the use of access modifiers like private, public and protected.\n\n\n\n\n\n\n\n\nTODO\n\n\n\nCreate your own definition of encapsulation\n\n\nThe main purpose of encapsulation is to divide the code and create blocks of functionality."
  },
  {
    "objectID": "java-exercises/Principles/02-inheritance.html",
    "href": "java-exercises/Principles/02-inheritance.html",
    "title": "Inheritance",
    "section": "",
    "text": "Class notes definition\n\n\n\nInheritance is a fundamental concept in object-oriented programming. It is the process of creating new classes from existing classes.\n\n\n\n\n\n\n\n\nTODO\n\n\n\nCreate your own definition of inheritance\n\n\nThe main purpose of inheritance is to reuse your code the most."
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html",
    "href": "java-exercises/Labs/java-se00-3.html",
    "title": "LAB#SE00-3: Maven Library",
    "section": "",
    "text": "ContextGoalTasksOptional\n\n\nBasic understanding of Java programming language is required, as well as some familiarity with Maven or Gradle for managing dependencies and building the project. ssl encryption and is intended to run behind a Knowledge of algotighms and data structures to implement the required classes.\n\n\nDescribe the required models that might define the solution to a Library implementation. Create multiple classes in Java using the most convenient entity relationship between them to im.\nTest these classes using JUnit.\n\n\n\nCreate a new Maven or Gradle project and setting up the project structure\nModify the project’s pom.xml or build.gradle file to import necessary dependencies, including JUnit for testing\nImplement the required classes in Java\nImplement two basic patter-designs: singleton and think about factory\nWrite JUnit tests to verify that classes work as expected\n\n\n\n\nAllow the user to input data via the console, rather than using hard-coded test data in JUnit tests"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#user-interface",
    "href": "java-exercises/Labs/java-se00-3.html#user-interface",
    "title": "LAB#SE00-3: Maven Library",
    "section": "User interface",
    "text": "User interface\nA terminal menu will show the available options of the Library application\n# The interface asks if the user wants to create a borrow\nborrow? YES\n# If answered YES, then proceed with the borrow\n# The interface asks for the user identifier\nUser? user@mail.com\n# If the user doesn't exist, then ask again for the user\nUnknown user, try again. User? john.smith@goodmail.com\n# If the user exists, then show info regarding that user\nUser exists\n- Name: John Smith\n- User id: XXX\n# The interface asks for the title of the book to borrow\nBook to borrow? \"Fake book\"\n# If the book doesn't exist, then ask again for another book\nUnknown book, try again. Book? \"Title of the book\"\n# If the book exists, then show the available issues\nBook exists, there are X available issues\n- Book ID: 001\n- Book ID: 002\n{...}\n- Book ID: 054\nProceed to borrow? YES\n# Use the first available issue of that book and show the Borrow information\nNew borrow created:\n- Borrow ID: 001\n- Book: \"Title of the book\" (Book ID: 001)\n- Initial Borrow: 2023-01-31\n- Due Date: 2023-02-14\n# Ask again if the user wants to borrow something new\nborrow? NO\n# If answered NO, then exit the program\nBYE!\n\n\n\n\nflowchart\n    direction TB\n    id1{Borrow?} -- \"YES\" --> id2[User?]\n    id2 -- \"user@fakemail.com\" -->id3[Unknown user, try again]\n    id3 -- \"Ask the user again\" --> id2\n    id2 -- \"john.smith@goodmail.com\" --> id4[User exists:\\n- Username: John Smith\\n- User ID: XXX]\n    id4 -- \"Ask for a Book name\" --> id5[Book?]\n    id5 -- \"Fake book\" --> id6[Unknown book, try again] --> id5\n    id5 -- \"Title of the book\" --> id7[Title of the book exists, there are X available issues:\\n- Book ID: 001\\n- Book ID: 002\\n...\\n- Book ID: XXX]\n    id7 --> id8{Proceed to\\nborrow?}\n    id8 -- \"YES\" --> id9[New borrow created:\\n- Borrow ID: 001\\n- Book: Title of the book Book ID: 001]"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#core-domain",
    "href": "java-exercises/Labs/java-se00-3.html#core-domain",
    "title": "LAB#SE00-3: Maven Library",
    "section": "Core domain",
    "text": "Core domain"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#logic-domain",
    "href": "java-exercises/Labs/java-se00-3.html#logic-domain",
    "title": "LAB#SE00-3: Maven Library",
    "section": "Logic domain",
    "text": "Logic domain"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#user-interface-domain",
    "href": "java-exercises/Labs/java-se00-3.html#user-interface-domain",
    "title": "LAB#SE00-3: Maven Library",
    "section": "User interface domain",
    "text": "User interface domain"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#core-classes",
    "href": "java-exercises/Labs/java-se00-3.html#core-classes",
    "title": "LAB#SE00-3: Maven Library",
    "section": "Core classes",
    "text": "Core classes\n\nBook\n\n\nPerson\n\n\nUser\n\n\nAuthor\n\n\nBorrow\n\n\n\n\nclassDiagram\n    class Book {\n    }\n\n    class User {\n    <<Person>>\n        -String userId\n    }\n\n    class Borrow {\n        -Date initialBorrow\n        -Date dueDate\n        -Date returnDate\n        -Book borrowedBook\n    }\n\n    Borrow \"1..*\" o-- \"1\" Book : lends\n    Book \"1\" -- \"1..*\" Borrow : can be lent\n    User \"1\" o-- \"*\" Borrow : can make"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#management-classes",
    "href": "java-exercises/Labs/java-se00-3.html#management-classes",
    "title": "LAB#SE00-3: Maven Library",
    "section": "Management classes",
    "text": "Management classes\n\nBookManager\n\n\nUserManager\n\n\nBorrowManager"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#storage-classes",
    "href": "java-exercises/Labs/java-se00-3.html#storage-classes",
    "title": "LAB#SE00-3: Maven Library",
    "section": "Storage classes",
    "text": "Storage classes\n\nBookStorage\n\n\nUserStorage\n\n\nBorrowStorage"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#object-generation-classes",
    "href": "java-exercises/Labs/java-se00-3.html#object-generation-classes",
    "title": "LAB#SE00-3: Maven Library",
    "section": "Object generation classes",
    "text": "Object generation classes"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#objects-creation",
    "href": "java-exercises/Labs/java-se00-3.html#objects-creation",
    "title": "LAB#SE00-3: Maven Library",
    "section": "Objects creation",
    "text": "Objects creation"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#crud-operations",
    "href": "java-exercises/Labs/java-se00-3.html#crud-operations",
    "title": "LAB#SE00-3: Maven Library",
    "section": "CRUD operations",
    "text": "CRUD operations"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-3.html#integration-tests",
    "href": "java-exercises/Labs/java-se00-3.html#integration-tests",
    "title": "LAB#SE00-3: Maven Library",
    "section": "Integration tests",
    "text": "Integration tests\n\nBorrow a book\nDefine the required steps to borrow a book:\n\nCreate a User\nCreate a Book\nCreate a Borrow for that User and Book\n\n\n\nCreate an Input of Borrow by console\nDefine the required steps to replicate the Borrow test using an input from console."
  },
  {
    "objectID": "java-exercises/Labs/java-se01-1.html",
    "href": "java-exercises/Labs/java-se01-1.html",
    "title": "LAB#SE01-1: Maven Person and Account",
    "section": "",
    "text": "ContextGoalTasksOptional\n\n\nBasic understanding of Java programming language is required, as well as some familiarity with Maven or Gradle for managing dependencies and building the project.\nKnowledge of algotighms and data structures to implement the required classes.\n\n\nCreate three classes in Java (Person, Account and Manager) that implement different algorightms or data structures.\nTest these classes using JUnit.\n\n\n\nCreate a new Maven or Gradle project and setting up the project structure\nModify the project’s pom.xml or build.gradle file to import necessary dependencies, including JUnit for testing\nImplement the three required classes in Java\nImplement two basic patter-designs: singleton and think about factory\nWrite JUnit tests to verify that classes work as expected\n\n\n\n\nAllow the user to input data via the console, rather than using hard-coded test data in JUnit tests\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\nclassDiagram\n    Person \"1\" --o \"1\" Account : has\n    Person \"*\" -- \"1\" AccountManager : manages\n\n    class Person{\n        -String name\n        -String address\n        -int age\n        -Account account\n\n        +getBalance()\n        +setBalance()\n        +getPin()\n        +setPin()\n    }\n    \n    class Account{\n        -String accountManager\n        -String pin\n        -double balance\n\n        +equals(Account compared) boolean\n    }\n\n    class AccountManager{\n        +withdrawal(Person person, double amount) boolean\n        +transfer(Person sender, Person receiver, double amount) boolean\n        +changePin(Person person, String oldPin, String newPin) boolean\n    }\n    <<Static>> AccountManager\n    %%note for AccountManager \"Can withdraw money from a person's account\\nCan tranfer money between two persons' account\\nCan change the Pin of a person's account\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPerson class\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter @NoArgsConstructor\npublic class Person {\n    private String name;\n    private String address;\n    private int age;\n    private Account account;\n\n    public Person(String name, String address, int age, Account account) {\n        this.name = name;\n        this.address = address;\n        this.age = age;\n        this.account = account;\n    }\n\n    public double getBalance() {\n        return this.account.getBalance();\n    }\n\n    public void setBalance(double amount) {\n        this.account.setBalance(amount);\n    }\n\n    public String getPin() {\n        return this.account.getPin();\n    }\n\n    public void setPin(String newPin) {\n        this.account.setPin(newPin);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nAccount class\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter @NoArgsConstructor\npublic class Account {\n    private String accountNumber;\n    private String pin;\n    private double balance;\n\n    public Account(String accountNumber, String pin, double balance) {\n        this.accountNumber = accountNumber;\n        this.pin = pin;\n        this.balance = balance;\n    }\n\n    public boolean equals(Object compared) {\n        if (this == compared) {\n            return true;\n        }\n        if (!(compared instanceof Account)) {\n            return false;\n        }\n\n        Account comparedAccount = (Account) compared;\n\n        if (this.accountNumber.equals(comparedAccount.accountNumber) &&\n                this.pin.equals(comparedAccount.pin) &&\n                this.balance == comparedAccount.balance) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter @NoArgsConstructor\n/**\n * Public class with static methods to manage accounts between persons\n */\npublic class AccountManager {\n    public static boolean withdrawal(Person person, double amount) {\n        if (amount > 0 && amount <= person.getBalance()) {\n            person.setBalance(person.getBalance() - amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean transfer(Person sender, Person receiver, double amount) {\n        if (amount > 0 && amount <= sender.getBalance()) {\n            sender.setBalance(sender.getBalance() - amount);\n            receiver.setBalance(receiver.getBalance() + amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean changePin(Person person, String oldPin, String newPin) {\n        if (person.getPin().equals(oldPin)) {\n            person.setPin(newPin);\n            return true;\n        }\n        return false;\n    }\n}\n\n\n\n\n\n\n\n\nThe AccountManager class is created as a Singleton to force its usage when managing accounts.\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\nclassDiagram\n    class Account {\n        -String accountNumber\n        -String pin\n        -double balance\n\n        +getAccountNumber()\n        +setAccountNumber()\n        +getPin()\n        +setPin()\n        +getBalance()\n        +setBalance()\n    }\n\n    class Person {\n        -String name\n        -int age\n        -String address\n        -Account account\n\n        +getName()\n        +setName()\n        +getAge()\n        +setAge()\n        +getAddress()\n        +setAddress()\n        +getAccount()\n        +setAccount()\n        +getBalance()\n        +setBalance()\n        +getPin()\n        +setPin()\n    }\n\n    %% AccountManager Singleton\n    class AccountManager {\n        +getInstance()\n        +withdrawal(Person client, double amount)\n        +transfer(Person sender, Person receiver, double amount)\n        +deposit(Person client, double amount)\n        +changePin(Person client)\n    }\n\n    <<Singleton>> AccountManager\n    %% Classes relationships\n    Person \"1\" --o \"1\" Account : has\n    Person \"*\" -- \"1\" AccountManager : manages\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter\npublic class Person {\n    private String name;\n    private String address;\n    private int age;\n    private Account account;\n\n    public Person(String name, String address, int age, Account account) {\n        this.name = name;\n        this.address = address;\n        this.age = age;\n        this.account = account;\n    }\n\n    public double getBalance() {\n        return this.account.getBalance();\n    }\n\n    public void setBalance(double amount) {\n        this.account.setBalance(amount);\n    }\n\n    public String getPin() {\n        return this.account.getPin();\n    }\n\n    public void setPin(String newPin) {\n        this.account.setPin(newPin);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.labSe01Part1;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter\npublic class Account {\n    private String accountNumber;\n    private String pin;\n    private double balance;\n\n    public Account(String accountNumber, String pin, double balance) {\n        this.accountNumber = accountNumber;\n        this.pin = pin;\n        this.balance = balance;\n    }\n\n    public boolean equals(Object compared) {\n        if (this == compared) {\n            return true;\n        }\n        if (!(compared instanceof Account)) {\n            return false;\n        }\n\n        Account comparedAccount = (Account) compared;\n\n        if (this.accountNumber.equals(comparedAccount.accountNumber) &&\n                this.pin.equals(comparedAccount.pin) &&\n                this.balance == comparedAccount.balance) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.labSe01Part1;\n\npublic class AccountManager {\n    private static AccountManager instance;\n\n    private AccountManager() {\n        // Empty constructor?\n    }\n\n    public static AccountManager getInstance() {\n        if (instance == null) {\n            instance = new AccountManager();\n        }\n        return instance;\n    }\n\n    public static boolean withdrawal(Person person, double amount) {\n        if (amount > 0 && amount <= person.getBalance()) {\n            person.setBalance(person.getBalance() - amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean transfer(Person sender, Person receiver, double amount) {\n        if (amount > 0 && amount <= sender.getBalance()) {\n            sender.setBalance(sender.getBalance() - amount);\n            receiver.setBalance(receiver.getBalance() + amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean deposit(Person person, double amount){\n        if (amount > 0) {\n            person.setBalance(person.getBalance() + amount);\n            return true;\n        }\n        return false;\n    }\n    \n    public static boolean changePin(Person person, String oldPin, String newPin) {\n        if (person.getPin().equals(oldPin)) {\n            person.setPin(newPin);\n            return true;\n        }\n        return false;\n    }\n}\n\n\n\n\n\n\n\n\nAnother approach would be that a client might have multiple accounts. We can manage all the client’s accounts as a HashMap where its keys are the account’s owners (Person) and each value is a list of accounts (Account). This way we are decoupling classes Account and Person.\nThe AccountManager class is created as a Singleton to force its usage when managing accounts.\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\nclassDiagram\n    class Person {\n        -String name\n        -int age\n        -String address\n\n        +getName()\n        +setName()\n        +getAge()\n        +setAge()\n        +getAddress()\n        +setAddress()\n        +equals(Person compared) boolean\n    }\n\n    class Account {\n        -String accountNumber\n        -String pin\n        -double balance\n\n        +getAccountNumber()\n        +setAccountNumber()\n        +getPin()\n        +setPin()\n        +getBalance()\n        +setBalance()\n        +equals(Account compared) boolean\n    }\n\n    %% AccountManager Singleton\n    class AccountManager {\n        -HashMap< Person, ArrayList< Account > > clients\n\n        -getAccount(Person client, String accountNumber)\n        -createAccount(Person client, Account newAccount)\n        -removeAccount(Person client, Account newAccount)\n\n        -getClient(String clientName)\n        -removeClient(Person client)\n\n        -getAccounts(Person client)\n\n        -changePin(Account account, String oldPin, String newPin)\n\n        +getInstance()\n        +getClientBalance(String clientName)\n        +getAccountBalance(String clientName, String accountNumber)\n        +withdrawal(String clientName, String accountNumber, double amount)\n        +transfer(String senderName, String senderAccountNumber, String receiverName, String receiverAccountNumber, double amount)\n        +deposit(String clientName, String accountNumber, double amount)\n        +changePin(String clientName, String accountNumber, String oldPin, String newPin)\n    }\n\n    <<Singleton>> AccountManager\n\n    %% Classes relationship\n    Person \"*\" -- \"1\" AccountManager : manages\n    Account \"*\" -- \"1\" AccountManager : manages\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote"
  },
  {
    "objectID": "java-exercises/Labs/java-se02-1.html",
    "href": "java-exercises/Labs/java-se02-1.html",
    "title": "LAB#SE02-1: Movie/Review, model",
    "section": "",
    "text": "ContextGoalTasksOptional\n\n\nBasic understanding of Java programming language is required, as well as some familiarity with Maven or Gradle for managing dependencies and building the project.\nKnowledge of algotighms and data structures to implement the required classes.\n\n\nCreate three classes in Java (Movie, Critic and Review) that implement different algorightms or data structures.\nTest these classes using JUnit.\n\n\n\nCreate a new Maven or Gradle project and setting up the project structure\nModify the project’s pom.xml or build.gradle file to import necessary dependencies, including JUnit for testing\nImplement the three required classes in Java\nImplement two basic patter-designs: singleton and think about factory\nWrite JUnit tests to verify that classes work as expected\n\n\n\n\nAllow the user to input data via the console, rather than using hard-coded test data in JUnit tests"
  },
  {
    "objectID": "java-exercises/Labs/java-se02-1.html#model-design",
    "href": "java-exercises/Labs/java-se02-1.html#model-design",
    "title": "LAB#SE02-1: Movie/Review, model",
    "section": "Model design",
    "text": "Model design\n\n\n\n\n\n\nUML diagram of the model\n\n\n\nTODO: Review multiplicity concept and apply it to the UML!!\nAn association (the UML equivalent to a relationship in data modeling circles) has a multiplicity for each direction."
  },
  {
    "objectID": "java-exercises/Labs/java-se02-1.html#dependencies",
    "href": "java-exercises/Labs/java-se02-1.html#dependencies",
    "title": "LAB#SE02-1: Movie/Review, model",
    "section": "Dependencies",
    "text": "Dependencies\n\nLombok (both dependency and Maven plugin):\n\n<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <version>1.18.24</version>\n    <scope>provided</scope>\n</dependency>\n<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok-maven-plugin -->\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok-maven-plugin</artifactId>\n    <version>1.18.20.0</version>\n    <scope>provided</scope>\n</dependency>\n\nJunit:\n\n<!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->\n<dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter-api</artifactId>\n    <version>5.9.1</version>\n    <scope>test</scope>\n</dependency>\n\nJava Faker: dependency used to generate stub data for testing\n\n<!-- https://mvnrepository.com/artifact/com.github.javafaker/javafaker -->\n<dependency>\n    <groupId>com.github.javafaker</groupId>\n    <artifactId>javafaker</artifactId>\n    <version>1.0.2</version>\n</dependency>"
  },
  {
    "objectID": "java-exercises/Labs/java-se02-1.html#first-approach",
    "href": "java-exercises/Labs/java-se02-1.html#first-approach",
    "title": "LAB#SE02-1: Movie/Review, model",
    "section": "First approach",
    "text": "First approach\n\nDomain design\n\nMovie\nA Movie class shall represent a movie being reviewed. It should have the following attributes:\n\ntitle: a String representing the title of the movie\nreviews: a Set of Review objects representing the reviews that have been written for this movie\ncritic: The Critic class represents a critic who writes reviews\n\n\n\nCritic\nA Critic class shall represent a critic and a Review of its own. It should have the following attributes:\n\nname: a String representing the name of the critic\nReview: the Review class represents a review of a movie written by a critic\n\n\n\nReview\nA Review class shall represent the information that identifies a review of a movie. It shall have the following attributes:\n\nmovie: a Movie object representing the movie being reviewed\ncritic: a Critic object representing the critic\n\n\n\n\nUML diagram\n\n\n\n\n\n\nQuarto bug\n\n\n\n.mmd files attachment through the file directive (as explained here) isn’t working, there’s an open bug in github.\nOnce the bug is solved, replace any {mermaid} snippet with a link to the uml.mmd file attached to each lab approach like this:\n```{mermaid}\n%%| label: fig-uml\n%%| fig-cap: \"UML diagram\"\n%%| file: ../../../../java-exercises/lab-se-02-1/approach_1/uml.mmd\n\n```\n\n\n\n\n\n\n\nclassDiagram\n    direction LR\n    Review \"*\" o-- \"1\" Movie : has\n    Review \"*\" o-- \"1\" Critic : is done by\n    Critic \"1\" *-- \"*\" Review : can do\n    Movie \"*\" *-- \"*\" Critic : is reviewed by\n    \n    class Movie{\n        -title: String\n        -year: int\n        -critics: Set\n    }\n    \n    class Critic {\n        -name: String\n        -reviews: Set\n    }\n\n    class Review {\n        -movie: Movie\n        -rating: int\n        -comment: String\n        -critic: Critic\n    }\n\n\n\n\n\nFigure 1: UML diagram - First approach"
  },
  {
    "objectID": "java-exercises/Labs/java-se02-1.html#second-approach---less-coupling-between-classes",
    "href": "java-exercises/Labs/java-se02-1.html#second-approach---less-coupling-between-classes",
    "title": "LAB#SE02-1: Movie/Review, model",
    "section": "Second approach - Less coupling between classes",
    "text": "Second approach - Less coupling between classes\nIn this approach we remove redundant or unnecessary associations between the classes.\n\nChanges in previous Domain\n\nMovie\n\nThis time Movie has a Review set instead of a Critic set\n\n\n\nCritic\n\nThis time Critic doesn’t include any reference to the class Review\n\n\n\nReview\n\nReview class is the same as in the first approach\n\n\n\n\nUML diagram\n\n\n\n\n\nclassDiagram\n    direction LR\n    Movie \"1\" *-- \"*\" Review : may have\n    Review \"*\" o-- \"1\" Movie : talks about\n    Review \"1\" o-- \"1\" Critic : is written by\n\n    class Movie {\n        -title: String\n        -reviews: Set\n    }\n\n    class Review {\n        -movie: Movie\n        -critic: Critic\n        -rating: int\n        -comment: String\n    }\n\n    class Critic {\n        -name: String\n    }\n\n\n\n\n\nFigure 2: UML diagram - Second approach"
  },
  {
    "objectID": "java-exercises/Labs/java-se02-1.html#third-approach---use-manager-classes",
    "href": "java-exercises/Labs/java-se02-1.html#third-approach---use-manager-classes",
    "title": "LAB#SE02-1: Movie/Review, model",
    "section": "Third approach - Use Manager classes",
    "text": "Third approach - Use Manager classes\nIn this approach, instead of heavily binding classes between them, we delegate the responsibility to an external class, called MovieManager\n\nLogic\n\nMovieManager (non-static)\nThe non-static approach requests the user to create a MovieManager object in order to access its methods.\n\n\n\n\nclassDiagram\n\n    class MovieManager {\n    }\n\n\n\n\n\n\n\n\n\n\n\nMovieManager (static)\n\n\n\n\n\n\nStatic method and static class\n\n\n\nA static method is a method that is owned only by the class, not by the class objects. You don’t instantiate a class object to access the static methods.\nA static class is a class that doesn’t instantiate objects; thus, static class’ methods are accessed through the class name.\n\n\n\n\n\n\nclassDiagram\n    class MovieManager {\n    }\n\n    <<Static>> MovieManager\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTODO\n\n\n\n\n\n\n\n\n\nUML diagram\n\n\n\n\n\n\nTODO"
  },
  {
    "objectID": "java-exercises/Labs/java-se02-1.html#fourth-approach---create-a-superclass-person",
    "href": "java-exercises/Labs/java-se02-1.html#fourth-approach---create-a-superclass-person",
    "title": "LAB#SE02-1: Movie/Review, model",
    "section": "Fourth approach - Create a superclass Person",
    "text": "Fourth approach - Create a superclass Person\nLet’s say that we want to add information about the FilmMaker and the Actors of a Movie to our model. Now we have three classes (Critic, FilmMaker and Actor) that have something in common: they are all persons. Thus, we can encapsule their common treats into a new class Person and make these classes inherit it.\n\nChanges in Domain\n\nPerson\nThe Person class defines the common treats of any human being:\n\nname: a String representing the name of the person\nbirthDate: a String representing the birth date of the person (it can also be a Date type)\n\n\n\nFilmMaker\nFilmMaker is a Person subclass that contains info about its works:\n\nmovies: a Set of Movie containing all the movies that this Person has filmed\n\n\n\nActor\nActor is a Person subclass that contains info about its works:\n\nmovies: a Set of Movie containing all the movies where this Person has performed in\n\n\n\nCritic\nCritic now is a Person subclass that contains info about the reviews it has written:\n\nreviews: a Set of Review containing all its reviews\n\n\n\n\nLogic\nNow the MovieManager class must take into account all these changes in its methods\n\n\n\n\n\n\nTODO\n\n\n\n\n\n\n\n\nUML diagram\n\n\n\n\n\n\nTODO"
  },
  {
    "objectID": "java-exercises/Labs/java-se02-1.html#create-a-console-user-interface",
    "href": "java-exercises/Labs/java-se02-1.html#create-a-console-user-interface",
    "title": "LAB#SE02-1: Movie/Review, model",
    "section": "Create a console User Interface",
    "text": "Create a console User Interface\n\n\n\n\n\n\nTODO"
  },
  {
    "objectID": "java-exercises/Labs/java-se02-1.html#create-tests-for-each-one",
    "href": "java-exercises/Labs/java-se02-1.html#create-tests-for-each-one",
    "title": "LAB#SE02-1: Movie/Review, model",
    "section": "Create tests for each one",
    "text": "Create tests for each one\n\n\n\n\n\n\nTODO\n\n\n\n\n\n\n\nTests using InputStreams"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-2.html",
    "href": "java-exercises/Labs/java-se00-2.html",
    "title": "LAB#SE00-1: Maven Clinic",
    "section": "",
    "text": "ContextGoalTasksOptional\n\n\nBasic understanding of Java programming language is required, as well as some familiarity with Maven or Gradle for managing dependencies and building the project.\nKnowledge of algotighms and data structures to implement the required classes.\n\n\nCreate multiple classes in Java (Person, Clinic and MyDate) using the most convenient entity relationship between them.\nTest these classes using JUnit.\n\n\n\nCreate a new Maven or Gradle project and setting up the project structure\nModify the project’s pom.xml or build.gradle file to import necessary dependencies, including JUnit for testing\nImplement the required classes in Java\nImplement two basic patter-designs: singleton and think about factory\nWrite JUnit tests to verify that classes work as expected\n\n\n\n\nAllow the user to input data via the console, rather than using hard-coded test data in JUnit tests\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTODO\n\n\n\nPending to create UML diagram\n\n\n\n\n\n\n\n\n\n\n\n\n\nPerson class\n\n\n\n\n\n\n\nPerson.java\n\npackage org.labse00part2.domain;\n\nimport lombok.*;\n\n@Data\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Person {\n    private String name;\n    private int age;\n    private int height;\n    private int weight;\n    private MyDate birthDate;\n\n    public void printPerson() {\n        System.out.println(this.name + \", \" + this.age + \" years old\");\n    }\n\n    public void becomeOlder() {\n        this.age++;\n    }\n\n    public void becomeOlder(int years) {\n        this.age += years;\n    }\n\n    public boolean isAdult() {\n        return this.age >= 18;\n    }\n\n    public double weightIndex() {\n        double heightInMeters = this.height / 100.0;\n        return this.weight / (heightInMeters * heightInMeters);\n    }\n\n    public boolean olderThan(Person compared) {\n        return this.age > compared.getAge();\n    }\n\n    private void setAge() {\n        // TODO: Use the myDate attribute to set the current age\n        // Some methods like becomeOlder should be removed\n    }\n\n    @Override\n    public String toString() {\n        return this.getName() + \", born in \" + this.getBirthDate() + \", \" + this.getAge() + \" years old, weight index: \" + this.weightIndex() + \".\";\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nMyDate class\n\n\n\n\n\n\n\nMyDate.java\n\npackage org.labse00part2.domain;\n\nimport lombok.*;\n\n@Data\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class MyDate {\n    private int day;\n    private int month;\n    private int year;\n\n    @Override\n    public String toString() {\n        return this.getYear() + \"/\" + this.getMonth() + \"/\" + this.getDay();\n    }\n\n    public boolean earlierThan(MyDate compared) {\n        // First, compare years\n        if (this.getYear() < compared.getYear()) {\n            return true;\n        }\n        // Then, compare months\n        if (this.getYear() == compared.getYear() && this.getMonth() < compared.getMonth()) {\n            return true;\n        }\n\n        // Then, compare day\n        if (this.getYear() == compared.getYear()\n                && this.getMonth() == compared.getMonth()\n                && this.getDay() < compared.getDay()){\n            return true;\n        }\n\n        return false;\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nClinic class\n\n\n\n\n\n\n\nClinic.java\n\npackage org.labse00part2.domain;\n\nimport lombok.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Data\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Clinic {\n\n    private String name;\n    private double lowestWeightIndex;\n    private List<Person> members;\n\n    @Builder\n    public Clinic(String name, double lowestWeightIndex) {\n        this.name = name;\n        this.lowestWeightIndex = lowestWeightIndex;\n        this.members = new ArrayList<>();\n    }\n\n    @Builder\n    public Clinic(String name, List<Person> members) {\n        this.name = name;\n        this.members = members;\n        // Once initialized the members, set the lowest Weight Index\n        this.setLowestWeightIndex();\n    }\n\n    public void addMember(Person member) {\n        this.getMembers().add(member);\n        // Remember to update the lowestWeightIndex each time a new member is added\n        if (member.weightIndex() < this.getLowestWeightIndex()) {\n            this.lowestWeightIndex = member.weightIndex();\n        }\n        this.setLowestWeightIndex();\n    }\n\n    public boolean hasMember(Person member) {\n        return this.getMembers().contains(member);\n    }\n\n    public Person personWithHighestWeightIndex() {\n        Person highestWeightIndexMember = null;\n        for (Person member : this.getMembers()) {\n            if (highestWeightIndexMember == null || member.weightIndex() > highestWeightIndexMember.weightIndex()) {\n                highestWeightIndexMember = member;\n            }\n        }\n        return highestWeightIndexMember;\n    }\n\n    public void setLowestWeightIndex() {\n        for (Person member : this.getMembers()) {\n            if (this.getLowestWeightIndex() == 0 || member.weightIndex() < this.getLowestWeightIndex()) {\n                this.lowestWeightIndex = member.weightIndex();\n            }\n        }\n    }\n\n    public String toString() {\n        StringBuilder membersBuilder = new StringBuilder(\"\");\n        for (Person member : this.getMembers()) {\n            membersBuilder.append(member + \"\\n\");\n        }\n        return \"Clinic: \" + this.getName() + \"\\n\"\n                + \"Lowest Weight Index: \" + this.getLowestWeightIndex() + \"\\n\"\n                + \"Members: \" + membersBuilder;\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTODO\n\n\n\nMissing tests for Person and MyDate classes\n\n\n\n\n\n\n\n\nUse the Code Coverage feature!\n\n\n\nWhen launching tests, do it with Code Coverage to know how much of your code is being tested. Just click on the button next to the Run one when executing a batch of tests or right-click on the Play button next to each test:"
  },
  {
    "objectID": "java-exercises/Labs/java-se00-1.html",
    "href": "java-exercises/Labs/java-se00-1.html",
    "title": "LAB#SE00-1: Maven Person",
    "section": "",
    "text": "ContextGoalTasksOptional\n\n\nBasic understanding of Java programming language is required, as well as some familiarity with Maven or Gradle for managing dependencies and building the project. ssl encryption and is intended to run behind a Knowledge of algotighms and data structures to implement the required classes.\n\n\nCreate multiple classes in Java (Person, Student, Book, Car and Author) using the most convenient entity relationship between them.\nTest these classes using JUnit.\n\n\n\nCreate a new Maven or Gradle project and setting up the project structure\nModify the project’s pom.xml or build.gradle file to import necessary dependencies, including JUnit for testing\nImplement the required classes in Java\nImplement two basic patter-designs: singleton and think about factory\nWrite JUnit tests to verify that classes work as expected\n\n\n\n\nAllow the user to input data via the console, rather than using hard-coded test data in JUnit tests\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTODO\n\n\n\nPending to create UML diagram\n\n\n\n\n\n\n\n\n\n\n\n\n\nPerson class\n\n\n\n\n\n\n\nPerson.java\n\npackage org.labse00part1.domain;\n\nimport lombok.*;\n\n@Data\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Person {\n    private String firstName;\n    private String lastName;\n    private int age;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nStudent class\n\n\n\n\n\n\n\nStudent.java\n\npackage org.labse00part1.domain;\n\nimport lombok.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Data\n@Getter\n@Setter\n@NoArgsConstructor\n@ToString(callSuper=true)\npublic class Student extends Person{\n    private String university;\n    private List<Book> books;\n\n    private Car car;\n\n    @Builder\n    public Student(String firstName, String lastName, int age, String university) {\n        super(firstName, lastName, age);\n        this.university = university;\n        this.books = new ArrayList<>();\n        this.car = new Car();\n    }\n\n    @Builder\n    public Student(String firstName, String lastName, int age, String university, List<Book> books) {\n        super(firstName, lastName, age);\n        this.university = university;\n        this.books = books;\n        this.car = new Car();\n    }\n\n    @Builder\n    public Student(String firstName, String lastName, int age, String university, List<Book> books, Car car) {\n        super(firstName, lastName, age);\n        this.university = university;\n        this.books = books;\n        this.car = car;\n    }\n\n    public void addBook(Book newBook) {\n        this.books.add(newBook);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nAuthor class\n\n\n\n\n\n\n\nAuthor.java\n\npackage org.labse00part1.domain;\n\nimport lombok.*;\n\n@Data\n@Getter\n@Setter\n@NoArgsConstructor\n@ToString(callSuper=true)\npublic class Author extends Person{\n    private String genre;\n\n    @Builder\n    public Author(String firstName, String lastName, int age, String genre) {\n        super(firstName, lastName, age);\n        this.genre = genre;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nCar class\n\n\n\n\n\n\n\nCar.java\n\npackage org.labse00part1.domain;\n\nimport lombok.*;\n\n@Data\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Car {\n    public int doors;\n    public int seats;\n    public String color;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nBook class\n\n\n\n\n\n\n\nBook.java\n\npackage org.labse00part1.domain;\n\nimport lombok.*;\n\n@Data\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Book {\n    private String title;\n    private int pages;\n    private String ISBN;\n    private Author author;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse the Code Coverage feature!\n\n\n\nWhen launching tests, do it with Code Coverage to know how much of your code is being tested. Just click on the button next to the Run one when executing a batch of tests or right-click on the Play button next to each test:"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-coupling-and-cohesion.html",
    "href": "java-exercises/Concepts/what-is-coupling-and-cohesion.html",
    "title": "What is coupling and cohesion?",
    "section": "",
    "text": "Coupling and cohesion are important concepts when proposing software solutions during design time.\n\n\n\n\n\n\n\n\nCustom definition\n\n\n\nCoupling is the degree of dependency between classes.\n\n\nWhen designing the model of a project, the level of dependency or coupling between classes shall be the lesser possible. High coupling between classes is bad because if a class must be modified, then all the other classes that are tightly coupled to it will be affected."
  },
  {
    "objectID": "java-exercises/Concepts/what-is-maven.html",
    "href": "java-exercises/Concepts/what-is-maven.html",
    "title": "What is Maven?",
    "section": "",
    "text": "Maven is a Java dependency manager"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-maven.html#description",
    "href": "java-exercises/Concepts/what-is-maven.html#description",
    "title": "What is Maven?",
    "section": "Description",
    "text": "Description\nA dependency is a set of classes that provide functionalities to a Java project."
  },
  {
    "objectID": "java-exercises/Concepts/what-is-maven.html#scope",
    "href": "java-exercises/Concepts/what-is-maven.html#scope",
    "title": "What is Maven?",
    "section": "Scope",
    "text": "Scope\nMaven documentation\nEach dependency can define its scope, used to limit the transitivity of a dependency and to determine when a dependency is included in a classpath.\nThere are 6 different scopes:\n\ncompile: default scope, if none is defined. The dependency is available in all classpaths of a project\nprovided: similar to compile, but JDK or a container is expected to provide the dependency at runtime\nruntime: the dependency is not required for compilation, but is for execution\ntest: the dependency is only available for test compilation and execution phases; not transitive\nsystem: similar to provided, except that a JAR that contains it is explicitly provided; the artifact is always available and is not looked up in a repository\nimport: only support on a dependency of type pom in the <dependencyManager> section. The dependency is to be replaced with the effective list of dependencies in the specified POM’s <dependencyManagement> section. Since they are replaced, dependencies with a scope of import do not actually participate in limiting the transitivity of a dependency"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-maven.html#annotations",
    "href": "java-exercises/Concepts/what-is-maven.html#annotations",
    "title": "What is Maven?",
    "section": "Annotations",
    "text": "Annotations\n\n@Data: Lombok dependency annotation that bundles the features of @ToString, @EqualsAndHashCode, @Getter / @Setter and @RequiredArgsConstructor together"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-a-class.html",
    "href": "java-exercises/Concepts/what-is-a-class.html",
    "title": "What is a class?",
    "section": "",
    "text": "A class is a set of parameters and methods that define the abstraction of an object. A class has the following elements:\n\nFields: these are the parameters\nConstructor: method that creates a new class object. A constructor can accept input parameters to initialize\nMethods: functions that can use the fields values to compute required outputs or update its own fields\n\n\n\n\nAn object is an instance of a class\nEach object is independent of any other object of the same class\n\n\n\n\nThere are several ways to create an object:\n\nUsing the new operator: the most common way to create an object in Java.\nUsing the clone() method: if you want to create a copy of an existing object.\n\nTo use it, implement the Cloneable interface in your class and override the clone() method\n\nUsing factory methods: it is a static method that returns an instance of a class\n\nFactory methods are often used to create objects when you need more flexibility or control over the object creation process\n\nUsing reflection: feature of the Java language that allows you to inspect and manipulate the structure of a class at runtime.\n\nTo use it, invoke the newInstance() method on the Constructor object for a particular class\n\nUsing deserialization: create an object from its serialized form, which is a stream of bytes that represents the object’s state\n\nThis method allows to persist the state of the execution and retrieve it when requested\nTo use it, the class must implement the Serializable interface and use ObjectInputStream and ObjectOutputStream classes to serialize and deserialize the object"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-spring-boot.html",
    "href": "java-exercises/Concepts/what-is-spring-boot.html",
    "title": "What is SpringBoot?",
    "section": "",
    "text": "From spring.io:\n\nSpring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.\n\n\n\n\nCreate stand-alone Spring applications\nEmbed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)\nProvide opinionated ‘starter’ dependencies to simplify your build configuration\nAutomatically configure Spring and 3rd party libraries whenever possible\nProvide production-ready features such as metrics, health checks, and externalized configuration\nAbsolutely no code generation and no requirements for XML configuration\n\nIBM has an article about why Spring Framework is so popular and how Spring Boot eases the creation of Spring projects: From ibm.com:\n\nSpring Framework offers a dependency injection feature that lets objects define their own dependencies that the Spring container later injects into them. This enables developers to create modular applications consisting of loosely coupled components that are ideal for microservices and distributed network applications.\n\n\nAs capable as comprehensive as Spring Framework is, it still requires significant time and knowledge to configure, set up, and deploy Spring applications. Spring Boot mitigates this effort with three important capabilities.\n\n\n\n\n\n\nAutoconfiguration means that applications are initialized with pre-set dependencies that you don’t have to configure manually.\n\nAs Java Spring Boot comes with built-in autoconfiguration capabilities, it automatically configures both the underlying Spring Framework and third-party packages based on your settings (and based on best practices, which helps avoid errors)\nEven though you can override these defaults once the initialization is complete, Java Spring Boot’s autoconfiguration feature enables you to start developing your Spring-based applications fast and reduces the possibility of human errors.\n\n\n\n\nSpring Boot uses an opinionated approach to adding and configuring starter dependencies, based on the needs of your project.\n\nFollowing its own judgement, Spring Boot chooses which packages to install and which default values to use, rather than requiring you to make all those decisions yourself and set up everything manually.\nYou can define the needs of your projects during the initialization process, during which you choose among multiple starter dependencies –called _Spring Starters– that cover typical use cases. You run Spring Boot Initializr by filling out a simple web form, without any codingYou can define the needs of\n\n\n\n\nSpring Boot helps developers create applications that just run.\n\nIt lets you create standalone applications that run on their own, without relying on an external web server, by embedding a web server such as Tomcat or Netty into your app during the initialization process\nAs a result, you can launch your application on any platform by simply hitting th Run command"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-ddd.html",
    "href": "java-exercises/Concepts/what-is-ddd.html",
    "title": "What is DDD?",
    "section": "",
    "text": "From Airbrake:\n\n\n\n\n\n\nTL:DR\n\n\n\nDomain-driven Design (DDD) is a software development approach that uses and builds upon Object-Oriented Analysis and Design (OOAD) principles and ideas.\n\n\n\n\nThe standard dictionary dictionary definition of domain is: “A sphere of knowledge or activity”. In software engineering, the domain commonly refers to the subject area on which the application is intended to apply.\nIn other words, during appliaction development, the domain is the sphere of knowledge and activity around which the application logic resolves.\nThe domain layer or domain logic is better known as the business logic. The business logic of an application refers to the higher-level rules for how buisness objects interact with one another to create and modify modeled data.\n\n\n\nDDD aims to ease the creation of complex applications by connecting the related pieces of software into an ever-evolving model.\nDDD focueses on three core principles:\n\nFocus on the core domain and domain logic\nBase complex designs on models of the domain\nCollaboration with domain experts to improve the application model and resolve any emerging domain-related issues"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-ddd.html#building-blocks",
    "href": "java-exercises/Concepts/what-is-ddd.html#building-blocks",
    "title": "What is DDD?",
    "section": "Building Blocks",
    "text": "Building Blocks\nDomain-driven design also defines several high-level concepts that can be used in conjunction with one another to create and modify domain models:\n\nEntity: An object identified by its consistent thread of continuity, as opposed to traditional objects, which are defined by their attributes\n\nCustom interpretation:\n\nValue Object: An immutable (unchangeable) object that has attributes but no distinct identity\n\nCustom interpretation:\n\nDomain event: An object that records a discrete event related to model activity within the system. While all events within the system could be tracked, a domain event is only created for event types that the domain experts care about.\n\nCustom interpretation:\n\nAggregate: A cluster of entities and value objects with defined boundaries around the group. Rather than allowing every single entity or value object to perform all actions on its own, the collective aggregate of items is assigned a singular aggregate root item. Now, external objects no longer have direct access to every individual entity or value object within the aggragate but instead only have access to the single aggregate root item and use that to pass along instructions to the group as a whole.\n\nCustom interpretation:\n\nService: Essentially, a service is an operation or form of business logic that doesn’t naturally fit within the realm of objects. In other words, if some functionality must exist, but it cannot be related to an entity or value object, it’s probably a service.\n\nCustom interpretation:\n\nRepositories: Not to be confused with common version control repositories, the DDD meaning of a repository is a service that uses a global interface to provide access to all entities and value objects within a particular aggregate collection. Methods should be defined to allow for the creation, modification, and deletion of objects within the aggregate. However, by using this repository service to make data queries, the goal is to remove such data query capabilities from within the business logic of object models.\n\nCustom interpretation:\n\nFactories: DDD suggests using a factory, which encapsulates the logic of creating complex objects and aggregates, ensuring that the client does not know the inner-workings of object manipulation.\n\nDDD heavily emphasizes the ever-more-popular practice of continuous integration (CI), which asks the entire development team to use one shared code repository and push commits to it daily (if not multiple times a day).\nAn automatic process executes at the end of the work day, which checks the integrity of the entire code base, running automated unit tests, regression tests, and the like to quickly detect any potential problems that may have been introduced in the latest commits."
  },
  {
    "objectID": "java-exercises/Concepts/what-is-ddd.html#advantages-of-domain-driven-design",
    "href": "java-exercises/Concepts/what-is-ddd.html#advantages-of-domain-driven-design",
    "title": "What is DDD?",
    "section": "Advantages of Domain-Driven Design",
    "text": "Advantages of Domain-Driven Design\n\nEases Communication: With an early emphasis on establishing a common and ubiuitous language related to the domain model of the project, teams will often find communitacion throughout the entire development life cycle to be much easier. Typically, DDD will require less technical jargon when discussing aspects of the application since the ubiquitous language established early on will likely define simpler terms to refer to those more technical aspects.\nImproves Flexibility: Since DDD is so heavily based on the concepts of object-oriented analysis and design, nearly everything within the domain model will be based on an object and will, therefore, be modular and encapsulated. This allows for various components, or even the entire system, to be altered and improved on a regular, continuous basis.\nEmphasizes Domain Over Interface: Since DDD is the practice of building around the concepts of domain and what the domain experts within the project advise, DDD will often produce applications that are accurately suited for and representative of the domain at hand, as opposed to those applications which emphasize the UI/UX first and foremost. While balance is required, focusing on the domain means that a DDD approach can produce a product that resonates well with the audience associated with that domain."
  },
  {
    "objectID": "java-exercises/Concepts/what-is-ddd.html#disadvantages-of-domain-driven-design",
    "href": "java-exercises/Concepts/what-is-ddd.html#disadvantages-of-domain-driven-design",
    "title": "What is DDD?",
    "section": "Disadvantages of Domain-Driven Design",
    "text": "Disadvantages of Domain-Driven Design\n\nRequires Robust Domain Expertise: Even with the most technically proficient minds working on development, it’s all for naught if there isn’t at least one domain expert on the team that knows the exact ins and outs of the subject area. In some cases, domain-driven design may require integrating one or more outside team members who can act as domain experts throughout the development life cycle.\nEncourages Iterative Practices: While many consider this an advantage, it cannot be denied that DDD practices strongly rely on constant iteration and continuous integration to build a malleable project that can adjust itself when necessary. Some organizations may have trouble with these practices, particularly if their past experience is primarily tied to less-flexible development models, such as the waterfall model.\nIll-Suited for Highly Technical Projects: DDD is not very well-suited for applications with marginal domain complexity but has a great deal of technical complexity. Since DDD so heavily emphasizes the need for (and importance of) domain experts to generate the proper ubiquitous language and then domain model on which the project is based, a project that is incredibly technically complex may be challenging for domain experts to grasp, causing problems down the line, perhaps when all members of the team did not fully understand technical requirements or limitations."
  },
  {
    "objectID": "java-exercises/Concepts/what-is-tdd.html",
    "href": "java-exercises/Concepts/what-is-tdd.html",
    "title": "What is TDD?",
    "section": "",
    "text": "Introduction\nTest-driven Domain (TDD) is a software development process in which tests are written for a piece of code before the code itself is written.\n\nThis approach is designed to ensure that the code meets the requirements and works as intended\nTDD involves the following steps:\n\nWriting a test for a feature\nRunning the test to see if it fails\nWriting the code to implement the feature\nRunning the test again to ensure that it passes\n\nTDD is often used in agile software development as it allows for the rapid development of high-quality code.\n\n\n\nWhat should and shouldn’t be tested?"
  },
  {
    "objectID": "java-exercises/Concepts/object-creation.html",
    "href": "java-exercises/Concepts/object-creation.html",
    "title": "Object creation",
    "section": "",
    "text": "Where do we create them?\n\nProject structure\nData types\nNested classes\n\nHow do we create them?\n\nnew\nFactory classes\n\nHow do we manage them?\n\nMethods creation\nManager classes\n\nHow do we send data?\n\nSend Object references to other classes\n\n\n\n\n\n\nflowchart LR\n    A[Object Creation] --> B{Where do we\\ncreate them?}\n    B --> C[Project structure]\n    A --> D{How do we\\ncreate them?}\n    D --> E['new']\n    D --> F['Factory' classes]\n    A --> G{How do we\\nmanage them?}\n    G --> H[Methods creation]\n    G --> H2[Manager classes]\n    A --> I{How do we\\nsend data?}\n    I --> J[Send Object references\\n to other classes]\n\n\n\n\n\nObject creation scope\n\n\n\n\n\n\n\n\n\nBe aware of the scope of each Object!\n\n\n\nEncapsulation is critical, keep variables within its required scope. Don’t try to make them available to everyone if not critical."
  },
  {
    "objectID": "java-exercises/Concepts/what-is-the-static-modifier.html",
    "href": "java-exercises/Concepts/what-is-the-static-modifier.html",
    "title": "What is the static modifier?",
    "section": "",
    "text": "The static modifier defines the access scope of any element of the object-oriented domain (?)"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-a-model.html",
    "href": "java-exercises/Concepts/what-is-a-model.html",
    "title": "What is a model?",
    "section": "",
    "text": "A model is…"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-a-model.html#mvc",
    "href": "java-exercises/Concepts/what-is-a-model.html#mvc",
    "title": "What is a model?",
    "section": "MVC",
    "text": "MVC\nFrom Mozilla.org:\n\nMVC (Model-View-Controller) is a pattern in software design commonly used to implement user interfaces, data, and controlling logic. It emphasizes a separation between the software’s business logic and display. This “separation of concerns” provides for a better division of labor and improved maintenance. Some other design patterns are based on MVC, such as MVVM (Model-View-Viewmodel), MVP (Model-View-Presenter), and MVW (Model-View-Whatever).\n\n\nModel parts\nAn MVC software-design pattern is composed by three parts:\n\nModel: manages data and business logic\nThe model defines what data the app should contain. If the state of thsi data changes, then the model will usually notify the view (so the display can change as needed) and sometimes the controller (if different logic is needed to control the updated view).\n\n\nView: handles layout and display\nThe view defines how the app’s data should be displayed.\n\n\nController: routes commands to the model and view parts\nThe controller contains logic that updates the model and/or view in response to input from the users of the app.\n\n\n\n\n\n\nYou might however also want to just update the view to display the data in a different format, e.g., change the item order to alphabetical, or lowest to highest price. In this case the controller could handle this directly without needing to update the model.\n\n\n\n\n\n\nModel View controller example\nFrom Mozilla.org:\nLet’s define a simple shopping list app. What do we want to show? For each item in our shopping list, we want:\n\nThe name of the item\nThe quantity of the item to buy\nThe price of the item\n\nThe following diagram describes required functionalities and how they are implemented using MVC:\n\n\n\n\n\nMVC - Shopping app example\n\n\n\nThe model\nThe model would specify what data the list items should contain – item, price, etc. – and what list items are already present.\nThe following UML diagram is an example of the required data structure\n\n\n\n\nclassDiagram\n    %% Define an Item class that contains the info of each item\n    class Item {\n        -String name\n        -double price\n\n        +getName() String\n        +setName() void\n        +getPrice() double\n        +setPrice() void\n        +equals() boolean\n        +toString() String\n    }\n\n    %% Define a ShoppingList class to keep track of the items to buy\n    class ShoppingList {\n        +printList() void\n        +getItemAmount(Item newItem) int\n        +getItemPrice(Item newItem) double\n        +getTotalPrice() double\n        +addItem(Item newItem, int initialAmount) void\n        +increaseAmountOfItem(Item item, int amount) void\n    }\n\n    %% Classes relationships\n    Item \"*\" o-- \"1\" ShoppingList : contains\n\n\n\n\n\n\n\n\n\n\n\nThe View\nIn our shopping list app, the view would define how the list is presented to the user, and receive the data to display from the model.\nThe following UML diagram is an example of the expected user interface:\n\n\n\n\nclassDiagram\n    class UserInterface {\n    }\n\n    %% Define a ShoppingView class that has the View design, its layout, its UI elements, etc...\n    class ShoppingView {\n        +getView() Scene\n    }\n\n    %% Classes relationships\n    ShoppingView \"1\" o-- \"1\" UserInterface : uses\n\n\n\n\n\n\n\n\n\n\nThe Controller\nOur shopping list could have input forms and buttons that allow us to add or delete items. These actions require the model to be updated, so the input is sent to the controller, which then manipulates the model as appropriate, which then sends updated data to the view.\nThe following UML diagram is an example of the expected controller\n\n\n\n\n\n\nTODO\n\n\n\nAdd the UML diagram of the shopping list controller\n\n\n\n\n\nMVC on the web\n\nThe Model\nThe data model is probably contained in some kind of database\n\n\nThe View\nThe User Interface is probably written using HTML/CSS/whatever else you like, but Java can also do frontend.\n\n\nThe Controller\nThe app’s controlling code is probably written in HTML/JavaScript, but Java can also implement it in the frontend."
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html",
    "href": "java-exercises/Design-patterns/uml.html",
    "title": "UML",
    "section": "",
    "text": "Class notes’ definition\n\n\n\nUML stands for Unified Modeling Language. It is a standardized visual language for specifying, constructing, visualizing, and documenting the artifacts of software systems, as well as for business modeling and other non-software systems.\nUML is used by software developers, business analysts, and system engineers to model the design of a system and communicate that design to others.\n\n\nWhy is it useful?\n\nIt allows all team members to be on the same page by providing a common language; thus, people from different disciplines can understand and discuss system design in a concise and precise way (13)\nIt allows to identify issues either in the design or in the team dynamics (13)\nIt allows to solve any found issue even before coding the system (13)\nIt helps understanding the problem to solve, the client requirements, the market needs, the core, etc… (21)\nIt serves as a project documentation (13)"
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html#inheritance",
    "href": "java-exercises/Design-patterns/uml.html#inheritance",
    "title": "UML",
    "section": "Inheritance",
    "text": "Inheritance\n\n\n\n\n\nclassDiagram\n    class SuperClass {\n    }\n    class SubClass {\n    }\n    SuperClass <|-- SubClass : Inheritance\n\n\n\n\n\n\n\n\nInheritance is a relationship between classes, where one class is a subclass of another class and inherits the properties and behavioral of the superclass. This is represented in UML by a solid line with a closed, filled arrowhead pointing from the subclass to the superclass:"
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html#composition",
    "href": "java-exercises/Design-patterns/uml.html#composition",
    "title": "UML",
    "section": "Composition",
    "text": "Composition\n\n\n\n\n\nclassDiagram\n    class Client {\n    }\n    class BankAccount {\n    }\n\n    Client o-- BankAccount : Composition\n\n\n\n\n\n\n\n\nComposition is a strong type of association that represents a whole-part relationship between two classes, where the parts cannot exist independently of the whole. This is represented in UML by a solid line with a closed diamond shape pointing from the whole to the part."
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html#aggregation",
    "href": "java-exercises/Design-patterns/uml.html#aggregation",
    "title": "UML",
    "section": "Aggregation",
    "text": "Aggregation\n\n\n\n\n\nclassDiagram\n    class Person {\n    }\n    class Hand {\n    }\n\n    Person *-- Hand : Aggregation\n\n\n\n\n\n\n\n\nAggregation is a weaker type of association that represents a whole-part relationship between two classes, where the parts can exist independently of the whole. Thisis represented in UML by a solid line with an open diamond shape pointing from the whole to the part."
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html#association",
    "href": "java-exercises/Design-patterns/uml.html#association",
    "title": "UML",
    "section": "Association",
    "text": "Association\n\n\n\n\n\nclassDiagram\n    class Customer {\n    }\n    class Ticket {\n    }\n\n    Customer --> Ticket : Association\n\n\n\n\n\n\n\n\nAssociation is a relationship between two classes that represents a connection or relationship between them (as in generic relationship). This is represented in UML by a solid line with an open arrowhead pointing from one class to the other."
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html#dependency",
    "href": "java-exercises/Design-patterns/uml.html#dependency",
    "title": "UML",
    "section": "Dependency",
    "text": "Dependency\n\n\n\n\n\nclassDiagram\n    class MovieManager {\n    }\n    class Movie {\n    }\n\n    MovieManager ..> Movie : Dependency\n\n\n\n\n\n\n\nDependency is a relationship between two classes that indicates that one class depends on the other for its functionality. This is represented in UML by a dashed line with an open arrowhead pointing from the dependenet class to the class it depends on."
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html#use-realization",
    "href": "java-exercises/Design-patterns/uml.html#use-realization",
    "title": "UML",
    "section": "Use / Realization",
    "text": "Use / Realization\n\n\n\n\n\nclassDiagram\n    class ShoppingList {\n    }\n    class Item {\n    }\n    \n    ShoppingList ..|> Item : Use / Realization\n\n\n\n\n\n\n\nUse is a relationship between two classes that indicates that one class uses the other in some way. This is represented in UML by a dashed line with an open, unfilled arrowhead pointing from the using class to the class being used."
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html#one-to-one-11",
    "href": "java-exercises/Design-patterns/uml.html#one-to-one-11",
    "title": "UML",
    "section": "One-to-One (1:1)",
    "text": "One-to-One (1:1)"
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html#one-to-many-1n",
    "href": "java-exercises/Design-patterns/uml.html#one-to-many-1n",
    "title": "UML",
    "section": "One-to-Many (1:n)",
    "text": "One-to-Many (1:n)"
  },
  {
    "objectID": "java-exercises/Design-patterns/uml.html#many-to-many-nm",
    "href": "java-exercises/Design-patterns/uml.html#many-to-many-nm",
    "title": "UML",
    "section": "Many-to-Many (n:m)",
    "text": "Many-to-Many (n:m)\nMany-to-many requires a middle-man table (assignment table) for both entities to share that info\n\n\n\n\nclassDiagram\n    direction TB\n    class User {\n        -int userId\n        -String name\n    }\n\n    class Book {\n        -int bookId\n        -String title\n        -Enumerator bookStatus\n    }\n\n    class Borrows {\n        -User user\n        -Book book\n        -Date initialBorrow\n        -Date endBorrow\n    }\n\n    class bookStatus {\n        <<enumerator>>\n        - Available\n        - Lost\n        - Borrowed\n    }\n\n    User ..> bookStatus\n    User \"1\" --o \"*\" Borrows : Who borrows\n    Book \"1\" --o \"*\" Borrows : What is borrowed"
  },
  {
    "objectID": "walkthrough/walkthrough.html",
    "href": "walkthrough/walkthrough.html",
    "title": "Hello, Quarto",
    "section": "",
    "text": "Markdown is an easy to read and write text format:\n\nIt’s plain text so works well with version control\nIt can be rendered into HTML, PDF, and more\nLearn more at: https://quarto.org/docs/authoring/"
  },
  {
    "objectID": "walkthrough/walkthrough.html#code-cell",
    "href": "walkthrough/walkthrough.html#code-cell",
    "title": "Hello, Quarto",
    "section": "Code Cell",
    "text": "Code Cell\nHere is a Python code cell.\nInstall the VS Code Python Extension to enable running this cell interactively.\n\nimport os\nos.cpu_count()\n\n8"
  },
  {
    "objectID": "walkthrough/walkthrough.html#equation",
    "href": "walkthrough/walkthrough.html#equation",
    "title": "Hello, Quarto",
    "section": "Equation",
    "text": "Equation\nUse LaTeX to write equations:\n\\[\n\\chi' = \\sum_{i=1}^n k_i s_i^2\n\\]"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This site is a compilation of all the knowledge achieved during CIFO courses, such as DevOps or Web Applications with Java."
  },
  {
    "objectID": "team-projects/00-game-tracker.html",
    "href": "team-projects/00-game-tracker.html",
    "title": "First project - GameTracker",
    "section": "",
    "text": "For the Java Web Applications course team projects, at least 3 proposals of feasible projects shall be defined and presented each time. Each member of the team shall present them to the rest and the project to work on shall be chosen by all team members."
  },
  {
    "objectID": "team-projects/00-game-tracker.html#lakes-status-david-marchan",
    "href": "team-projects/00-game-tracker.html#lakes-status-david-marchan",
    "title": "First project - GameTracker",
    "section": "Lakes status (David Marchan)",
    "text": "Lakes status (David Marchan)\n\nWhat is it expected to do? Provides status info of lakes where to go fishing\nWhat is it for? Its main purpose is to help the user decide which lake would be more appropriate to go fishing\nWho is it for? Fishermen, fans of fishing and nature\nWhy would it be interesting to do? TODO\nHow would it be done?\n\nData acquisition…\nData engineering…\nData persistency…\nData representation…"
  },
  {
    "objectID": "team-projects/00-game-tracker.html#data-analysis-platform-marc",
    "href": "team-projects/00-game-tracker.html#data-analysis-platform-marc",
    "title": "First project - GameTracker",
    "section": "Data analysis platform (Marc)",
    "text": "Data analysis platform (Marc)\n\nWhat is it expected to do? Retrieve data from a data source and provide useful insights related to it\nWhat is it for? This allows to reach conclusions and take decisions based on actual facts and not speculations\nWho is it for? Any decision-making person regardless of their sector, be it market, entertainment, education, etc…\nWhy would it be interesting to do? Because it would be an entry point to such a powerful sector as the Data Analysis, that uses Machine Learning to create models for categorization, prediction, foresight, etc…\nHow would it be done?\n\nData acquisition would be done via API requests to public assets or using web scappers\nData engineering would be done with ETL (Extract, Transform and Load) processes\nData persistency would be achieved with relational databases (i.e. SQL, MariaDB…) for event-driven records (i.e. time-based information and historical data), or non-relational databases (noSQL, MongoDB, DynamoDB…) for any other type of document-based data (i.e. Information of movies, shows, sports teams, etc…)\nData representation would be done with a web application capable of graphically represent data sets. The user shall be able to modify the scope of the represented data and properly drill-down to obtain insight information"
  },
  {
    "objectID": "team-projects/00-game-tracker.html#game-tracker-victor",
    "href": "team-projects/00-game-tracker.html#game-tracker-victor",
    "title": "First project - GameTracker",
    "section": "Game Tracker (Victor)",
    "text": "Game Tracker (Victor)\n\nWhat is it expected to do? Provides info related to board games and other users that play them or have common interests\nWhat is it for? Its main purpose is to track the user experience as a board game player and offer match-making functionalities\nWho is it for? Board Games players, families, people that want to buy a game as a gift, etc…\nWhy would it be interesting to do? Statistics are always fun and data mining and analysis has proven to be very valuable in our society. Also, there’s a social component in sharing one’s games, experience and reviews, as well as the match-making aspect, where people can gather together to share their interests\nHow would it be done?\n\nData acquisition…\nData engineering…\nData persistency…\nData representation…"
  },
  {
    "objectID": "team-projects/00-game-tracker.html#ngo-tinder-david-maqueda",
    "href": "team-projects/00-game-tracker.html#ngo-tinder-david-maqueda",
    "title": "First project - GameTracker",
    "section": "NGO Tinder (David Maqueda)",
    "text": "NGO Tinder (David Maqueda)\n\nWhat is it expected to do? Provides info related to Non-governmental Organizations (NGO) and volunteers with common interests\nWhat is it for? Its main purpose is to act as a bridge between the organizations and the people who want to volunteer with them\nWho is it for? Volunteers that want to find NGO activities and demonstrations based on their interests\nWhy would it be interesting to do? Social movements are very diverse and it’s difficult to know which activities have the most affinity with each person. This app would help people to know the goals of each NGO and contribute to their causes with a better understanding.\nHow would it be done?\n\nData acquisition…\nData engineering…\nData persistency…\nData representation…"
  }
]