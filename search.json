[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "devops-guides/mint-vm-provisioning.html",
    "href": "devops-guides/mint-vm-provisioning.html",
    "title": "Virtual Machine Provisioning",
    "section": "",
    "text": "In this page we’re going to define the steps to create and install all the required software for the CIFO Web Application course. At the end of the process we’ll have created a fully functional environment for software development, documentation and deployment, and we’ll also have some scripts that automate the installation of the required software and dependencies in case they have to be installed again"
  },
  {
    "objectID": "devops-guides/mint-vm-provisioning.html#linux-mint-installation",
    "href": "devops-guides/mint-vm-provisioning.html#linux-mint-installation",
    "title": "Virtual Machine Provisioning",
    "section": "Linux Mint installation",
    "text": "Linux Mint installation\n\nWhen initializing the VM, GRUB will greet us with some options. Select Start Linux Mint <version> <desktop-flavour> 64-bit to launch the Live Mint version that lets you test the OS prior to installing it as well as install it onto the virtual disk \nOnce inside the Linux Mint desktop, double-click the Install Linux Mint icon and follow the step-by-step installation process: \n\n\nInstallation steps\n\nLanguage selection: It’s the system language and will be used to also configure any installed software default language\nKeyboard Layout: Select the same one as your host machine, else the keyboard inputs won’t match the inputs shown in the VM (Select Spanish - Spanish)\nMultimedia coders: Skip, unrequired for this course and can always be installed later on\nInstallation type: As we’re installing the OS for the first time, just leave the default Erase disk and install Linux Mint option selected\nInstall now: Accept all changes regarding disk writing\nWhere are you?: This option sets both the timezone of the VM as well as the nearest package repositories to your location that will be used\nWho are you?: Here you define your name (used in other programs as the author of mails, files, projects, etc…), the host name (VM internal name), the username and its password (the process creates a user account based on this information)\n\n\nAfter that, the installation process continues by installing all the required files and stock programs for that distribution and desktop manager\n\n\n\n\n\n\n\nTip\n\n\n\nAt this point there’s no need for any additional input from the user, so you can go grab a coffee or something else as this will take a while to complete\n\n\n\nOnce done, just restart the machine as asked"
  },
  {
    "objectID": "devops-guides/mint-vm-provisioning.html#virtualbox-additional-configurations",
    "href": "devops-guides/mint-vm-provisioning.html#virtualbox-additional-configurations",
    "title": "Virtual Machine Provisioning",
    "section": "VirtualBox additional configurations",
    "text": "VirtualBox additional configurations\nNow VirtualBox is rendering the VM to the native resolution defined within our Linux Mint OS (guest machine). In order to dinamically change the resolution based on the window size, we must install the VirtualBox Guest Additions inside it\n\nWhat does Guest Additions enable?\n\nEnable users to seamlessly move mouse pointer between host and guest OS.\nAllow guest OS to have read and write access to hard drives on the host OS, so you can transfer files between them.\nPower up the graphics/video ability of the guest OS. The screen resolution of guest OS can be automatically adjusted and 3D graphics can be accelerated.\nEnable bidirectional shared clipboard between host and guest OS, so you can copy and paste stuff between them.\n\n\n\nInstallation steps\n\nOn the Devices drop-down menu, select Insert Guest Additions CD image \nVirtual Box prompts if we want to download the ISO file. Accept all warnings regarding this:\n\n\n\n\n\n\n\n\n(a) Virtual Box - Download Guest Additions\n\n\n\n\n\n\n\n\n\n(b) Virtual Box - Accept Download Guest Additions\n\n\n\n\n\n\n\n\n\n(c) Virtual Box - Mount Guest Additions\n\n\n\n\nFigure 1: Guest Additions warnings\n\n\n\nOnce the ISO is mounted inside the guest OS, it should try to execute the VBoxLinuxAdditions.run file in the ISO root; if not, open a terminal and execute\n\nsudo /media/cifo-web/VBox_GAs_<version>/VBoxLinuxAdditions.run\n\n\n\n\n\n\nWarning\n\n\n\nIf the autoexec function didn’t launch, this doesn’t mean there’s something wrong with your guest OS; it might mean that it has this feature disabled by default. Check your Desktop manager options.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe mount path of the Guest Additions ISO may be different depending on the username and the ISO version, so you might have to change it.\n\n\nThe output should be like this:\ncifo-web@cifoweb-VirtualBox:/media/cifo-web/VBox_GAs_6.1.40$ sudo ./VBoxLinuxAdditions.run\nVerifying archive integrity... All good.\nUncompressing VirtualBox 6.1.40 Guest Additions for Linux........\nVirtualBox Guest Additions installer\nCopying additional installer modules ...\nInstalling additional modules ...\nVirtualBox Guest Additions: Starting.\nVirtualBox Guest Additions: Setting up modules\nVirtualBox Guest Additions: Building the VirtualBox Guest Additions kernel \nmodules.  This may take a while.\nVirtualBox Guest Additions: To build modules for other installed kernels, run\nVirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup <version>\nVirtualBox Guest Additions: or\nVirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup all\nVirtualBox Guest Additions: Building the modules for kernel 5.15.0-41-generic.\nupdate-initramfs: Generating /boot/initrd.img-5.15.0-41-generic\nVirtualBox Guest Additions: Running kernel modules will not be replaced until \nthe system is restarted\n\nRestart your guest OS\n\n\n\n\n\n\n\nNote\n\n\n\nSee this video if you have any more doubts regarding Guest Additions in Linux Mint:\n\n\n\n\n\nGuest Additions configurations\n\nEnable fluid window\nFluid mode is automatically enabled after the guest OS restart. If not, you can always enable it with the shortcut Right Ctrl + L.\n\n\nEnable bidirectional clipboard\nMake sure the clipboard is set to bidirectional; after that, copy-paste commands should work between Host and Guest machines."
  },
  {
    "objectID": "devops-guides/software-installation.html",
    "href": "devops-guides/software-installation.html",
    "title": "Software installation",
    "section": "",
    "text": "This page explains the automation procedure for the software installation required for the CIFO courses"
  },
  {
    "objectID": "devops-guides/software-installation.html#ides",
    "href": "devops-guides/software-installation.html#ides",
    "title": "Software installation",
    "section": "IDEs",
    "text": "IDEs\n\nVisual Studio Code\nUsed mainly for any type of development or documentation maintenance; its plugins allow to easily manage Git and GitHub repositories, create Quarto/Markdown files and publish them as static websites, and many more things.\n\nInstallation page: Running Visual Code on Linux\n\n\n\nIntelliJ IDEA\nIts main purpose is to ease Java applications development. It also has a nice Git and GitHub repository manager, so it’s easy to keep track of the updates and latest changes on our code.\n\nInstallation page: JetBrains Toolbox App\n\nIt’s recommended to install any JetBrains application through their Toolbox, as it also manages any available update of them\n\n\n\n\nVim\nOne of the most popular terminal IDEs for Linux, useful when no Desktop application is available or quick changes on files have to be done from a terminal.\n\nInstallation command:\n\nsudo apt-get install vim\n\n\nSublime Text\nA good text editor which features can be expanded by installing additional extensions/packages. With the correct configuration it can also compile and test projects from within the application.\n\nInstallation page: Linux Package Manager Repositories"
  },
  {
    "objectID": "devops-guides/software-installation.html#version-control-software",
    "href": "devops-guides/software-installation.html#version-control-software",
    "title": "Software installation",
    "section": "Version Control Software",
    "text": "Version Control Software\n\nGit\nThis is the main tool to manage git repositories, any other software uses it on background or includes it within the app. Available by default in the default Linux Package Repositories.\n\nInstallation command:\n\nsudo apt-get install git\n\n\nGitHub\nThe CLI tool to interact with GitHub repositories, very useful to manage your own repositories, branches, etc… It can also create and solve Pull Requests from the CLI.\n\nInstallation page: Installing gh on Linux and BSD\n\n\n\nGitHub Desktop\nThe Desktop app to interact with GitHub repositories, more user-friendly than the CLI version. There’s no official linux release, but GitHub themselves redirect users to a trusted fork (Community Releases).\n\nInstallation page: GitHub Desktop - The Linux Fork"
  },
  {
    "objectID": "devops-guides/software-installation.html#documentation",
    "href": "devops-guides/software-installation.html#documentation",
    "title": "Software installation",
    "section": "Documentation",
    "text": "Documentation\n\nObsidian\nA Markdown editor with many more features. The installation packages for Linux are available in their GitHub releases repository.\n\nInstallation page: Obsidian releases\n\n\n\nQuarto CLI\nA Markdown framework that expands the language by adding compatibily with other documentation tools, such as Medusa for diagrams. The installation packages for Linux are available in their GitHub repository.\n\nInstallation page: Quarto releases"
  },
  {
    "objectID": "devops-guides/software-installation.html#software-installation-script",
    "href": "devops-guides/software-installation.html#software-installation-script",
    "title": "Software installation",
    "section": "Software installation script",
    "text": "Software installation script\nThe script software_install.sh is a shell script that automates all the installation process. As some steps require a more complex parsing logic, the script invokes extra scripts that act as tools. The script is split into the following steps:\n\nInstall pre-required programs (wget, curl, apt-transport-https, etc…)\nAdd both GPG keys and package repositories for the software that has them.\n\nThe sources lists are stored in /etc/apt/sources.list.d.\nThe GPG keys are stored in different paths depending on the app creator instructions\n\nInstall software from newly-added repositories\nInstall software that comes with its own installation scripts\n\nJetbrains Toolbox: tools/jetbrains-toolbox.sh\n\nRetrieve and install .deb packages of software maintained as GitHub repositories\n\nThis step uses the tools/retrieve_latest_release.py script\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n#!/bin/bash\n#   CIFO Web Applications - Software installation\n#   - This script install the required software for the course\n#   - Categories:\n#       - IDEs\n#       - Version Control Sofware\n#       - Documentation\n\n# Check that the user has enough privileges to install software\nif [[ $EUID -ne 0 ]]; then\n    echo \"This script must be run with administrator privileges. Please execute it with 'sudo' or as root user\"\n    exit 1\nfi\n\n# Define the installation command\n# -qq flag prior to the install command reduces the output messages except for errors\n# -y after the install command is for non-interactive/unattended installations\nINSTALL=\"apt-get -qq install -y\"\nUPDATE=\"apt-get -qq update\"\n\n# Pre-requisites:\n# - Install download and GPG binaries\n# - Apt installation via HTTPS paths must also be installed\n#sudo apt-get install -y wget gpg curl apt-transport-https\n$INSTALL wget gpg curl apt-transport-https\n\n# Additional repositories installation\n# ====================================\n# IDEs:\necho \"Configuring repositories for IDEs...\"\necho \"====================================\"\n# - Microsoft: Visual Studio Code\necho \"- Visual Studio Code\"\n# Retrieve the Microsoft GPG key and install it\nwget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg\ninstall -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg\n# Add the Microsoft Visual Studio Code repository to the apt sources list\nsh -c 'echo \"deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\" > /etc/apt/sources.list.d/vscode.list'\n# Delete the already installed GPG key\nrm -f packages.microsoft.gpg\necho \"\"\n# - Sublime Text\necho \"- Sublime Text\"\n# Retrieve and install GPG key\nwget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | gpg --dearmor > sublimehq-pub.gpg\ninstall -D -o root -g root -m 644 sublimehq-pub.gpg /usr/share/keyrings/sublimehq-pub.gpg\n# Add Sublime Text repository to apt sources list\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/sublimehq-pub.gpg] https://download.sublimetext.com/ apt/stable/\" | tee /etc/apt/sources.list.d/sublime-text.list > /dev/null\n# Delete the already installed GPG key\nrm -f sublimehq-pub.gpg\necho \"\"\n# VCS:\necho \"Configuring repositories for VCS:\"\necho \"=================================\"\n# - GitHub:\necho \"- GitHub\"\n# Install CURL to retrieve GitHub GPG key\n#type -p curl >/dev/null || sudo apt install curl -y\n# Retrieve the GPG key and install it\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg\nchmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg\n# Add GitHub CLI repository to apt sources list\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null\necho \"\"\n# Browsers:\necho \"Configuring repositories for browsers:\"\necho \"======================================\"\n# - Google Chrome\necho \"- Google Chrome\"\n# Retrieve and install the public key\nwget -q -O - https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor > google-chrome-pub.gpg\ninstall -D -o root -g root -m 644 google-chrome-pub.gpg /usr/share/keyrings/google-chrome-pub.gpg\n# Add Google Chrome repository to apt sources list\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/google-chrome-pub.gpg] http://dl.google.com/linux/chrome/deb/ stable main\" | tee /etc/apt/sources.list.d/google-chrome.list > /dev/null\n# Delete the already installed GPG key\nrm -f google-chrome-pub.gpg\necho \"\"\n# Repositories update\necho \"Updating repositories packages lists...\"\necho \"=======================================\"\n$UPDATE\necho \"Done\"\necho \"\"\n# Software installation\necho \"Installing software from repositories:\"\necho \"======================================\"\n# - IDEs: Visual Studio Code, vim, Sublime Text\necho \"Installing IDEs...\"\n$INSTALL code vim sublime-text\necho \"\"\n# - VCS: Git, GitHub\necho \"Installing VCS...\"\n$INSTALL git gh\necho \"\"\n# - Browsers: Google Chrome (stable)\necho \"Installing browsers...\"\n$INSTALL google-chrome-stable\necho \"\"\n# - Documentation: TBD\necho \"Installing Documentation software... TBD\"\necho \"\"\n# - Desktop tools\necho \"Installing Desktop tools...\"\n$INSTALL flameshot\necho \"\"\n\n# External software\necho \"Installing software not in repositories:\"\necho \"========================================\"\n# Jetbrains Toolbox: once installed, use it to install IntelliJ IDEA\necho \"- Jetbrains Toolbox\"\nif [ $(command -v jetbrains-toolbox) ] && [ -f tools/jetbrains-toolbox.sh ]; then\n    # Install toolbox as ROOT and execute it as the current user\n    # This is required as jetbrains toolbox configures the installation paths based on the 'home' folder of the user that executes it\n    ./tools/jetbrains-toolbox.sh && su -c jetbrains-toolbox $SUDO_USER\n    echo \"Toolbox installed, now install IntelliJ IDEA from there\"\nelse\n    echo \"WARNING: Either jetbrains-toolbox.sh script not found or already installed. Skipping installation\"\nfi\necho \"\"\n\n# Install from latest releases of GitHub repositories\necho \"Install from GitHub repositories latest releases\"\necho \"================================================\"\nif [[ -f tools/retrieve_latest_release.py ]]; then\n    # VCS:\n    # - GitHub Desktop\n    echo \"- GitHub Desktop\"\n    ./tools/retrieve_latest_release.py --gh-user shiftkey --gh-repo desktop --pattern .deb\n    echo \"\"\n    # Documentation:\n    # - Obsidian\n    echo \"- Obsidian\"\n    ./tools/retrieve_latest_release.py --gh-user obsidianmd --gh-repo obsidian-releases --pattern .deb\n    echo \"\"\n    # - Quarto\n    echo \"- Quarto\"\n    ./tools/retrieve_latest_release.py --gh-user quarto-dev --gh-repo quarto-cli --pattern .deb\n    echo \"\"\n    echo \"Installing all downloaded packages...\"\n    $INSTALL ./*.deb\n    echo \"Deleting already installed packages...\"\n    rm -r *.deb\nelse\n    echo \"ERROR: retrieve_latest_release.py script not found!! Aborting installation\"\nfi\n\necho \"DONE!!\""
  },
  {
    "objectID": "devops-guides/software-installation.html#tools-scripts",
    "href": "devops-guides/software-installation.html#tools-scripts",
    "title": "Software installation",
    "section": "Tools scripts",
    "text": "Tools scripts\nTools scripts are scripts that help the main script with more complex tasks or simply have all the installation process for a single software:\n\nJetBrains Toolbox\n\n\n\n\n\n\nNote\n\n\n\n\n\n#!/bin/bash\n\n[ $(id -u) != \"0\" ] && exec sudo \"$0\" \"$@\"\necho -e \" \\e[94mInstalling Jetbrains Toolbox\\e[39m\"\necho \"\"\n\nfunction getLatestUrl() {\nUSER_AGENT=('User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36')\n\nURL=$(curl 'https://data.services.jetbrains.com/products/releases?code=TBA&latest=true&type=release' -H 'Origin: https://www.jetbrains.com' -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept-Language: en-US,en;q=0.8' -H \"${USER_AGENT[@]}\" -H 'Accept: application/json, text/javascript, */*; q=0.01' -H 'Referer: https://www.jetbrains.com/toolbox/download/' -H 'Connection: keep-alive' -H 'DNT: 1' --compressed | grep -Po '\"linux\":.*?[^\\\\]\",' | awk -F ':' '{print $3,\":\"$4}'| sed 's/[\", ]//g')\necho $URL\n}\ngetLatestUrl\n\nFILE=$(basename ${URL})\nDEST=$PWD/$FILE\n\necho \"\"\necho -e \"\\e[94mDownloading Toolbox files \\e[39m\"\necho \"\"\nwget -cO  ${DEST} ${URL} --read-timeout=5 --tries=0\necho \"\"\necho -e \"\\e[32mDownload complete!\\e[39m\"\necho \"\"\nDIR=\"/opt/jetbrains-toolbox\"\necho \"\"\necho  -e \"\\e[94mInstalling to $DIR\\e[39m\"\necho \"\"\nif mkdir ${DIR}; then\n    tar -xzf ${DEST} -C ${DIR} --strip-components=1\nfi\n\nchmod -R +rwx ${DIR}\n\nln -s ${DIR}/jetbrains-toolbox /usr/local/bin/jetbrains-toolbox\nchmod -R +rwx /usr/local/bin/jetbrains-toolbox\necho \"\"\nrm ${DEST}\necho  -e \"\\e[32mDone.\\e[39m\"\n\n\n\n\n\nRetrieve latest package released from GitHub repositories\n\n\n\n\n\n\nNote\n\n\n\n\n\n#!/usr/bin/python3\n# GitHub latest release package retrieval\nimport json\nimport requests\nfrom argparse import ArgumentParser\n\ndef parse_arguments():\n    parser = ArgumentParser(\n        prog=\"retrieve_latest_release\",\n        description=\"Retrieves latest release from a GitHub repository\",\n        epilog=\"GitHub user and repository name are mandatory, as well as the file pattern (.deb, .tar.gz, etc...)\"\n    )\n\n    parser.add_argument('--gh-user', dest='gh_user', type=str, help='The GitHub username', required=True)\n    parser.add_argument('--gh-repo', dest='gh_repo', help='The GitHub repository', required=True)\n    parser.add_argument('--pattern', dest='pattern', help='The pattern of the asst to download', default='.deb', required=False)\n\n    return parser.parse_args()\n\n\ndef main():\n    args = parse_arguments()\n    print(f\"Requesting latest release from {args.gh_user}/{args.gh_repo}, ({args.pattern} format)\")\n    gh_api_url=f\"https://api.github.com/repos/{args.gh_user}/{args.gh_repo}/releases/latest\"\n    r = requests.get(gh_api_url)\n    response_text = json.loads(r.content)\n    #print(json.dumps(response_text, indent=2))\n\n    # Search fot the first asset that matches the file pattern\n    if \"assets\" in response_text:\n        for asset in response_text[\"assets\"]:\n            if \"name\" in asset and asset[\"name\"].endswith(args.pattern):\n                print(f'Downloading {asset[\"browser_download_url\"]}...')\n                filename = asset[\"name\"]\n                download = requests.get(asset[\"browser_download_url\"])\n                print(f\"Saving content into {filename}\")\n                open(filename, \"wb\").write(download.content)\n                break\n\nif __name__ == '__main__':\n    # Execute the main program\n    main()\n\n\n\n\n\nInstall additional extensions for VSCode\nVisual Studio Code comes with a CLI that allows the user to install/uninstall extensions from the terminal. More info can be found in the official documentation.\n\n\n\n\n\n\nPending to create a list of useful extensions and a shell script to install them\n\n\n\n\n\nInstall additional extensions for IntelliJ IDEA\n\n\n\n\n\n\nPending to see if IntelliJ IDEA has any CLI to automate the process"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Index",
    "section": "",
    "text": "CIFO Web Applications course documentation"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-a-class.html",
    "href": "java-exercises/Concepts/what-is-a-class.html",
    "title": "What is a class?",
    "section": "",
    "text": "A class is a set of parameters and methods that define the abstraction of an object. A class has the following elements:\n\nFields: these are the parameters\nConstructor: method that creates a new class object. A constructor can accept input parameters to initialize\nMethods: functions that can use the fields values to compute required outputs or update its own fields\n\n\n\n\nAn object is an instance of a class\nEach object is independent of any other object of the same class"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-maven.html",
    "href": "java-exercises/Concepts/what-is-maven.html",
    "title": "What is Maven?",
    "section": "",
    "text": "Maven is a Java dependency manager"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-maven.html#description",
    "href": "java-exercises/Concepts/what-is-maven.html#description",
    "title": "What is Maven?",
    "section": "Description",
    "text": "Description"
  },
  {
    "objectID": "java-exercises/Concepts/what-is-maven.html#scope",
    "href": "java-exercises/Concepts/what-is-maven.html#scope",
    "title": "What is Maven?",
    "section": "Scope",
    "text": "Scope\nMaven documentation\nEach dependency can define its scope, used to limit the transitivity of a dependency and to determine when a dependency is included in a classpath.\nThere are 6 different scopes:\n\ncompile: default scope, if none is defined. The dependency is available in all classpaths of a project\nprovided: similar to compile, but JDK or a container is expected to provide the dependency at runtime\nruntime: the dependency is not required for compilation, but is for execution\ntest: the dependency is only available for test compilation and execution phases; not transitive\nsystem: similar to provided, except that a JAR that contains it is explicitly provided; the artifact is always available and is not looked up in a repository\nimport: only support on a dependency of type pom in the <dependencyManager> section. The dependency is to be replaced with the effective list of dependencies in the specified POM’s <dependencyManagement> section. Since they are replaced, dependencies with a scope of import do not actually participate in limiting the transitivity of a dependency"
  },
  {
    "objectID": "java-exercises/Labs/java-se01-1.html",
    "href": "java-exercises/Labs/java-se01-1.html",
    "title": "LAB#SE01-1",
    "section": "",
    "text": "ContextGoalTasksOptional\n\n\nBasic understanding of Java programming language is required, as well as some familiarity with Maven or Gradle for managing dependencies and building the project.\nKnowledge of algotighms and data structures to implement the required classes.\n\n\nCreate three classes in Java (Person, Account and Manager) that implement different algorightms or data structures.\nTest these classes using JUnit.\n\n\n\nCreate a new Maven or Gradle project and setting up the project structure\nModify the project’s pom.xml or build.gradle file to import necessary dependencies, including JUnit for testing\nImplement the three required classes in Java\nImplement two basic patter-designs: singleton and think about factory\nWrite JUnit tests to verify that classes work as expected\n\n\n\n\nAllow the user to input data via the console, rather than using hard-coded test data in JUnit tests\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\nclassDiagram\n    Person \"1\" --o \"1\" Account : has\n    Person \"*\" -- \"1\" AccountManager : manages\n\n    class Person{\n        -String name\n        -String address\n        -int age\n        -Account account\n        +getBalance()\n        +setBalance()\n        +getPin()\n        +setPin()\n    }\n    \n    class Account{\n        -String accountManager\n        -String pin\n        -double balance\n        +equals(Account compared) boolean\n    }\n\n    class AccountManager{\n        +withdrawal(Person person, double amount) boolean\n        +transfer(Person sender, Person receiver, double amount) boolean\n        +changePin(Person person, String oldPin, String newPin) boolean\n    }\n    <<Static>> AccountManager\n    %%note for AccountManager \"Can withdraw money from a person's account\\nCan tranfer money between two persons' account\\nCan change the Pin of a person's account\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPerson class\n\n\n\n\n\npackage org.example;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter @NoArgsConstructor\npublic class Person {\n    private String name;\n    private String address;\n    private int age;\n    private Account account;\n\n    public Person(String name, String address, int age, Account account) {\n        this.name = name;\n        this.address = address;\n        this.age = age;\n        this.account = account;\n    }\n\n    public double getBalance() {\n        return this.account.getBalance();\n    }\n\n    public void setBalance(double amount) {\n        this.account.setBalance(amount);\n    }\n\n    public String getPin() {\n        return this.account.getPin();\n    }\n\n    public void setPin(String newPin) {\n        this.account.setPin(newPin);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nAccount class\n\n\n\n\n\npackage org.example;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter @NoArgsConstructor\npublic class Account {\n    private String accountNumber;\n    private String pin;\n    private double balance;\n\n    public Account(String accountNumber, String pin, double balance) {\n        this.accountNumber = accountNumber;\n        this.pin = pin;\n        this.balance = balance;\n    }\n\n    public boolean equals(Object compared) {\n        if (this == compared) {\n            return true;\n        }\n        if (!(compared instanceof Account)) {\n            return false;\n        }\n\n        Account comparedAccount = (Account) compared;\n\n        if (this.accountNumber.equals(comparedAccount.accountNumber) &&\n                this.pin.equals(comparedAccount.pin) &&\n                this.balance == comparedAccount.balance) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\npackage org.example;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter @Setter @NoArgsConstructor\n/**\n * Public class with static methods to manage accounts between persons\n */\npublic class AccountManager {\n    public static boolean withdrawal(Person person, double amount) {\n        if (amount > 0 && amount <= person.getBalance()) {\n            person.setBalance(person.getBalance() - amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean transfer(Person sender, Person receiver, double amount) {\n        if (amount > 0 && amount <= sender.getBalance()) {\n            sender.setBalance(sender.getBalance() - amount);\n            receiver.setBalance(receiver.getBalance() + amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean changePin(Person person, String oldPin, String newPin) {\n        if (person.getPin().equals(oldPin)) {\n            person.setPin(newPin);\n            return true;\n        }\n        return false;\n    }\n}"
  },
  {
    "objectID": "walkthrough/walkthrough.html",
    "href": "walkthrough/walkthrough.html",
    "title": "Hello, Quarto",
    "section": "",
    "text": "Markdown is an easy to read and write text format:\n\nIt’s plain text so works well with version control\nIt can be rendered into HTML, PDF, and more\nLearn more at: https://quarto.org/docs/authoring/"
  },
  {
    "objectID": "walkthrough/walkthrough.html#code-cell",
    "href": "walkthrough/walkthrough.html#code-cell",
    "title": "Hello, Quarto",
    "section": "Code Cell",
    "text": "Code Cell\nHere is a Python code cell.\nInstall the VS Code Python Extension to enable running this cell interactively.\n\nimport os\nos.cpu_count()\n\n8"
  },
  {
    "objectID": "walkthrough/walkthrough.html#equation",
    "href": "walkthrough/walkthrough.html#equation",
    "title": "Hello, Quarto",
    "section": "Equation",
    "text": "Equation\nUse LaTeX to write equations:\n\\[\n\\chi' = \\sum_{i=1}^n k_i s_i^2\n\\]"
  }
]