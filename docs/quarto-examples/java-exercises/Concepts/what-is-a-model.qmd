---
title: "What is a model?"
---

# Introduction
A **model** is...

# Models description
## MVC
_From [Mozilla.org](https://developer.mozilla.org/en-US/docs/Glossary/MVC):_

> **MVC** (Model-View-Controller) is a pattern in software design commonly used to implement user interfaces, data, and controlling logic. It emphasizes a separation between the software's business logic and display. This "separation of concerns" provides for a better division of labor and improved maintenance. Some other design patterns are based on MVC, such as MVVM (Model-View-Viewmodel), MVP (Model-View-Presenter), and MVW (Model-View-Whatever).

### Model parts
An MVC software-design pattern is composed by three parts:

#### Model: manages data and business logic
The model defines what data the app should contain. If the state of thsi data changes, then the model will usually notify the view (so the display can change as needed) and sometimes the controller (if different logic is needed to control the updated view).

#### View: handles layout and display
The view defines how the app's data should be displayed.

#### Controller: routes commands to the model and view parts
The controller contains logic that updates the model and/or view in response to input from the users of the app.

:::{.callout-tip appearance="simple"}
You might however also want to just update the view to display the data in a different format, e.g., change the item order to alphabetical, or lowest to highest price. In this case the controller could handle this directly without needing to update the model.
:::

### Model View controller example
_From [Mozilla.org](https://developer.mozilla.org/en-US/docs/Glossary/MVC#model_view_controller_example):_

Let's define a simple shopping list app. What do we want to show? For each item in our shopping list, we want:

1. The name of the item
2. The quantity of the item to buy
3. The price of the item

The following diagram describes required functionalities and how they are implemented using MVC:

![MVC - Shopping app example](https://developer.mozilla.org/en-US/docs/Glossary/MVC/model-view-controller-light-blue.png "MVC - Shopping app example")

#### The model
The model would specify what data the list items should contain -- item, price, etc. -- and what list items are already present.

The following UML diagram is an example of the required data structure
```{mermaid}
classDiagram
    %% Define an Item class that contains the info of each item
    class Item {
        -String name
        -double price

        +getName()
        +setName()
        +getPrice()
        +setPrice()
        +equals()
        +toString()
    }

    %% Define a ShoppingList class to keep track of the items to buy
    class ShoppingList {
        -HashMap< Item, int > itemsToBuy

        +printList()
        +getItemAmount(Item newItem)
        +getItemPrice(Item newItem)
        +getTotalPrice()
        +addItem(Item newItem, int initialAmount)
        +increaseAmountOfItem(Item item, int amount)
    }

    %% Classes relationships
    Item "*" o-- "1" ShoppingList : contains

```