---
title: "LAB#SE01-1"
---
# Maven/Gradle Person and Account

::: {.panel-tabset}
## Context
**Basic understanding of Java programming language is required**, as well as some familiarity with **Maven or Gradle for managing dependencies** and building the project.

**Knowledge of algotighms and data structures** to implement the required classes.

## Goal
**Create three classes in Java** (`Person`, `Account` and `Manager`) that implement different algorightms or data structures.

**Test these classes** using JUnit.

## Tasks
(@) Create **a new Maven or Gradle project** and setting up the project structure
(@) Modify the project's `pom.xml` or `build.gradle` file to import necessary dependencies, including **JUnit** for testing
(@) Implement the three required classes in Java
(@) Implement two basic patter-designs: **singleton** and **think about factory**
(@) Write **JUnit tests** to verify that classes work as expected

## Optional
*   **Allow the user to input data via the console**, rather than using `hard-coded test data` in JUnit tests
:::

## Approach 1
### UML diagram
:::{.callout-note collapse="false"}
```{mermaid}
classDiagram
    Person "1" --o "1" Account : has
    Person "*" -- "1" AccountManager : manages

    class Person{
        -String name
        -String address
        -int age
        -Account account
        +getBalance()
        +setBalance()
        +getPin()
        +setPin()
    }
    
    class Account{
        -String accountManager
        -String pin
        -double balance
        +equals(Account compared) boolean
    }

    class AccountManager{
        +withdrawal(Person person, double amount) boolean
        +transfer(Person sender, Person receiver, double amount) boolean
        +changePin(Person person, String oldPin, String newPin) boolean
    }
    <<Static>> AccountManager
    %%note for AccountManager "Can withdraw money from a person's account\nCan tranfer money between two persons' account\nCan change the Pin of a person's account"
```
:::
### Classes specification
#### Person
:::{.callout-note collapse="true"}
## Person class
```{.java include="../../../../java-exercises/lab-se-01-1/src/main/java/org/example/Person.java"}

```
:::

#### Account
:::{.callout-note collapse="true"}
## Account class
```{.java include="../../../../java-exercises/lab-se-01-1/src/main/java/org/example/Account.java"}

```
:::

#### AccountManager
:::{.callout-note collapse="true"}
```{.java include="../../../../java-exercises/lab-se-01-1/src/main/java/org/example/AccountManager.java"}

```
:::

## Approach 2

## Approach 3