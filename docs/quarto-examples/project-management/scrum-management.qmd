---
title: "Scrum management"
---
# Introduction
Here we'll discuss some key topics regarding Scrum management of projects

# Scrum stages
## Sprints
### Sprint 0 (It doesn't exist, really!!)

What this sprint isn't:

- It is not the phase in which the team is put together
    - In order to conduct a Sprint in the first place, a team must already be in place
- It is not the phase for setting up infrastructure which should already be implemented or easily implemented on demand, but not as part of a Sprint Zero
- It should not involve adding products to a backlog or Consider Planning as classical project with Gantt Diagrams plannings

The main goal of a Sprint Zero is **to deliver some usable value that can be built upon by the next team.**

Sprint Zeroes are required to:

- Create the project's **skeleton**, including research spikes
- **Keep design minimal**
- Develop a small number of **stories** to completion
- Be low velocity and lightweight

More specifically, the deliverables of a Sprint Zero should be as follows:

- A **usable** piece of code, however small
- A **minimal** environment for writing code
- A **prioritization** of features or a list of stories
- A **release plan** assigning each story to a Sprint
- A plan for the most likely implementation of **features**

#### Keywords of a Sprint Zero:

Let's take the example of the Library Laboratory SE03-01
```{dot}
graph sprintZero {
    graph [
        layout = twopi
        #layout = neato
        ranksep = 2.7
        label = "Sprint Zero"
        labelloc = b
        fontname = "Helvetica,Arial,sans-serif"
        start = regular
        normalize = false
        overlap="compress"
    ]

    node [
        shape = circle
        style = filled
        color = "#00000088"
        width = 1.2
        fontname = "Helvetica,Arial,sans-serif"
    ]

    edge [
        len = 2
		color = "#00000088"
		fontname = "Helvetica,Arial,sans-serif"
    ]
    
    subgraph Stages {
        node [fontcolor = white width = 1.4]
        "Sprint Zero" [fillcolor = olive]
        "Sprint Zero" -- {
            "1 - Project" [fillcolor = orange fontcolor = black]
            "2 - DDD" [fillcolor = black]
            "3 - UML" [fillcolor = green]
            "4 - Code" [fillcolor = blue]
        }
    }

    subgraph Project {
        node [fillcolor = gold fontcolor = black]
        "1 - Project" -- {
            "Use Case"
            "Documentation"
            "Mock-up"
            "Open\nProject?"
        }
    }

    subgraph ProjectSubItems {
        node [fillcolor = peachpuff]
        "Use Case" -- "User Stories"
        "Documentation" -- "Quarto"
        "Documentation" -- "Obsidian"
        "Mock-up" -- "New Feature"
    }
    
    subgraph DDD {
        node [fontcolor = white]
        "2 - DDD" -- {
            "Vocabulary"
            "Packages"
            "Model"
            "Controller"
            "Refactor\nDomain"
        }
        "Vocabulary" -- "Common\nLanguage"
        "Refactor\nDomain" -- "If there is\nLegacy Code"
    }

    subgraph UML {
        node [fillcolor = yellowgreen fontcolor = black]
        "3 - UML" -- {
            "Relationships"
        }


    }

    subgraph UMLActions {
        node [fillcolor = "0.250 .2 1"]
        "Relationships" -- {
            "Composition"
            "Inheritance"
            "Multiplicity"
        }

        
    }
    
    subgraph Code {
        node [fillcolor = deepskyblue fontcolor = white]
        "4 - Code" -- {
            "Utilities"
            "Core model"
            "Managers"
            "Dependencies"
            "Maven"
            "Refactor\nCode"
            "Test"
            "Git"
        }
    }

    subgraph CodeActions {
        node [fillcolor = cornflowerblue fontcolor = white]
        "Core model" -- {
            "Book"
            "Borrow"
            "User"
        }
        "Test" -- "Make Borrow"
        "Git" -- "GitHub"
    }

    subgraph Dependencies {
        node [fillcolor = cornflowerblue fontcolor = white]
        "Dependencies" -- {
            "lombok"
            "JUnit"
            "Jupiter"
            "faker"
        }
    }
    subgraph FakerActions {
        node [fillcolor = lightskyblue]
        "faker" -- "Create"
        "Create" -- {
            "100 books"
            "100 users"
        }
    }

    subgraph Interdependencies {
        edge [style=dotted]
        "Controller" -- "Managers"
        "Refactor\nDomain" -- "Refactor\nCode"
    }
}
```

### Sprint 1
We'll define multiple tasks in the backlog and assign priorities and complexity to each of them. Don't worry about defining tasks that might not be needed, they should be removed if they aren't addressed after some sprints:

Template --> Task name (priority) (complexity)

- Spring backlog:
    - Project:
        - Business Model (21) (13)
        - Use cases (21) (13)
        - Define Release Plan:
            - Number of Sprints (21) (8)
            - Goal for each Sprint (21) (8)
        - Mock-ups (13) (13)
        - Deployment:
            - Programming languages and versions
            - Dependencies
            - Pipeline
        - Documentation: (21) (13)
            - Git:
                - Technology to use (GitHub, GitLab) (8) (5)
                - Stylebook: (13) (13)
                    - Branch names
                    - Commit texts and labels
                - Roles (13) (8)
                    - Who reviews pull requests?
                    - Who can merge code?
                    - Who can push to production?
        - Scrum concepts: (13) (8)
            - Define "Done" task

    - Domains:
        - Common language (21) (13)
        - Rethink Test Borrow by Console (5) (21)
    - UML:
        - Functional diagram (21) (13)
        - Core classes (21) (13)
        - Manager classes (13) (13)
    - Code:
        - Sandbox: (21) (8)
        - Git:
            - Initialization (21) (8)
        - Refactor user interface (13) (13)
        - Test Borrow (13) (13)
        - Book Manager (13) (8)
        - Borrow Manager (13) (21)
        - User Manager (13) (8)
        - Create fakers for each Manager (13) (13)
        - Deployment (21) (21)

After that, we'll work with a Kanban table to keep track of the status of each task:

- Options:
    - GitHub projects
    - OpenProject

