---
title: "Docker software deployment"
---

# Introduction

# Software categories
## Communication
### NextCloud
#### Installation
Follow the Docker deployment [installation guide](https://github.com/docker-library/docs/blob/master/nextcloud/README.md) for a quick nextCloud deployment. After that, create the required configurations to ensure persistence.

For a quick test, just run:
```bash
docker run -d -p 8081:80 nextcloud:stable-apache
```
Connect to `http://<nextcloud-server>:8081` and follow the instructions. Install the recommended apps to try the Online Office feature.

:::{.callout-warning}
## Data is not persistent!
Be aware that if no volume binding has been made, when stopping the containers the volumes become dandling, not reattached to the next started container. Make sure to define pertinent volume attachments when deploying to production.
:::

:::{.callout-note}
## Enabling NextCloud office features
NextCloud can make use of a built-in document server named Collabora, based on LibreOffice that allows to modify several types of documents online.

On a testing environment, if documents aren't opened online, try to go to the Administration Parameters --> Administration --> Office. Even though the second option is selected, the built-in CODE isn't accessible due to using an insecure protocol (HTTP) (just try to click again on the button and the verification will fail). As a workaround, click on the first option `Use your own server` and just tick the `Disable certificate verification` checkbox; Now the notification regarding Collabora Online accessibility should be OK.
:::

:::{.callout-warning}
## Some features are unavailable without an SSL certificate
Features like video conferences in Talk are disabled
:::

:::{.callout-note}
## OnlyOffice + NextCloud integration
As an alternative to the built-in Collabora/CODE document server, if you want to easily deploy both the OnlyOffice Document Server and the NextCloud at the same time, follow this [installation guide](https://github.com/ONLYOFFICE/docker-onlyoffice-nextcloud). It contains a `docker-compose.yml` file for the deployment.
:::

#### Configuration
Try to create a `docker-compose.yml` file to ease the nextCloud deployment. The steps are defined in the installation guide.

## Collaborative tools

## Productivity tools
### OpenProject
OpenProject is a project management suite. It has the required tools to manage Scrum projects.

#### Installation
OpenProject can be deployed as docker containers. Follow the [installation guide](https://www.openproject.org/docs/installation-and-operations/installation/docker/) to do it. They have a GitHub repository with the `docker-compose` configuration to easily deploy it.

:::{.callout-note}
## Be patient with the OpenProject initialization
It takes some time for the OpenProject Web GUI to be available, just wait at least 5 minutes.
If something goes wrong, check logs. From the same `docker-compose.yml` dir:
```bash
docker compose logs
``` 
:::
Once up, access the Web GUI at `http://<openproject-ip>:8080`

#### Configuration
Things to consider configuring:

* **User creation activation:** by default, the `admin` user is responsible of manually activate any new account. This can be changed to automatically activate accounts either instantly or by sending an e-mail
    * The e-mail option requires OpenProject to have an SMTP server available to send mails

## User database and authentication
### OpenLDAP + phpLDAPadmin
We'll be using a bitnami/openldap docker image as it runs as non-privileged user, so that's an additional layer of security.

### FreeIPA
Follow this tutorial:
{{< video https://youtu.be/lH7I-omZ4PA >}}

## Code analysis
### SonarQube

* Use the following [docker-compose.yml](https://github.com/SonarSource/docker-sonarqube/find/master) as a starting point.
* Sonarqube uses ElasticSearch, and it requires some system params changes, we have to change it inside the docker container. We'll use an `init` container for that:
    * Add the following code snippet as a `service` inside the `docker-compose.yml`:

    ```{.yml filename=docker-compose.yml}
    service:
        [...]
        # Init container for system parameter changes
        init:
            image: bash
            privileged: true
            user: root
            volumes:
            - ./scripts/init.sh:/mnt/init.sh
            command: ["sh", "-e", "/mnt/init.sh"]

    ```

    * Create a `scripts/init.sh` file that changes some limits:
    ```{.bash filename="scripts/init.sh" include=../../../../scripts/docker-compose/sonarqube/scripts/init.sh}
    ```

* If we want SonarQube to use LDAP authentication, we need to add custom config properties:

    * We must edit its properties file `$SONARQUBE_HOME/conf/sonar.properties` (change the values according to your LDAP server):

    ```{.yaml filename=$SONARQUBE_HOME/conf/sonar.properties include=../../../../scripts/docker-compose/sonarqube/conf/sonar.properties}

    ```

    * Add both a `conf` volume and the `sonar.properties` inside the SonarQube docker-compose file:
    ```{.yaml filename=$PWD/docker-compose.yml}
    services:
        sonarqube:
            [...]
            volumes:
            - sonarqube_conf:/opt/sonarqube/conf
            - $PWD/conf/sonar.properties:/opt/sonarqube/conf/sonar.properties
    
    volumes:
        [...]
        sonarqube_conf:
    ```

:::{.callout-warning}
## TODO
Obfuscate LDAP credentials somehow!
:::