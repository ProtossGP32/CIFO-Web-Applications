---
title: "GIT useful tips"
---
# Introduction
# Git commands
## Remote repository
### Get a copy of a remote repository
```bash
git clone <git-repository-url>
```

When authenticating with SSH, use the appropriate SSH url.

### Update list of repository's remote branches
```bash
git remote update <remote-repo> --prune
```
- `--prune` removes any local reference to non-existing remote branches

If we have other remotes, just repeat the process changing the remote name:

```bash
git remote update <another-remote-repo> --prune
```

### Set the remote repository branch to track

```{.bash}
git branch -u <remote-repo>/<remote-branch>
```

### Check repository tracking config
You can always check what branches are tracked for each local branch in the `.git/config` file:

```{.conf}
[core]
        repositoryformatversion = 0
        filemode = false
        bare = false
        logallrefupdates = true
[remote "origin"]
        url = git@github.com:ProtossGP32/gameBoardStats.git
        fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
        remote = origin
        merge = refs/heads/main
[remote "upstream"]
        url = git@github.com:cifoteam/gameBoardStats.git
        fetch = +refs/heads/main:refs/remotes/upstream/main
[branch "task/59-create-gamescollectionmanager-class"]
        remote = origin
        merge = refs/heads/task/59-create-gamescollectionmanager-class
[branch "task/66-modify-gamescollection-class-to-include-info-related-to-the-games-usage"]
        remote = origin
        merge = refs/heads/task/66-modify-gamescollection-class-to-include-info-related-to-the-games-usage
```

## Branches
### Show available branches
```bash
git branch
```

- Also show remote branches:
```bash
git branch -a
```

### Clone an existing branch
```bash
git checkout <branch-name>
```

### Create a new branch
```bash
git checkout -b <new-branch-name>
```

### Delete a local branch
```bash
git branch --delete <branch-name>
```

### Delete a remote branch
```bash
git push origin --delete feature/login
```

## Updating local checkouts
### Retrieve latest changes in remote repositories
```bash
git fetch
```
- This command downloads the git objects (blobs, trees and commits), it doesn't `merge` the changes into the local checkouts.
    - This means that the files in local branches are still behind the latest commits, they must be `merge`d or `fast-forward`ed

### Update local branches
```bash
git merge <remote-branch> <local-branch>
```

### Overwrite local branches with remote repositories
```bash
git pull
```

## Pushing local checkouts
### Push a local branch to a remote repository
When pushing a branch for the first time, it has to be created in the remote repository. This is done during `push` with the following command:

```{.bash}
git push --set-upstream <remote-repo> <local-branch>
```

- `--set-upstream` automatically sets up the tracking information for that branch

If the branch is already created in the remote repository, you can simply push it to the desired remote by executing:

```{.bash}
git push <remote-repo>
```