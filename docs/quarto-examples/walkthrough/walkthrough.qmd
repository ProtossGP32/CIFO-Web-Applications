---
title: "Hello, Quarto"
format: html
---

## Markdown

Markdown is an easy to read and write text format:

- It's _plain text_ so works well with version control
- It can be **rendered** into HTML, PDF, and more
- Learn more at: <https://quarto.org/docs/authoring/>

## Code Cell

Here is a Python code cell.

Install the VS Code Python Extension to enable
running this cell interactively.

```{python}
import os
os.cpu_count()
```

## Equation

Use LaTeX to write equations:

$$
\chi' = \sum_{i=1}^n k_i s_i^2
$$


## Observable JS
You can insert Observable code snippets in your Quarto document.

First, load the data with the [FileAttachment](https://observablehq.com/@observablehq/file-attachments) method. We'll be using a dataset from [the New Zealand's official data agency](https://stats.govt.nz/large-datasets/csv-files-for-download/), specifically the [Occupied and unoccupaied dwellings census](https://www3.stats.govt.nz/2018census/Occupied-dwellings-unoccupied-dwellings-dwellings-under-construction-private-and-non-private-dwellings-2006-2013-2018-Censuses-RC-TA-SA2-DHB.zip?_ga=2.45968608.514034696.1677755511-1169319431.1677755511):


```{ojs}
// Load the CSV file
data = FileAttachment("../data/Data8278.csv").csv()
// Print the data columns
data.columns

```

We can represent the data based on its columns. We can have a look a its data as a Table by invoking the `Inputs.table` method. Also, as Tables are `view-compatible`, we can store it in a `viewof` variable for further usage:

```{ojs}
// Create the view-compatible object. This will automatically render it
viewof data_table = Inputs.table(data)

```

Calling the previous `viewof` object will show the info related to the selected rows in the table:

```{ojs}
// Call the viewof object and select some rows from the previous table
data_table

```

Right now the available fields aren't very descriptive, they are just IDs of some other lookup tables. We can use join operations to overwrite them.

First load in separate tables each lookup table:

```{ojs}
// Load the DwellRecType lookup Table
dwell_rec_type_lookup = FileAttachment("../data/DimenLookupDwellRecType8278.csv").csv()

// Load the DwellStatus lookup table
dwell_status_lookup = FileAttachment("../data/DimenLookupDwellStatus8278.csv").csv()

// Load the Area lookup Table
area_lookup = FileAttachment("../data/DimenLookupArea8278.csv").csv()

```

Check its contents:
- Dwell Rec Type lookup:
```{ojs}
viewof dwell_rec_type_lookup_table = Inputs.table(dwell_rec_type_lookup)
```

- Dwell Status lookup:

```{ojs}
viewof dwell_status_lookup_table = Inputs.table(dwell_status_lookup)
```

- Area lookup:

```{ojs}
viewof area_lookup_table = Inputs.table(area_lookup)
```

As explained in [the official ObservableHQ page](https://observablehq.com/@dakoop/combining-data-learn-js-data), we can use a more performant form of join:

```{ojs}
// create the join function
function join(lookupTable, mainTable, lookupKey, mainKey, select) {
    var l = lookupTable.length,
        m = mainTable.length,
        lookupIndex = [],
        output = [];
    for (var i = 0; i < l; i++) { // loop through the lookupTable items
        var row = lookupTable[i];
        lookupIndex[row[lookupKey]] = row; // create an index for lookup table
    }

    for (var j = 0; j < m; j++) { // loop through the mainTable items
        var y = mainTable[j];
        var x = lookupIndex[y[mainKey]]; // get corresponding row from lookupTable
        output.push(select(y, x)); // select only the columns you need
    }
    return output;
}
```

Let's try it with a simple example:

```{ojs}
// Create a mainTable called articles
articles = [{
    "id": 1,
    "name": "vacuum cleaner",
    "weight": 9.9,
    "price": 89.9,
    "brand_id": 2
}, {
    "id": 2,
    "name": "washing machine",
    "weight": 540,
    "price": 230,
    "brand_id": 1
}, {
    "id": 3,
    "name": "hair dryer",
    "weight": 1.2,
    "price": 24.99,
    "brand_id": 2
}, {
    "id": 4,
    "name": "super fast laptop",
    "weight": 400,
    "price": 899.9,
    "brand_id": 3
}]

// Create a brands lookup table
brands = [{
    "id": 1,
    "name": "SuperKitchen"
}, {
    "id": 2,
    "name": "HomeSweetHome"
}]

// Call the join function
join(brands, articles, "id", "brand_id", function(article, brand) {
    return {
        id: article.id,
        name: article.name,
        weight: article.weight,
        price: article.price,
        brand: (brand !== undefined) ? brand.name : null
    };
})

```

Now we try to join each lookup table with the main data table:

```{ojs}
// Join Dwell DwellRecType with data
join(dwell_rec_type_lookup, data, "Code", "DwellRecType", function(item, dwell_rec_type) {
    return {
        year: item.Year,
        DwellRecType: item.DwellRecType,
        DwellRec: dwell_rec_type.Description,
        DwellStatus: item.DwellStatus,
        Area: item.Area,
        Count: item.Count
    };
})

```